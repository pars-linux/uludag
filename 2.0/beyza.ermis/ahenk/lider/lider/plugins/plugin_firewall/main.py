#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    Firewall magement module
"""

# Standard library
import base64
import bz2
import os
import tempfile

# Qt4 modules
from PyQt4 import QtGui
from PyQt4 import QtCore

# Generated UI module
from ui_firewall import Ui_widgetFirewall

# Helper modules
from lider.helpers import plugins
from lider.helpers import wrappers


class WidgetModule(QtGui.QWidget, Ui_widgetFirewall, plugins.PluginWidget):
    """
        Firewall management UI.
    """
    def __init__(self, parent=None):
        """
            Constructor for main window.

            Arguments:
                parent: Parent object
        """
        plugins.PluginWidget.__init__(self)
        QtGui.QWidget.__init__(self, parent)

        # Rules
        self.rules_xml = ""
        self.rules_compiled = ""

        # Attach generated UI
        self.setupUi(self)

        # UI events
        self.connect(self.pushEdit, QtCore.SIGNAL("clicked()"), self.__slot_edit)

    def showEvent(self, event):
        """
            Things to do before widget is shown.
        """
        pass

    def get_type(self):
        """
            Widget type.

            Should return TYPE_GLOBAL or TYPE_SINGLE
        """
        return plugins.TYPE_SINGLE

    def load_policy(self, policy):
        """
            Main window calls this method when policy is fetched from directory.
            Not required for global widgets.
        """
        firewallState = policy.get("firewallState", ["off"])[0]
        self.groupFirewall.setChecked(firewallState == "on")

        firewallRules = policy.get("firewallRules", [""])[0]
        try:
            firewallRules = firewallRules.split(":")[0]
            firewallRules = base64.decodestring(firewallRules)
            firewallRules = bz2.decompress(firewallRules)
        except:
            firewallRules = ""
        self.rules_xml = firewallRules

    def dump_policy(self):
        """
            Main window calls this method to get policy generated by UI.
            Not required for global widgets.
        """
        firewallState = "off"
        if self.groupFirewall.isChecked():
            firewallState = "on"

        rules_xml = bz2.compress(self.rules_xml)
        rules_xml = base64.encodestring(rules_xml)

        rules_compiled = bz2.compress(self.rules_compiled)
        rules_compiled = base64.encodestring(rules_compiled)

        firewallRules = rules_xml + ":" + rules_compiled

        policy = {
            "firewallState": [firewallState],
            "firewallRules": [firewallRules],
            "objectClass": ["firewallPolicy"]
        }
        return policy

    def talk_message(self, sender, command, arguments=None):
        """
            Main window calls this method when an XMPP message is received.
        """
        pass

    def talk_status(self, sender, status):
        """
            Main window calls this method when an XMPP status is changed.
        """
        pass

    def __slot_edit(self):
        """
            Triggered when user clicks 'Edit Rules' button.
        """
        fp = tempfile.NamedTemporaryFile(delete=False)
        name = fp.name
        if len(self.rules_xml):
            fp.write(self.rules_xml)
        else:
            fp.write(file("/usr/share/ahenk-lider/firewall.fwb").read())
        fp.close()

        os.system("/usr/bin/fwbuilder -q -f %s" % name)
        os.system("/usr/bin/fwb_ipt -q -f %s -o %s.sh Firewall" % (name, name))

        self.rules_xml = file(name).read()
        self.rules_compiled = file(name + ".sh").read()

        self.editRules.setPlainText(self.rules_compiled)

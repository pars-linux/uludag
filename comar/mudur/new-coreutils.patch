Index: bin/mudur.py
===================================================================
--- bin/mudur.py	(revision 16646)
+++ bin/mudur.py	(working copy)
@@ -362,9 +362,9 @@
     keymap = config.get("keymap")
     language = languages[lang]
     # Now actually set the values
-    run("/usr/bin/kbd_mode", "-u")
-    run_quiet("/bin/loadkeys", keymap)
-    run("/usr/bin/setfont", "-f", language.font, "-m", language.trans)
+    run("kbd_mode", "-u")
+    run_quiet("loadkeys", keymap)
+    run("setfont", "-f", language.font, "-m", language.trans)
 
 def setSystemLanguage():
     lang = config.get("language")
@@ -405,7 +405,7 @@
                 fcntl.ioctl(f, KDSKBMODE, K_UNICODE)
                 f.write(UI.UNICODE_MAGIC)
                 f.close()
-                run("/usr/bin/setfont", "-f", language.font, "-m", language.trans, "-C", "/dev/tty%s" %i)
+                run("setfont", "-f", language.font, "-m", language.trans, "-C", "/dev/tty%s" %i)
         except:
             ui.error(_("Could not set unicode mode on tty %d") % i)
 
@@ -415,7 +415,7 @@
     ent = config.get_mount(part)
     if ent and len(ent) > 3:
         args = "-t %s -o %s %s %s" % (ent[2], ent[3], ent[0], ent[1])
-    os.system("/bin/mount -n %s" % args)
+    os.system("mount -n %s" % args)
 
 
 #
@@ -429,7 +429,7 @@
     # the problem if it ever happens.
     delete("/var/db/comar/__*")
     delete("/var/db/comar/log*")
-    run("/sbin/start-stop-daemon", "-b", "--start", "--quiet",
+    run("start-stop-daemon", "-b", "--start", "--quiet",
         "--pidfile", "/var/run/comar.pid", "--make-pidfile",
         "--exec", "/usr/bin/comar")
 
@@ -484,7 +484,7 @@
         ui.info(_("Restoring saved device states"))
         for name in os.listdir(devpath):
             run_quiet(
-                "/usr/bin/cp",
+                "cp",
                 "--preserve=all", "--recursive", "--update",
                 "%s/%s" % (devpath, name), "/dev/"
             )
@@ -509,7 +509,7 @@
     if config.kernel_ge("2.6.16"):
         # disable uevent helper, udevd listens to netlink
         write("/sys/kernel/uevent_helper", " ")
-        run("/sbin/udevd", "--daemon")
+        run("udevd", "--daemon")
         
         ui.info(_("Populating /dev"))
 
@@ -517,31 +517,31 @@
         os.mkdir("/dev/.udev/queue/")
 
         # trigger events for all devices
-        run("/sbin/udevadm", "trigger")
+        run("udevadm", "trigger")
         # wait for events to finish
-        run("/sbin/udevadm", "settle", "--timeout=180")
+        run("udevadm", "settle", "--timeout=180")
     else:
         # no netlink support in old kernels
         write("/proc/sys/kernel/hotplug", "/sbin/udevsend")
-        run("/sbin/udevstart")
+        run("udevstart")
     
     # NOTE: handle lvm here when used by pardus
     
 def checkRoot():
     if not config.get("livecd"):
         ui.info(_("Remounting root filesystem read-only"))
-        run("/bin/mount", "-n", "-o", "remount,ro", "/")
+        run("mount", "-n", "-o", "remount,ro", "/")
         
         ent = config.get_mount("/")
         if config.get("forcefsck") or (len(ent) > 5 and ent[5] != "0"):
             if config.get("forcefsck"):
                 ui.info(_("Checking root filesystem (full check forced)"))
-                t = run_full("/sbin/fsck", "-C", "-a", "-f", "/")
+                t = run_full("fsck", "-C", "-a", "-f", "/")
                 # /forcefsck isn't deleted because checkFS needs it.
                 # it'll be deleted in that function.
             else:
                 ui.info(_("Checking root filesystem"))
-                t = run_full("/sbin/fsck", "-C", "-T", "-a", "/")
+                t = run_full("fsck", "-C", "-T", "-a", "/")
             if t == 0:
                 pass
             elif t == 2 or t == 3:
@@ -552,29 +552,29 @@
                 ui.warn(_("Rebooting in 10 seconds ..."))
                 time.sleep(10)
                 ui.warn(_("Rebooting..."))
-                run("/sbin/reboot", "-f")
+                run("reboot", "-f")
             else:
                 ui.error(_("Filesystem couldn't be fixed :("))
-                run_full("/sbin/sulogin")
+                run_full("sulogin")
         else:
             ui.info(_("Skipping root filesystem check (fstab's passno == 0)"))
     
     ui.info(_("Remounting root filesystem read/write"))
-    if run_quiet("/bin/mount", "-n", "-o", "remount,rw", "/") != 0:
+    if run_quiet("mount", "-n", "-o", "remount,rw", "/") != 0:
         ui.error(_("Root filesystem could not be mounted read/write :("))
     
     # Fix mtab
     write("/etc/mtab", "")
-    run("/bin/mount", "-f", "/")
+    run("mount", "-f", "/")
     ents = loadFile("/proc/mounts").split("\n")
     for ent in ents:
         if ent != "":
             data = ent.split()
             if config.get_mount(data[1]):
-                run("/bin/mount", "-f", "-o", "remount", data[1])
+                run("mount", "-f", "-o", "remount", data[1])
 
 def setHostname():
-    khost = capture("/bin/hostname")[0].rstrip("\n")
+    khost = capture("hostname")[0].rstrip("\n")
     uhost = None
     if os.path.exists("/etc/env.d/01hostname"):
         data = loadFile("/etc/env.d/01hostname")
@@ -605,7 +605,7 @@
         write("/etc/env.d/01hostname", data)
     
     ui.info(_("Setting up hostname as '%s'") % host)
-    run("/bin/hostname", host)
+    run("hostname", host)
 
 def modules():
     # dont fail if kernel do not have module support compiled in
@@ -625,7 +625,7 @@
         data = loadFile(fn).split("\n")
         data = filter(lambda x: x != "" and not x.startswith('#'), data)
         for mod in data:
-            run("/sbin/modprobe", "-q", mod)
+            run("modprobe", "-q", mod)
 
 def checkFS():
     if config.get("livecd"):
@@ -635,11 +635,11 @@
 
     if config.get("forcefsck"):
         ui.info(_("A full fsck has been forced"))
-        t = run_full("/sbin/fsck", "-C", "-R", "-A", "-a", "-f")
+        t = run_full("fsck", "-C", "-R", "-A", "-a", "-f")
         # remove forcefsck file
         os.unlink("/forcefsck")
     else:
-        t = run_full("/sbin/fsck", "-C", "-T", "-R", "-A", "-a")
+        t = run_full("fsck", "-C", "-T", "-R", "-A", "-a")
 
     if t == 0:
         pass
@@ -647,11 +647,11 @@
         ui.warn(_("Filesystem errors corrected"))
     else:
         ui.error(_("Fsck could not correct all errors, manual repair needed"))
-        run_full("/sbin/sulogin")
+        run_full("sulogin")
 
 def localMount():
     if os.path.exists("/proc/modules") and not os.path.exists("/proc/bus/usb"):
-        run_quiet("/sbin/modprobe", "usbcore")
+        run_quiet("modprobe", "usbcore")
     
     if os.path.exists("/proc/bus/usb") and not os.path.exists("/proc/bus/usb/devices"):
         gid = None
@@ -661,15 +661,15 @@
                 break
         ui.info(_("Mounting USB filesystem"))
         if gid:
-            run("/bin/mount", "-t", "usbfs", "usbfs", "/proc/bus/usb", "-o", "devmode=0664,devgid=%s" % gid)
+            run("mount", "-t", "usbfs", "usbfs", "/proc/bus/usb", "-o", "devmode=0664,devgid=%s" % gid)
         else:
-            run("/bin/mount", "-t", "usbfs", "usbfs", "/proc/bus/usb")
+            run("mount", "-t", "usbfs", "usbfs", "/proc/bus/usb")
     
     ui.info(_("Mounting local filesystems"))
-    run("/bin/mount", "-at", "noproc,noshm,nocifs,nonfs,nonfs4")
+    run("mount", "-at", "noproc,noshm,nocifs,nonfs,nonfs4")
     
     ui.info(_("Activating swap"))
-    run("/sbin/swapon", "-a")
+    run("swapon", "-a")
 
 def remoteMount(old_handler):
     data = loadFile("/etc/fstab").split("\n")
@@ -693,7 +693,7 @@
         while True:
             next_set = []
             for item in netmounts:
-                ret = run_quiet("/bin/mount", item[1])
+                ret = run_quiet("mount", item[1])
                 if ret != 0:
                     next_set.append(item)
             if len(next_set) == 0:
@@ -745,11 +745,11 @@
             adj = "--noadjfile"
         elif os.stat("/etc/adjtime").st_size == 0:
             write("/etc/adjtime", "0.0 0 0.0\n")
-        t = capture("/sbin/hwclock", adj, opts)
+        t = capture("hwclock", adj, opts)
         if t[1] != '':
             ui.error(_("Failed to adjust systematic drift of the hardware clock"))
     
-    t = capture("/sbin/hwclock", "--hctosys", opts)
+    t = capture("hwclock", "--hctosys", opts)
     if t[1] != '':
         ui.error(_("Failed to set system clock to hardware clock"))
 
@@ -786,17 +786,6 @@
     os.chown("/tmp/.X11-unix", 0, 0)
     os.chmod("/tmp/.X11-unix", 01777)
 
-def resetConPerms():
-    # reset console permissions if we are actually using it
-    if os.path.exists("/sbin/pam_console_apply"):
-        for pamd in os.listdir("/etc/pam.d"):
-            data = loadFile(os.path.join("/etc/pam.d", pamd)).split("\n")
-            m = filter(lambda x: "pam_console" in x and not x.startswith("#"), data)
-            if len(m) > 0:
-                run("/sbin/pam_console_apply", "-r")
-                break
-
-
 #
 # Finalization functions
 #
@@ -810,7 +799,7 @@
         opts = "--localtime"
     
     ui.info(_("Syncing system clock to hardware clock"))
-    t = capture("/sbin/hwclock", "--systohc", opts)
+    t = capture("hwclock", "--systohc", opts)
     if t[1] != '':
         ui.error(_("Failed to sync clocks"))
 
@@ -827,8 +816,8 @@
     ui.info(_("Deactivating swap"))
     # unmount unused tmpfs filesystems before swap
     # (tmpfs can be swapped and you can get a deadlock)
-    run_quiet("/bin/umount", "-at", "tmpfs")
-    run_quiet("/sbin/swapoff", "-a")
+    run_quiet("umount", "-at", "tmpfs")
+    run_quiet("swapoff", "-a")
     
     def getFS():
         ents = loadFile("/proc/mounts").split("\n")
@@ -847,13 +836,13 @@
     
     ui.info(_("Unmounting filesystems"))
     # write a reboot record to /var/log/wtmp before unmounting
-    run("/sbin/halt", "-w")
+    run("halt", "-w")
     for dev in getFS():
-        if run_quiet("/bin/umount", dev[1]) != 0:
+        if run_quiet("umount", dev[1]) != 0:
             # kill processes still using this mount
-            run_quiet("/bin/fuser", "-k", "-9", "-m", dev[1])
+            run_quiet("fuser", "-k", "-9", "-m", dev[1])
             time.sleep(2)
-            run_quiet("/bin/umount", "-f", "-r", dev[1])
+            run_quiet("umount", "-f", "-r", dev[1])
     
     def remount_ro(force=False):
         ents = loadFile("/proc/mounts").split("\n")
@@ -863,16 +852,16 @@
         ents.sort(key=proc_key, reverse=True)
         
         if ents:
-            run("/usr/bin/sync")
-            run("/usr/bin/sync")
+            run("sync")
+            run("sync")
             time.sleep(1)
         
         ret = 0
         for ent in ents:
             if force:
-                ret += run_quiet("/bin/umount", "-n", "-r", ent[1])
+                ret += run_quiet("umount", "-n", "-r", ent[1])
             else:
-                ret += run_quiet("/bin/mount", "-n", "-o", "remount,ro", ent[1])
+                ret += run_quiet("mount", "-n", "-o", "remount,ro", ent[1])
         if ret:
             run_quiet("killall5", "-9")
         return ret
@@ -897,7 +886,7 @@
     import traceback
     traceback.print_tb(eTrace)
     print
-    run_full("/sbin/sulogin")
+    run_full("sulogin")
 
 
 #
@@ -910,8 +899,8 @@
 sys.excepthook = except_hook
 os.umask(022)
 
-# Setup path just in case
-os.environ["PATH"] = "/bin:/sbin:/usr/bin:/usr/sbin:" + os.environ["PATH"]
+# Setup limited path
+os.environ["PATH"] = "/bin:/sbin:/usr/bin:/usr/sbin:"
 
 # Setup output and load configuration
 logger = Logger()
@@ -948,7 +937,7 @@
     
     # Set kernel console log level for cleaner boot
     # only panic messages will be printed
-    run("/bin/dmesg", "-n", "1")
+    run("dmesg", "-n", "1")
     
     checkRoot()
     setHostname()
@@ -965,31 +954,29 @@
     setSystemLanguage()
     
     # better performance for SMP systems, /var/run must be mounted rw before this
-    if os.path.exists("/usr/sbin/irqbalance"):
-        run("/usr/sbin/irqbalance")
+    if os.path.exists("irqbalance"):
+        run("irqbalance")
     
     # when we exit this runlevel, init will write a boot record to utmp
     write("/var/run/utmp", "")
     touch("/var/log/wtmp")
-    run("/usr/bin/chgrp", "utmp", "/var/run/utmp", "/var/log/wtmp")
-    run("/usr/bin/chmod", "0664", "/var/run/utmp", "/var/log/wtmp")
+    run("chgrp", "utmp", "/var/run/utmp", "/var/log/wtmp")
+    run("chmod", "0664", "/var/run/utmp", "/var/log/wtmp")
 
 elif sys.argv[1] == "boot":
     ui.info(_("Setting up localhost"))
-    run("/sbin/ifconfig", "lo", "127.0.0.1", "up")
-    run("/sbin/route", "add", "-net", "127.0.0.0", "netmask", "255.0.0.0",
+    run("ifconfig", "lo", "127.0.0.1", "up")
+    run("route", "add", "-net", "127.0.0.0", "netmask", "255.0.0.0",
         "gw", "127.0.0.1", "dev", "lo")
     
-    run("/sbin/sysctl", "-q", "-p", "/etc/sysctl.conf")
+    run("sysctl", "-q", "-p", "/etc/sysctl.conf")
     
     cleanupVar()
 
     if mdirdate("/etc/env.d") > mdate("/etc/profile.env"):
         ui.info(_("Updating environment variables"))
-        run("/sbin/update-environment")
+        run("update-environment")
     
-    resetConPerms()
-    
     cleanupTmp()
     
     startComar()
@@ -1000,11 +987,11 @@
     
 elif sys.argv[1] == "default":
     if not config.get("safe") and os.path.exists("/etc/conf.d/local.start"):
-        run("/bin/bash", "/etc/conf.d/local.start")
+        run("bash", "/etc/conf.d/local.start")
     
     ui.info(_("Triggering udev events which are failed during a previous run"))
     # Trigger only the events which are failed during a previous run.
-    run("/sbin/udevadm", "trigger", "--retry-failed")
+    run("udevadm", "trigger", "--retry-failed")
 
     startServices()
 
@@ -1016,7 +1003,7 @@
     logger.sync()
     
     if not config.get("safe") and os.path.exists("/etc/conf.d/local.stop"):
-        run("/bin/bash", "/etc/conf.d/local.stop")
+        run("bash", "/etc/conf.d/local.stop")
     
     stopSystem()
     
@@ -1025,17 +1012,17 @@
         kexecFile = "/sys/kernel/kexec_loaded"
         if os.path.exists(kexecFile) and int(file(kexecFile).read().strip()):
             ui.info(_("Trying initiate a warm reboot (skipping BIOS with kexec kernel)"))
-            run_quiet("/usr/sbin/kexec", "-e")
+            run_quiet("kexec", "-e")
 
         # Shut down all network interfaces just before halt or reboot, 
         # When halting the system do a poweroff. This is the default when halt is called as powerof
         # Don't write the wtmp record.
-        run("/sbin/reboot", "-idp")
+        run("reboot", "-idp")
         # Force halt or reboot, don't call shutdown
-        run("/sbin/reboot", "-f")
+        run("reboot", "-f")
     else:
-        run("/sbin/halt", "-ihdp")
-        run("/sbin/halt", "-f")
+        run("halt", "-ihdp")
+        run("halt", "-f")
     # Control never reaches here
 
 logger.sync()

PSM  - PiSi Signing Mechanism

by Serdar DALGIÃ‡        < serdar AT cclub DOT metu DOT edu DOT tr >

REPOSITORY SIGNING:

Currently, PiSi started handling repository signing. You need to import the public key whose private key signed the index files.
Gpg comes with the base-system in Pardus, all you have to do is import it with "gpg --import <Public_key>".

For now, keys are stored in ~/.gnupg folder. When add-pisi-key is ready, the location will be at /etc/pisi/pisi.conf.

PSM leaves the signing issue purely to GnuPG. Although it's not completed now, GnuPG dependant parts are in majority. As PSM develops more (add-pisi-key will be a significant milestone), Pardus technologies will start to dominate gpg work. 

PSM uses ascii-armored, detached digital signatures for signing the index files.  

HOW TO SIGN INDEX FILES?

pisi ix <directory> creates an index of a repository with packages, distribution and component information. The default behaviour is to sign the pisi-index.xml[.bz2] files with your key in ~/.gnupg keyring. PSM creates .asc extension files of both pisi-index.xml and pisi-index.xml.bz2 files. The reason why .asc selected is; It will be easy to control the signature with an eye-blink and later then verify with fingerprint etc.. It also brings some convenience when observing via web browsers.

HOW TO VERIFY THE SIGNATURES?

When you add-repo and say Yes to update the repository? question; or just update any repository, PSM checks the signature and inform you about the state of the index file, signed, bad-signed or no signature.. You can also add non-signed repositories to your repository list, PSM allows that action but warns you about the risk of adding a non-signed repository.  If the signature is bad, PSM does not allow you to add the repository.  If the signature is OK, everything is fine, repository added and updated. 

As GnuPG is being used, it allows you to get information about the signature, who signed it, name, e-mail, description; when is it signed and the fingerprint of the public key.

TODO: 

* code add-pisi-key{1] to handle keys. 
    -- add keys to a keyring at /etc/pisi/trusted.db
    -- list the keys, 
    -- manage the expired keys
    -- manage the not-found keys

* GUI entegration of PiSi
* write tests

[1]for details of add-apt-key, take a look at https://launchpad.net/add-apt-key

###Technical Details For those who are interested: ###

This part starts as an introduction to the code and development of PiSi.

If you are running a Pardus machine, Your PiSi code(upss, program :) ) is located at /usr/lib/pardus/pisi/

When you type "pisi" or "pisi-cli", these programs are found in /usr/bin/[pisi/pisi-cli] .. When you look at them (as they are just python code in the end), the main part firstly configures signal and exception handling parts, then a PisiCLI object is created (look at /usr/lib/pardus/pisi/cli/pisicli.py).

After this, cli.run_command() is being executed. As you can see from pisicli.py, PisiCLI object runs self.command.run(). This time, take a look at command.py which enables global package options (such as help, version, ignore-dependency, ignore-safety, debug, no-color etc..).

After initializations are being done, we have global arguments and decided which operation should be done, we are going to the file which we are interested in what it is doing. Let's take update_repo.py e.x. (We are still in cli/ directory)

Nearly in all pisi/cli/* files, the structure is the same. Class <operation>, the __doc__ part, def __init_, def options(self) and def run() parts...

So now, we know what our parameters are, which pisi-cli action we are going to take and we started struggling with pisi/api.py

In pisi/api.py, what the Meta structures of commands in pisi/cli/* orders to do, happens in here. for e.x update_repo.py calls pisi.api.update_repo() as

    for repo in repos:
        pisi.api.update_repo(repo, ctx.get_option('force'))

In api.py, info passing through ctx.ui.info, exception handlings, database connections are all handled in here..  

when you try to add_repo, check if the same repo name is in the repo list, or the same URI with different name, all these checks are happened in api.py

in the api.py file, you may see index = pisi.index.Index() files, as you can guess they are objects related to Index concept. 

pisi/index.py is a container module for arranging index related tasks, one of which is     def check_signature(self, filename, repo):

this functions calls the  pisi.file.File.check_signature(filename, tmpdir) at pisi/file.py

Not going forward much more; here comes the functions PSM is mostly related with

AT pisi/file.py;     
    def close(self, delete_transfer = False):
        pisi-index.xml[.bz2] files are signed with gpg -a --detach-sig parameters.

    @staticmethod
    def check_signature(uri, transfer_dir, sign=detached):

    This is the function where signature check calls are made.. also exceptions like raise NoSignatureFound(uri), raise InvalidSignature(uri) being raised from here..

The biggest problem is the need of a tool called add-pisi-key which will manage the usage of keys. Current implementation is just smt like a skeleton to the orig. versions cause It uses gnupg's user directory ~/.gnupg for signing datas/verifying signatures. As this user has to be root and the exact path is /root/.gnupg/, any kind of manipulation with hazardous effects in terms of security is not a matter of fact. On the other hand, a good implementation of key-management is needed as users may want to use their root gnupg implementations for their own purposes.. 

***LINKS AND OTHER STUFF***

For those who are interested in GnuPG and gpg parameters, here are some links:
a Mini Howto: http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html
GnuPG Manuals for detailed information: http://www.gnupg.org/documentation/manuals.en.html

How secure-apt solves the problems (this is what PSM is mainly based upon): http://wiki.debian.org/SecureApt
ubuntu add-apt-key launchpad page: https://launchpad.net/ubuntu/+source/add-apt-key/1.0-0.5








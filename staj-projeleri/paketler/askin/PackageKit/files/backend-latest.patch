diff -Nuar PackageKit-0.4.9-orig/backends/pisi/pisiBackend.py PackageKit-0.4.9/backends/pisi/pisiBackend.py
--- PackageKit-0.4.9-orig/backends/pisi/pisiBackend.py	2009-08-08 14:40:44.000000000 +0300
+++ PackageKit-0.4.9/backends/pisi/pisiBackend.py	2009-08-08 18:12:23.000000000 +0300
@@ -178,12 +178,25 @@
             else:
                 group = GROUP_UNKNOWN
 
-            self.details("%s-%s" % (pkg.name, self.__get_package_version(pkg)),
-                            pkg.license,
-                            group,
-                            pkg.description,
-                            pkg.packageURI,
-                            pkg.packageSize)
+
+            if self.installdb.has_package(package):
+                pkg_status = "installed"
+            elif self.packagedb.has_package(package):
+                pkg_status = "available"
+            else:
+                pkg_status = "unknown"
+
+            my_package_id = "%s;%s;%s;%s" % (pkg.name,
+                                            self.__get_package_version(pkg),
+                                            pkg.architecture,
+                                            pkg_status)
+
+            self.details(my_package_id,
+                         pkg.license,
+                         group,
+                         pkg.description,
+                         pkg.packageURI,
+                         pkg.packageSize)
         else:
             self.error(ERROR_PACKAGE_NOT_FOUND, "Package was not found")
 
@@ -309,6 +322,20 @@
         else:
             self.error(ERROR_PACKAGE_NOT_INSTALLED, "Package is not installed")
 
+
+    def repo_enable(self, repoid, enable):
+        '''
+        Implement the {backend}-repo-enable functionality
+        '''
+        try:
+            if enable == 'false':
+                pisi.api.set_repo_activity(repoid, False)
+            else:
+                pisi.api.set_repo_activity(repoid, True)
+        except Exception, e:
+            self.error(ERROR_INTERNAL_ERROR, _format_str(traceback.format_exc()))
+
+
     def repo_set_data(self, repo_id, parameter, value):
         """ Sets a parameter for the repository specified """
         self.allow_cancel(False)
diff -Nuar PackageKit-0.4.9-orig/backends/pisi/pk-backend-pisi.c PackageKit-0.4.9/backends/pisi/pk-backend-pisi.c
--- PackageKit-0.4.9-orig/backends/pisi/pk-backend-pisi.c	2009-08-08 14:40:44.000000000 +0300
+++ PackageKit-0.4.9/backends/pisi/pk-backend-pisi.c	2009-08-08 18:17:52.000000000 +0300
@@ -92,6 +92,15 @@
 }
 
 /**
+ * backend_get_mime_types:
+ */
+static gchar *
+backend_get_mime_types (PkBackend *backend)
+{
+	return g_strdup ("application/x-pisi");
+}
+
+/**
  * pk_backend_cancel:
  */
 static void
@@ -231,6 +240,18 @@
 	pk_backend_spawn_helper (spawn, "pisiBackend.py", "remove-packages", pk_backend_bool_to_text (allow_deps), package_ids_temp, NULL);
 	g_free (package_ids_temp);
 }
+/**
+ * pk_backend_repo_enable:
+ */
+static void
+backend_repo_enable (PkBackend *backend, const gchar *rid, gboolean enabled)
+{
+	if (enabled == TRUE) {
+		pk_backend_spawn_helper (spawn, "pisiBackend.py", "repo-enable", rid, "true", NULL);
+	} else {
+		pk_backend_spawn_helper (spawn, "pisiBackend.py", "repo-enable", rid, "false", NULL);
+	}
+}
 
 /**
  * pk_backend_search_details:
@@ -353,7 +374,7 @@
 	backend_destroy,			/* destroy */
 	backend_get_groups,			/* get_groups */
 	backend_get_filters,			/* get_filters */
-	NULL,					/* get_mime_types */
+	backend_get_mime_types,			/* get_mime_types */
 	backend_cancel,				/* cancel */
 	NULL,					/* download_packages */
 	NULL,					/* get_categories */
@@ -371,7 +392,7 @@
 	NULL,					/* install_signature */
 	backend_refresh_cache,			/* refresh_cache */
 	backend_remove_packages,		/* remove_packages */
-	NULL,					/* repo_enable */
+	backend_repo_enable,			/* repo_enable */
 	backend_repo_set_data,			/* repo_set_data */
 	backend_resolve,			/* resolve */
 	NULL,					/* rollback */

/*
  Copyright (c) 2005-2006, TUBITAK/UEKAE

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Please read the COPYING file.
*/

// #include <KSimpleConfig>
#include <Q3ListBox>
#include <QRadioButton>
#include <QButtonGroup>
#include <QStringList>
#include <QCheckBox>
#include <QTextStream>
#include <QFile>
#include <QByteArray>
#include <QVariant>
#include <stdlib.h>
#include <iostream>
#include <kconfiggroup.h>
#include <kconfig.h>

#include "tvconfig.h"

TvConfig::TvConfig( QWidget *parent)
    : TvConfigUI(parent)
{
    QStringList cardVendors, tunerManLists;

    cardsDB.getVendors(&cardVendors);
    cardManList->clear();
    cardModList->clear();
    cardManList->addItems(cardVendors);

    tunersDB.getVendors(&tunerManLists);
    tunerManList->clear();
    tunerModList->clear();
    tunerManList->addItems(tunerManLists);
}

TvConfig::~TvConfig()
{
}

void TvConfig::tunerManListChanged()
{
    // QString vendor = tunerManList->currentText();
    // QListWidgetItem *widgetItem = tunerManList->item(tunerManList->currentRow())->text();
    // QString vendor = widgetItem->text();
    QString vendor = tunerManList->item(tunerManList->currentRow())->text();
    QStringList models;

    tunersDB.getTuners(vendor, &models);
    tunerModList->clear();
    tunerModList->addItems(models);
}

void TvConfig::cardManListChanged()
{
    QString vendor = cardManList->item(cardManList->currentRow())->text();
    // QString vendor = cardManList->currentText();
    QStringList models;

    cardsDB.getCards(vendor, &models);
    cardModList->clear();
    cardModList->addItems(models);
    cardModList->sortItems();
}

void TvConfig::selectCard(int card_id)
{
    setCard(card_id);
}


void TvConfig::selectTuner(int tuner_id)
{
    setTuner(tuner_id);
}

int TvConfig::getCard()
{
    return cardsDB.getCard(cardManList->item(cardManList->currentRow())->text());
}

void TvConfig::setCard(int card_id)
{
    QString vendor_name, card_name;
    QList<QListWidgetItem *> items;
    QListWidgetItem *widItem;

    cardsDB.getCard(card_id, BTTV, vendor_name, card_name);

    items = cardManList->findItems(vendor_name, Qt::MatchStartsWith);
    widItem = items.takeFirst();
    if (widItem) {
	cardManList->setCurrentItem(widItem);
	cardManListChanged();

	items = cardModList->findItems(card_name, Qt::MatchStartsWith);
    widItem = items.takeFirst();
	if (widItem)
	    cardModList->setCurrentItem(widItem);
    }
}

int TvConfig::getTuner()
{
    return tunersDB.getTuner(tunerModList->item(tunerModList->currentRow())->text());
}


void TvConfig::setTuner(int tuner_id)
{
    QString vendor_name, tuner_name;
    QList<QListWidgetItem *> items;
    QListWidgetItem *widItem;

    tunersDB.getTuner(tuner_id, vendor_name, tuner_name);

    items = tunerManList->findItems(vendor_name, Qt::MatchExactly);
    widItem = items.takeFirst();
    if (widItem) {
	tunerManList->setCurrentItem(widItem);
	tunerManListChanged();

	items = tunerModList->findItems(tuner_name, Qt::MatchExactly);
    widItem = items.takeFirst();
	if (widItem)
	    tunerModList->setCurrentItem(widItem);
    }
}

void TvConfig::saveOptions()
{
    int card, tuner, pll, radio = 0;

    KConfigGroup group;

    KConfig *config = new KConfig("kcmtasmatvrc");
    QFile bttv("/etc/modprobe.d/bttv");

    card = getCard();
    tuner = getTuner();
    pll = pllGroup->id(pllGroup->checkedButton());

    if (radioCard->isChecked())
	radio = 1;

    if (bttv.open(QFile::WriteOnly | QFile::Truncate)) {
	QTextStream os(&bttv);

	// config->setFileWriteMode(0644);
	group = config->group("System");
	group.writeEntry("Card", card);
	group.writeEntry("Tuner", tuner);
	group.writeEntry("Pll", pll);
	group.writeEntry("Radio", radio);
	group.sync();

	os << "### This file is automatically generated by tasma." << endl;
	os << "#" << endl;
	os << "# Please do not edit this file directly. All changes" << endl;
	os << "# made in this file will be lost." << endl;
	os << "#" << endl;
	os << endl;
	os << "options bttv card=" << card;

	if (tuner != AUTO_TUNER)
	    os << " " << "tuner=" << tuner;
	if (pll)
	    os << " " << "pll=" << pll;
	if (radio)
	    os << " " << "radio=" << radio;

	os << endl;

	bttv.close();
	system("/sbin/modules-update");
    }

    delete config;
}

// TODO: read dmesg for error or success
void TvConfig::removeModule()
{
    //FIXME: be smart, don't cheat you lazy $%@#!*
    QByteArray cmd("/sbin/rmmod bt878 bttv");
    system(cmd);
}

// TODO: read dmesg for error or success
void TvConfig::loadModule()
{
    QString cmd;
    QByteArray arrByte;
    int card, tuner, pll, radio = 0;

    card  = getCard();
    tuner = getTuner();
    pll   = pllGroup->id(pllGroup->checkedButton());

    if (radioCard->isChecked())
	radio = 1;

    if (tuner != AUTO_TUNER)
	cmd.sprintf("/sbin/modprobe bttv card=%d tuner=%d pll=%d radio=%d", card, tuner, pll, radio);
    else
	cmd.sprintf("/sbin/modprobe bttv card=%d pll=%d radio=%d", card, pll, radio);
    QVariant *var = new QVariant(cmd);
    arrByte = var->toByteArray();
    system(arrByte);
}

#include "tvconfig.moc"

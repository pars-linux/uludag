#!/usr/bin/python
# -*- coding: utf-8 -*-

"""Main file for sahip. Controls the signals and includes the logic."""

# Qt4 Stuff
from PyQt4 import QtCore, QtGui

# Required modules within the project.
from sahip.sahiplib import User, ComboBoxHandler, ListHandler, getShadowed
from sahip.maingui import Ui_Sahip
from sahip.sahipgen import SahipGenerator
from sahip.userdialog import UserDialog

# The modules borrowed from yali.
from yali4.localedata import locales
from yali4.constants import consts
from yali4.sysutils import TimeZoneList, text_is_valid

from os import getenv

# We need these for i18n.
import gettext
__trans = gettext.translation('sahip', fallback=True)
_ = __trans.ugettext


class SahipWidget(QtGui.QWidget):
    """Uses sahipgui module and defines slots and operations on it."""
    def __init__(self): #, *args):
        """Sets ui from sahipgui; calls connectSlots, createHandlers and
         setDefaults."""
        QtGui.QWidget.__init__(self, None)
        self.ui = Ui_Sahip()
        self.ui.setupUi(self)
        
        # Attributes
        self.normalRootPassword = None
        self.rootShadowed = None
        self.localeData = None
        self.userDialog = None

        # Create handlers
        self.LanguageHandler = ComboBoxHandler(self.ui.languageBox, sorted=True)
        self.VariantHandler = ComboBoxHandler(self.ui.variantBox, sorted=True)
        self.TimeZoneHandler = ComboBoxHandler(self.ui.timeZone, sorted=True)
        self.UserHandler = ListHandler(self.ui.userList, sorted=True)
        self.AutoLoginHandler = ComboBoxHandler(self.ui.autologinUserBox, sorted=True)
        self.PartitionHandler = ComboBoxHandler(self.ui.partitioningTypeBox, sorted=False)
    	
        self.connectSlots()
        self.setDefaults()
           
    def connectSlots(self):
        """Connects the slots for the events."""
        # Language, root etc.
        QtCore.QObject.connect(self.ui.languageBox, QtCore.SIGNAL("currentIndexChanged(QString)"), self.slotLanguageChanged)
        QtCore.QObject.connect(self.ui.shadowButton, QtCore.SIGNAL("clicked()"), self.slotShadow)
        
        # User-related
        QtCore.QObject.connect(self.ui.userNew, QtCore.SIGNAL("clicked()"), self.slotUserNew)
        QtCore.QObject.connect(self.ui.userEdit, QtCore.SIGNAL("clicked()"), self.slotUserEdit) 
        QtCore.QObject.connect(self.ui.userDelete, QtCore.SIGNAL("clicked()"), self.slotUserDelete)
        
        
        QtCore.QObject.connect(self.ui.generateXMLButton, QtCore.SIGNAL("clicked()"), self.slotGenerateXML)
        QtCore.QObject.connect(self.ui.clearButton, QtCore.SIGNAL("clicked()"), self.slotClear)
        
    def slotLanguageChanged(self, newLanguage):
        """Retrieves information about the newLanguage and updates the variantBox accordingly.
        If the variant is a list, adds each variant to the variantBox
        If the variant is None, adds nothing to the variantBox.
        """
        if not newLanguage:
            return
        self.localeData = locales[self.LanguageHandler.getInformation(unicode(newLanguage))]
        variants = self.localeData['xkbvariant']
        # --------------------------------------------------------------------        
        # Update the xkbvariant combobox according to the language selected.
        # --------------------------------------------------------------------
        self.VariantHandler.clear()
        
        # If there are multiple variants,
        if isinstance(variants, list):
            # "xkbvariant" : [["f",_("Turkish F")],["",_("Turkish Q")]],
            for variant in variants:
                self.VariantHandler.addItem(variant[1], variant[0])
        # If the language doesn't have any variant
        elif variants == None:              
            pass
        # If something different, raise Exception.            
        else:
            raise Exception
    
    def slotShadow(self):
        """Enrypts/Restores the password in the line edit"""
        if str(self.ui.shadowButton.text()) == _("&Shadow"):
            self.normalRootPassword = str(self.ui.rootPassword.text())
            self.ui.rootPassword.setText(getShadowed(self.normalRootPassword))
            self.ui.shadowButton.setText(_("&Unshadow"))
        else:
            self.ui.rootPassword.setText(self.normalRootPassword)
            self.ui.shadowButton.setText(_("&Shadow"))

    def slotUserNew(self):
        """Opens the new user form"""
        self.userDialog = QtGui.QDialog(self)
        self.userDialog.ui = UserDialog(self) #Added this self to send parent signal.
        self.userDialog.ui.show()
            
    def slotUserEdit(self):
        """Opens the user form, specifying it the selected user."""
        userToEdit = self.UserHandler.getSelectedInformation()
        if not userToEdit:
            QtGui.QMessageBox.question(self, _('Error'), _('No user selected.'), QtGui.QMessageBox.Ok)
            return
        
        self.userDialog = QtGui.QDialog(self)
        self.userDialog.ui = UserDialog(caller = self,  #Added this self to send parent signal.
                                        user   = userToEdit)
        self.userDialog.ui.show()
    
    def slotUserDelete(self):
        """Deletes the selected user from the list."""
        username = self.UserHandler.removeCurrentItem()
        if  username == -1:                             # If no user is selected,
            QtGui.QMessageBox.question(self, _('Error'), _('No user selected.'), QtGui.QMessageBox.Ok)
        elif username:
            self.AutoLoginHandler.removeItem(displayText = username) # Remove the username from the autologinUserBox.
    
    def slotGenerateXML(self):
        """Generates XML File with the information gathered from the form."""
        # Check hostname validity.
        if not self.isHostNameValid():
            QtGui.QMessageBox.question(self, _('Error'), _('Invalid hostname. Hostname can only include ASCII characters.'), QtGui.QMessageBox.Ok)
            return 
        # Flag if root password is shadowed:
        if str(self.ui.shadowButton.text()) == _("&Unshadow"):
            self.rootShadowed = True
        else:
            self.rootShadowed = False
        
        # Check root password validity
        # Not sure why did so crowded... If you change normal pass after Unshadowing,
        # You can't find the recent password in self.normalRootPassword...
        if self.rootShadowed:
            tempUser = User(username=None, realName=None, normalPassword=None, shadowedPassword=str(self.ui.rootPassword.text()), groups = [])
        else:
            tempUser = User(username=None, realName=None, normalPassword=str(self.ui.rootPassword.text()), shadowedPassword=None, groups = [])

        if not tempUser.isPasswordValid():
            QtGui.QMessageBox.question(self, _('Error'), _('Invalid root password. Root password should be at least 4 characters.'), QtGui.QMessageBox.Ok)
            return
        
        # Flag the user selected as autologin.
        selectedAutoUser = self.AutoLoginHandler.getSelectedDisplayText()
        if selectedAutoUser:
            for user in self.UserHandler.getInformationList():
                if user.username == selectedAutoUser:
                    user.autologin = True
                else:
                    user.autologin = False
        

            
        # Define filename to save the XML file.
        filename = QtGui.QFileDialog.getSaveFileName(self, _("Save the XML file as"), "/home/%s/Desktop" % getenv("USER"),
                                                     '.xml',
                                                     '.xml')

        if not filename:
            return
        elif filename[-4:] != '.xml':
        	filename += ".xml"
        
        
        
        # Create a generator object.
        sg = SahipGenerator(filename = filename, \
                            language = self.LanguageHandler.getSelectedInformation(),\
                             variant = self.VariantHandler.getSelectedInformation(),\
                       root_password = str(self.ui.rootPassword.text()),\
                       root_shadowed = self.rootShadowed, \
                            timezone = str(self.ui.timeZone.currentText()),\
                            hostname = str(self.ui.hostname.text()),\
                               users = self.UserHandler.getInformationList(),\
                            reponame = str(self.ui.repoName.text()),\
                            repoaddr = str(self.ui.repoAddress.text()),\
                   partitioning_type = self.PartitionHandler.getSelectedInformation(),\
                                disk = str(self.ui.disk.text())
                        )
        # Generate XML file.
        result = sg.generate()
        
        # Give information about the result
        if result['status']:
            QtGui.QMessageBox.question(self, _('Successful'), _('The XML File has been saved to %s.') % result['filename'], QtGui.QMessageBox.Ok)
        else:
            QtGui.QMessageBox.question(self, _('Error'), _('Could not save the XML File to %s.') % result['filename'], QtGui.QMessageBox.Ok)
        
    def slotClear(self):
        """Sets the defaults for the widgets in the form."""
        self.setDefaults()
    
# ------------------SLOTS END---------------------------------------------
        
    def isHostNameValid(self):
        """Checks if hostname is valid."""
        hostname = self.ui.hostname.text().toAscii()
        if hostname:
            return text_is_valid(hostname)
        else:
            return False
           
        
    def setDefaults(self):
        """Sets defaults for all items in the form."""
        
       	if self.ui.shadowButton.text() != _("&Shadow"):
        	self.slotShadow()
        	self.ui.shadowButton.setChecked(False)
        	 
        itemsToBeCleared = [
                            self.UserHandler,
                            self.AutoLoginHandler,
                            self.LanguageHandler,
                            self.VariantHandler,
                            self.TimeZoneHandler,
                            self.PartitionHandler,
                            self.ui.hostname,
                            self.ui.rootPassword,
                            ]
        for item in itemsToBeCleared: 
            item.clear()
        
        self.AutoLoginHandler.addItem("", None)
        self.loadLanguages()
        self.loadTimeZones()
        self.loadPartitioningTypes()
        self.loadRepoSettings()
        
        
    def loadLanguages(self):
        """Loads languages from the locales module of yali into the Language Combobox."""
        for abbr in locales.keys():
            self.LanguageHandler.addItem(locales[abbr]['name'], abbr)
                    
        self.LanguageHandler.selectItem("tr")
        self.VariantHandler.selectItem("")
        
    def loadTimeZones(self):
        """Loads Time Zones from the sysutils module of yali into the Language Combobox.""" 
        for tz in TimeZoneList().getEntries():
            self.TimeZoneHandler.addItem(tz.timeZone, tz.code)
            
        self.TimeZoneHandler.selectItem("TR")
        
    def loadPartitioningTypes(self):
        """Loads the partitioning types into the partitioning type combobox"""     
        self.PartitionHandler.addItem(_('Automatic Partitioning'), 'auto')
        self.PartitionHandler.addItem(_('Smart Automatic Partitioning'), 'smartAuto')
        self.PartitionHandler.addItem(_('Manuel Partitioning'), 'manuel')
        self.PartitionHandler.selectItem('smartAuto')
        self.ui.disk.setText('disk0')
        
    def loadRepoSettings(self):        
        """Loads the default repo name and address."""
        self.ui.repoName.setText(consts.pardus_repo_name)
        self.ui.repoAddress.setText(consts.pardus_repo_uri)        

        

if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    Sahip = SahipWidget()
    Sahip.show()
    sys.exit(app.exec_())

#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble
\tolerance 10000
\usepackage{indentfirst}
\end_preamble
\language turkish
\inputencoding auto
\fontscheme pslatex
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

VÇTD
\newline 

\size small 
(VÇTD Çomar Tasarýmý Deðildir)
\layout Author

Serdar Köylü, A.
 Murat Eren, Gürer Özen
\layout Date

24 Kasým 2004
\layout Standard
\pagebreak_bottom 

\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Sorun
\layout Standard

Bir sisteme kurulan uygulamalarýn, birbirleriyle uyumlu çalýþabilmeleri
 için bazý ayarlarýnýn yapýlmasý gereklidir.
 Bunu otomatik olarak yapabilecek bir sistem olmadýðýnda, kullanýcý kendi
 yapmak istediði iþin dýþýnda bir takým teknik konularda bilgi kazanmak
 ve uygulamalarý tek tek ayarlamak için zaman kaybetmektedir.
 Bu konudaki nasýl (howto) belgeleri, az sayýda belirli senaryo için yazýldýklar
ýndan kullanýcýya yardýmcý olamamaktadýr.
\layout Subsection

Daðýtýmlarýn Yaklaþýmý
\layout Standard

Varolan Linux daðýtýmlarý, bu sorunu örneðin kurulu uygulamalar (menu),
 fontlar, açýlýþ iþlemleri (initscripts) gibi tek tek alt sistemler bazýnda
 çözmeye çalýþmaktadýr.
\layout Standard

Genelde, uygulama paketleri, dosya sistemi üzerinde sabit bir dizine, söz
 konusu alt sisteme neler saðladýklarýný kaydetmekte; bu alt sistemi kullanacak
 uygulamalar ise, buraya önceden belirlenmiþ biçimde kaydedilen dosyalarý
 tarayarak, saðlanan hizmetleri bulmaktadýr.
 Uygulamalarýn entegrasyonu için, ya uygulamalar buradaki standartlarý bilecek
 biçimde deðiþtirilmekte, ya da gerekli çevrimi yapacak üçüncü bir yönetici
 uygulama araya sokulmaktadýr.
 Kayýt ve çevrim iþlemleri için özel veri biçimleri, kabuk, Perl ya da Python
 betikleri, bazen de bunlarýn bir karýþýmý kullanýlmaktadýr.
\layout Standard

Bu yöntemde gördüðümüz noksanlýklar:
\layout Itemize

Alt sistemler, bir sistem modeli içinde toplu biçimde tasarlanmadýklarýndan,
 birbirleriyle iliþkileri eksik kalmakta ve uygulamalarý paketleyenlerin
 dikkatinden kaçabilmektedir.
 Birçok uygulama, baðýmsýz tek baþýna çalýþan sistemler olmayýp, bir iþletim
 sistemi içerisinde bir takým görevleri yerine getiren bileþenlerdir.
 Sistem modeli olmayýnca uygulamalarýn bu görevlerini birbirine ekleyerek
 tek tek uygulamalarýn toplamýndan daha güçlü bir sistem elde etmek mümkün
 olmamaktadýr.
\layout Itemize

Kapsayýcý bir sistem modeli olmamasý kullanýcý ve sistem profilleri oluþturmayý
 ve yönetmeyi zorlaþtýrmaktadýr.
\layout Itemize

Dosya sistemi üzerinden gidilmesi, bazý servislerin ve alt sistem yönetici
 uygulamalarýnýn uzak makinalarda çalýþabileceði esnek bir tasarýma olanak
 vermemektedir.
\layout Itemize

Kabuk ve Perl/Python betiklerinin paketleyicinin veya alt sistemin tercihine
 göre karýþýk olarak kullanýlmasý, paketlerin doðruluðunu otomatik olarak
 denetleyecek programlar yapmayý ve sorunlu paketlerin incelenip, entegrasyon
 hatalarýnýn giderilmesini güçleþtirmektedir.
\layout Itemize

Özellikle kabuk betikleri içerisinde deðiþikliklerin atomik yapýlmasý ve
 o an bir nedenden dolayý yapýlamayan iþlemlerin yapýlabilecekleri ana kadar
 bekletilmesi çok güç olduðundan sýk sýk alt sistemler hatalý ayarlanmakta
 ve uygulamalar arasýnda sorunlar çýkmaktadýr.
\layout Subsection

Ýþletim Sistemleri
\layout Standard

Windows, OS/2, MacOS X gibi ticari iþletim sistemlerinde, sistemin parçalarý
 ve kullanýcýnýn çalýþma ortamýný oluþturan uygulamalar genellikle tek bir
 merkezden çýktýklarý için, uyum sorunlarý iþletim sisteminin çaðrýlarý
 (API si) üzerinden çözülmektedir.
 Ayarlarý toplu halde tutan merkezi bir kütük; çokluortam, að protokolü,
 donaným yöneticisi gibi parçalar için parçalarýn yerleþebileceði modül
 yapýlarý bulunmaktadýr.
\layout Standard

Bu yöntemde þu noksanlýklarý görüyoruz:
\layout Itemize

Uygulamalarýn ayarlarýna merkezi eriþim sunulmasý, tek baþýna istenen faydayý
 getirmemektedir.
 Bir genel model olmadýðý için, bu bilgileri kullanmak isteyen kullanýcý
 yada diðer uygulamalarýn, bilgiyi sunan uygulama ve ayarlarý hakkýnda detaylý
 bilgiye sahip olmasý sorunu hala ortadadýr.
\layout Itemize

Uygulamalar ve yönetim sistemi arasýnda API düzeyinde bir iliþki, iki grubu
 iç içe geçirip direkt baðlantý saðlayacaðý için, parçalarýn baðýmsýzlýðýný
 azaltacaktýr.
 Bu da, ayrý ayrý parçalarýn geliþtiricilerinin, adam/ay modelinde baðýmsýz
 çalýþmak yerine, bir araya gelip karþýlýklý iletiþim ve senkronizasyon
 ile çalýþmasýna, dolayýsýyla geliþtirme iþlerinin ölçeklenebilirliðinin
 azalmasýna yol açmaktadýr.
\layout Itemize

Parçalarýn farklý ellerden çýktýklarý ve alternatiflerin bol olduðu özgür
 yazýlým modeline uymamaktadýr.
\layout Itemize

Daðýtýmýmýza girecek uygulamalarý yeni API leri kullanacak þekilde deðiþtirmek,
 uygulama kodunu çok iyi incelemeyi, yapýlan deðiþikliklerin yeni sorunlara
 yol açmadýðýný kapsamlý olarak analiz etmeyi gerektirmektedir.
 Bu da büyük zaman ve emek harcamasýna yol açacaktýr.
\layout Itemize

Bir alt sistemin yetersiz kaldýðý görülüp yeni bir alt sistem yapýsý geliþtirild
iðinde, API deðiþikliðine yol açmamak için API üzerindeki deðer ve çaðrýlara
 kapsamlarý dýþýnda anlamlar ve görevler yüklenmekte, ve API yi öðrenmek
 ve kullanmak isteyenlerin iþi çok zorlaþmaktadýr.
 Ya da API deðiþikliði yapýlmakta, ve varolan uygulamalarýn yeni API yi
 taþýnmasý, eski ve üçüncü parti uygulamalar için uyumluluk katmanlarý hazýrlanm
asý gibi fazladan sorunlar çýkmaktadýr.
\layout Itemize

Her dile API desteði verebilmek için ya CORBA gibi karmaþýklýðý arttýracak
 teknolojiler ya da bakým iþlerini yükseltecek çok sayýda 
\begin_inset Quotes eld
\end_inset 

wrapper
\begin_inset Quotes erd
\end_inset 

 hazýrlanmasý gereklidir.
\layout Subsection

Uzman Sistemler
\layout Standard

Linux'un masaüstü ve iþ dünyasýnda kullanýmýnýn artmasýyla, bir takým genel
 yapýlandýrma ve yönetim araçlarý da geliþtirilmiþtir.
 YaST, LinuxConf, WebMin gibi bu araçlar kullanýcýya üst seviye bir arabirim
 sunup, kullanýcýnýn burada yaptýðý seçimleri uygulamalarýn alt seviye ayarlarýn
a taþýmaktadýr.
 Ýki seviye arasýnda geçiþ yapabilmek için gereken bilgiler araçlarýn içinde
 bir dizi kural olarak kodlanmýþtýr.
\layout Standard

Bundan baþka, bilgisayar aðlarýnýn yaygýnlaþmasýyla birlikte, birden fazla
 bilgisayarýn merkezi yönetimini yapabilecek IBM Tivoli, HP OpenView, CIM,
 SNMP, OSI CMIP gibi ürün ve çerçeveler ortaya çýkmýþtýr.
 Ayrýntýlarda farklarý olmakla birlikte, genel mimarileri, yönetilecek bilgisaya
rda bulunacak ajanlar, yönetim bilgisayarýnda bir yönetici yazýlým, bunlar
 arasýnda bir iletiþim protokolü ve yönetilecek görev ve ayarlarý belirten
 bilgi modellerinden oluþmaktadýr.
 Yalnýzca yapýlandýrma ile sýnýrlý kalmayýp, hata bulma, performans ve güvenlik
 deðerlendirmeleri, kullaným hesaplama gibi iþleri de yapmaktadýrlar.
\layout Standard

Bu sistemler de, kapsayýcý genel bir model yerine, tüm olasý ayar ve görevleri
 sunmaya çalýþmakta, yönetici yazýlýmý kullanacak kiþinin yönetilecek her
 birimi ve bunlar arasýndaki iliþkileri çok iyi bildiðini varsaymaktadýr.
 Sorun kullanýcýdan alýnýp yöneticiye taþýndýðýnda, artan miktardan dolayý
 baþedilmez hale gelmektedir.
 Bu noktada yöneticiye yardýmcý olacak uzman sistemler sunulmaktadýr.
\layout Standard

Her iki grup yazýlým da, kolay kullanýlýr ve detaylarda boðulmamýþ bir yapýlandý
rma arabirimi sunabilmek için, alt ve üst düzey bilgiler arasýndaki iliþkileri
 tanýmlayan kural dizileri kullanmakta ve bu kurallar, iþin uzmanlarý tarafýndan
, bir elden yönetici yazýlýmýn içinde kodlanmaktadýr.
 Yönetici yazýlýmýn bir takým API ler ile bu bilgileri üst seviye, bazen
 üçüncü parti, uygulamalardan almasý, bilginin parçalarda deðil, merkezde
 bulunduðu gerçeðini deðiþtirmemektedir.
\layout Standard

Bu uzman sistem yaklaþýmýnda þu noksanlýklarý görmekteyiz:
\layout Itemize

Parçalarýn dinamik olarak deðiþmesi, eski kurallarda deðiþikler ve yeni
 kurallar gerektirmekte, kural dizilerini oluþturmayý zorlaþtýrmaktadýr.
\layout Itemize

Çok sayýda ve çeþitli parçalardan oluþan bir sistem için çok sayýda kural
 gerekmekte; kurallarýn iþletilmesi, güncellenmesi, deðiþtirilmesi gittikçe
 büyüyen bir sorun olmaktadýr.
\layout Itemize

Kurallar birden fazla parçanýn detaylý bilgilerini bir arada içerdiði için,
 kural yazmak çok zorlaþmakta, kurallarýn hata içermesi, öngörülmeyen durumlarý
 ihmal etmesi olasýlýklarý artmaktadýr.
\layout Section

Gereksinimler
\layout Standard

Uygulamalar arasý uyumlu çalýþmayý saðlamak için her uygulama,
\layout Enumerate

Diðer uygulamalarýn bilgilerine eriþebilmeli,
\layout Enumerate

Kendi bilgilerini diðer uygulamalara sunabilmeli,
\layout Enumerate

Önceden belirlenmiþ görevler içinden neleri yapabildiðini sisteme bildirebilmeli
,
\layout Enumerate

Kendi görevleri dýþýndaki iþlere karýþmamalý, bunlarý ilgili uygulamalardan
 istemeli,
\layout Enumerate

Bilgileri deðiþtiðinde, ilgilenen uygulamalarýn haberdar edilmesini saðlamalýdýr.
\layout Standard

Diðer çözümlerin noksanlýklarýna takýlmadan bunlarý saðlamak için,
\layout Enumerate

Uygulamalarýn çalýþmalarýný yönetecek bilgiler ve ayarlanmasý gerektiði
 düþünülen seçenekler genelde uygulama yazarlarý tarafýndan önceden düþünülerek
 bir takým ayar dosyalarýndan okunup kullanýlacak duruma getirilmiþtir.
 En az emekle entegrasyonu saðlamak ve kapalý kodlu üçüncü parti yazýlýmlarýn
 da sisteme konabilmesini olanaklý kýlmak için, uygulamalarý olduklarý gibi
 kabul edip, bu ayar dosyalarýný deðiþtirmek yoluyla entegre etmek gereklidir.
\layout Enumerate

Ayar dosyasýndan deðil de, komut satýrýndan veya benzeri deðiþik yollarla
 deðiþtirilen seçenekler ve türlü ayar dosyasý biçimleri (ini, XML, vs)
 bulunmaktadýr.
 Ayrýca uygulamalar arasý uyum düzeyinde bir ayar, alt düzeylerde birden
 çok ayara karþýlýk gelebilir.
 Bu tür implementasyon farklýlýklarýnýn enkapsüle edilebildiði nesnel bir
 yaklaþým gerekmektedir.
\layout Enumerate

Bir uygulamanýn sistemde yapabileceði görevlerin ve alt düzey ayar iþlemlerinin
 nasýl yapýlacaðýnýn bilgisi uygulamanýn kendisi ile birlikte gelmeli ve
 uygulamayý en iyi bilen kiþi olan paketleyici tarafýndan hazýrlanmalýdýr.
 Bu, nesnel yaklaþýmla enkapsüle edilmiþ ayar iþlemlerinin, her türlü uygulamaný
n alt düzey ihtiyaçlarýna çevrilebilmesini saðlayacaktýr.
\layout Enumerate

Nesnel yaklaþýmda, uygulamalarýn bilgilerini ve görevlerini sunacaklarý
 nesneleri, ve birbirleriyle iliþkilerini gösteren bir model gerekmektedir.
 Bu nesne modelinin hiyerarþik olmasý, daha kolay kavramayý ve öðrenmeyi
 saðlayacaktýr.
\layout Enumerate

Nesne modelinde, diðer bilgisayarlardan gelen nesnelerin, birer uzak nesne
 olarak yer alabilmesi ve kullanýcý tarafýndan aynen yerel nesneler gibi
 yönetilebilmesi, bir að yönetim sistemi oluþturmayý çok basit bir iþ haline
 getirecektir.
 Hiyerarþik model burda eriþim yetki denetimini belli alt sistemler bazýnda
 ayarlamayý kolaylaþtýracaktýr.
\layout Enumerate

Ayný görevi yapabilecek birden fazla uygulama olabilir.
 Duruma göre görevlerin hepsine birden yaptýrýlmasý, veya içlerinden birinin
 seçilmesi gerekebilir.
 Seçim için uygulamalarýn yeteneklerinden baþka, o anda hangilerinin çalýþtýðý,
 hangilerinin çalýþtýrýlabilir olduðu gibi kriterlere de bakýlmasý gerekecektir.
 Uygulama görevi aldýðýnda ise, çalýþmaya baþlayabilmesi için kendi içinde
 birden fazla iþlem yapmasý ve duruma göre nasýl çalýþacaðýna karar vermesi
 gerekebilir.
 Bütün bu dinamik bilgileri tanýmlayabilmek için, iterasyon, karar verme,
 karþýlaþtýrma özellikleri olan bir dil gerekecektir.
\layout Enumerate

Bu dilin seçimi özgür býrakýldýðýnda, takip edilmesi zor, çok sayýda baðýmlýlýk
 ortaya çýkmakta; diller arasý uyum ve bilgilerin hata giderme iþlemleri
 ise çok güçleþmekte olduðundan, tek bir dil üzerinde karar verilmelidir.
\layout Enumerate

Bu dilin önceki þartlarý saðlamak için, nesne kavramýna sahip olmasý, kontrol
 edilemeyecek baðýmlýlýk problemleri çýkarabilecek geniþleme mekanizmalarý
 taþýmamasý gereklidir.
 Transaction ve asenkron çalýþma yapýlabilmesi için tüm durumunu (state)
 içinde taþýyabilen bir script dili olmasý mecburidir.
\layout Enumerate

Basit ve öðrenmesi kolay olmasý, araçlarla iþlenebilmesi, IDE ve RAD araçlarý
 yardýmýyla üretilebilir olmasý, paketleme ve hata giderme sürecini çok
 kýsaltacaktýr.
 Uzak iþlemler, transaction, profil yönetimi ve asenkron çalýþma için sentaks
 kolaylýklarý içermesi de olumlu puanlardýr.
\layout Enumerate

Transaction, uzak nesneler, profil yönetimi, asenkron çalýþma, eriþim yetkileri
 gibi özellikleri uygulayabilmek için bu dildeki betikleri yönetip iþletecek
 bir uygulamaya gerek vardýr.
\layout Standard

Toparlarsak, gereksinimlerimizi karþýlayabilecek ve diðer benzer sistemlerdeki
 sorunlara düþmeyecek bir yapýlandýrma yönetim çerçevesi için ihtiyacýmýz
 olan parçalar, bir nesne modeli (2-5), bir nesne tanýmlama dili (6-9),
 uygulamalar için bu dilde yazýlmýþ betikler (1,3) ve bu betikleri iþletecek
 bir uygulamadýr (10).
\layout Section

COMAR
\layout Standard

Ulusal Daðýtým için geliþtirdiðimiz yapýlandýrma çerçevesinin adý olarak
 COMAR (COnfiguration MAnageR) seçtik.
 Bu çerçeve içinde, yukardaki gereksinimlerden çýkardýðýmýz bileþenler ve
 ayrýntýlarý þöyle olacak:
\layout Subsection

Nesne Modeli
\layout Standard

Bir iþletim sisteminde, uygulamalar arasýnda eþgüdümü saðlayabilmeye yönelik
 olarak, hangi görev ve bilgilerin bulunduðunu tanýmlar.
 Sistem açýlýþý, donaným tanýma, að yapýlandýrmasýndan grafik çalýþma ortamý,
 veri kaynaklarý, kullanýcý verilerine kadar, bütün bir iþletim sistemi
 haritasýndaki yapýlandýrma ve yönetim sorunlarýný kapsar.
\layout Subsection

CSL
\layout Standard

CSL (COMAR Scripting Language) nesnelerin yazýlacaðý betik dilidir.
\layout Subsection

Betikler
\layout Standard

Nesne modelindeki iþlemlerin uygulamalara aktarýlmasýný saðlayan, CSL ile
 yazýlmýþ nesnelerdir.
 Her uygulamanýn betikleri, uygulamayý daðýtým için paketleyen kiþi tarafýndan
 hazýrlanacak, ve uygulama kurulurken, nesne modeline yerleþecektir.
\layout Subsection

comard
\layout Standard

Nesne modelini ve üzerindeki betikleri iþletecek, profil, transaction, eriþim
 yetkilerini saðlayacak, uzak nesneler için gereken að baðlantýlarýný kuracak
 uygulamadýr.
 Uygulamalardan ve uzak nesnelerden gelen çaðrýlarý alýp verecek bir iletiþim
 birimi; CSL betiklerini 
\begin_inset Quotes eld
\end_inset 

parse
\begin_inset Quotes erd
\end_inset 

 edecek bir yorumlayýcý; çaðrý ve yorumlanmýþ betikleri iþletecek bir mekanizma;
 gerek betiklerin, gerekse comard'nin, ayar dosyalarýna eriþim, sistem yönetimi,
 program çalýþtýrma, veri depolama gibi iþlerini yapacak bir API den oluþmaktadý
r.
\layout Subsection

KGA
\layout Standard

KGA (Kullanýcý Grafik Arayüzleri), kullanýcýnýn COMAR ve nesne modeli üzerinde
 kavramsal olarak bir bütün oluþturan kýsýmlarý tek ve basit bir grafik
 arabirim üzerinde ayarlayabilmesini saðlayan uygulamalardýr.
\the_end

COMAR CORE Name Space Reference..

CORE NameSpace, asıl görev NS'lerinin yönetilmesi, temel COMARd fonksiyonelitesine CSL ve UI space'tan erişilebilmesini sağlar. Bu namespace, çeşitli ana kollara bölünmüştür. Bu NS, her zaman COMAR framework üzerinde tariflidir.

İlk ana kolleksiyon, "eventSys" COMARd event alt sistemini ifade eder. Bu sistem gerek OOP veya Yapısal olarak kullanılabilmeye yönelik olarak COMARd event'leri için gereken fonksiyoneliteyi sağlar. Diğer yandan standart kullanıma yönelik bazı eventler için de gerekli hazır event sürücülerini de içerir.

"om" ana kolleksiyonu ise, NS'lerin düğümlerini, bu düğümlere ait script ve ACL gibi özellikleri yönetmeyi sağlayan nesne ve çağrıları sağlar.

eventSys, nesne olarak yada yapısal yöntemlerle erişilebilir. Nesneler, bilhassa script ile kullanımda avantajlı iken, yapısal çağrılar özellikle RPC erişimi için kullanışlıdır. Yapısal erişim yöntemleri:

eventSys.create()
	Bu çağrı, yeni bir eventid oluşturarak geriye döndürür.

eventSys.addTask(eventid = "eventid", object=ÇağrılacakNesne, method=ÇağrılacakMethod [, wait='N'])
eventSys.addTask(eventid = "eventid", omnode="NS:node.method" [, wait='N'])
eventSys.addTask(eventid = "eventid" [, wait='N'])

	addTask, oluşturulan eventid'ye bir nesneyi veya OM üzerindeki bir methodu bağlamayı sağlar. Tüm çağrı formlarında,
		eventid	: eventSys.create() ile alınan eventid'sidir.
		wait	: (Opsiyonel). Eğer bu değer, Doğru ise, COMARd event oluştuğu zaman, bağlanan nesneyi çağırmadan önce, eğer çalışıyorsa sonlanması için bekler. Aksi durumda, kontrol yapılmaksızın çağrı derhal yapılır.

	İlk çağrı formatında:
		object	: Olayın oluşması durumunda kullanılacak nesneyi ifade eder.
		method	: Olayın olşuması durumunda nesnenin hangi methodunun çağrılacağını ifade eder. Default değeri "eventHook" tur. Bu metod çağrılırken herhangi bir parametre kullanılmaz.

	İkinci çağrı formatında ise:
		omnode	: NS:node.method formatında çağrılacak olan görevi ifade eder. Burada tarif edilen methoda herhangi bir parametre geçirilmez. Ayrıca, bu çağrı mutlak olarak sadece ilgili nesne'ye değil, belirtilen dala bağlı olan tüm nesnelere yapılır.

	Üçüncü formatta ise, herhangi bir parametre kullanılmaz. Bu durumda, CORE, çağıran nesneyi ve metodu kullanarak görev kaydını yapar. Eğer çağrı uzak bir yerden yapılmışsa, bu durumda bir NOTIFY çağrısı uzak sisteme gönderilir.

	Bu çağrı başarılı olması durumunda, eventSys.delTask() çağrısı ile kullanılmak üzere bir "taskKey" değeri döndürür. Bu değer, 255 karakterden kısa, 8Bit-ASCII uyumlu bir COMARString'dir.

eventSys.delTask(taskKey = "eventkey")
	Bu çağrı, daha önceden eventSys.addTask(...) ile elde edilen taskKey'i kullanarak, bir event'a eklenmiş olan görevi iptal eder. Buna mukabil, eğer event'a eklenmiş olan bir nesne kaldırılırsa, bu işlem otomatikman yapılır.

eventSys.fireUp(eventid = "eventid")
	eventid ile belirtilen event'e eklenmiş olan görevlerin başlatılmasını sağlar.

eventSys.new()
	Bir event nesnesi 'eventObj' oluşturup geri döndürür. Bu nesne şu yordamlara sahiptir:

eventSys.get(eventid)
	Belirtilen eventid için 'eventObj' oluşturup geri döndürür. Eğer bu eventid daha önceden kullanılmamışsa, geriye herhangi bir değer döndürmez.

	'eventObj' nesnesi şu yordamlara sahiptir:

	Property eventObj.eventid (read-only)	: COMARString.
	Property eventObj.keys (read-only)		: COMARArray. Bu event'a dahil olan görevlere ait keyleri ihtiva eder. Sadece çağıran nesne tarafından eklenen görevler bu listede bulunur.
	Method eventObj.del(taskKey = key)
	Method eventObj.addNode(omnode="NS:node.method" [, wait='N'])
	Method eventObj.addObject(object=objValue, method=methodName[, wait='N'])
	Method eventObj.addCurrent([wait='N'])
	Method eventObj.fireUp()

Standart Event Girdileri şunlardır:
	eventSys.stdTimerMinutely()
		Her dakika başında tetiklenen bir event için eventid değerini döndürür.
	eventSys.stdTimer30Minutely()
		Her saat xx:00 ve xx:30 dakikalarında tetiklenen bir event için eventid değerini döndürür.
	eventSys.stdTimerHourly()
		Her saat başında tetiklenen bir eventid döndürür.
	eventSys.stdTimerWorkStart()
		Mesai saatinin başlangıcında tetiklenen bir eventid döndürür.
	eventSys.stdTimerWorkFinish()
		Mesai saatinin bbitiminde tetiklenen bir eventid döndürür.
	eventSys.stdTimerDaily()
		Her gün saat 00:00'da tetiklenen bir eventid döndürür.
	eventSys.stdTimerMorning()
		Her sabah "MorningTime" da tetiklenen bir eventid döndürür. "Morning Time", COMARd içinde ayarlanabilen bir değerdir.
	eventSys.stdTimerAt(time="YYYY-MM-DD HH:MM")
		Belirtilen saat ve günde tetiklenen bir eventid döndürür. Her gün için, 0000-00-00 tarihi kullanılabilir.

	eventSys.stdBootUp()
		Sistem bootup esnasında tetiklenen bir event oluşturur. Bu sadece %100 COMAR Compatible sistemler için mevcuttur.
	eventSys.stdCOMARdUp()
		COMARd başlar başlamaz tetiklenen bir eventid oluşturur.
	eventSys.stdBeforeShutdown()
		Sistem kapatılmaya başlandığında tetiklenen bir event oluşturur. Bu sadece %100 COMAR Compatible sistemler için mevcuttur.
	eventSys.stdShutdown()
		Sistem kapatılmaya başlanıp, stdBeforeShutdown() eventindeki görevler sona erince tetiklenen bir eventid oluşturur.

	eventSys.stdProfileChange(profile="ProfileName")
		Sistemde tarif edilmiş bulunan bir profil değiştiğinde tetiklenen bir eventid oluşturur.
	eventSys.std.registerRemote(realm = "remote", eventid = "remote_eventid")
		Uzak makinanın NOTIFY çağrısını, yerel bir eventid'ye döndürür.

COMAR Eventlerinin kullanılması.
	COMARd, başta timer olmak üzere, bir takım predefined event'ler sunar. Bunun yanında çeşitli COMAR OM nesneleri event üretme kabiliyetine sahip olabilir. Her iki durumda da izlenecek yol uzak COMAR ve Local bağlantılar için ayrı ayrı ele alınmalıdır:
	Uzak COMAR'a kaydolmak için:
	1. Yeni bir eventid (new_id) alın. Bunun için uygun CORE:eventSys.* çağrısını kullanın.
	2. Bu eventid eğer COMAR:eventSys.std.* çağrısı ile alınmışsa, bu eventid'yi kullanarak
		taksKey = CORE:eventSys.addTask(eventid = new_id)
		OMCALL çağrısını kullanarak kendinizi uzak makinenin event sistemine ekleyin.
	3. Eğer eventid std event değilse, OM üzerindeki uygun event kurucuya kendinizi ekleyin.
		COMAR.network.connPoint.PHY.setUpEvent(eventid = "")
	4. Yerel sisteminizde
		rem_event = COMAR:eventSys.std.registerRemote(realm = "remote", eventid = "remote_eventid")
		çağrısı ile uzak COMAR'ın NOTIFY mesajını yerel COMAR için bir eventid'ye (rem_event) çevirin.
	5. Elde ettiğiniz yerel eventid'yi kullanarak event sistemine kaydolun.
		CORE:eventSys.addTask(eventid = rem_event)

OM, Object Model Management çağrıları.

om.addNode(parent="node", name="nodeName")
	Belirtilen belirtilen parent noduna ("NS:node") bağlı yeni bir node oluşturur. Bu işlem gerçekleşirse, yeni node'un "NS:Node" formatındaki adını geri döndürür. Aksi durumda, hiç bir şey döndürmez. Node ekleme işlemi, tipik ACL vs. checking mekanizması dışında, sadece bu özelliği kabul eden namespace'lere uygulanabilir.

om.addNodeScript(node="NS:node", AppID="", fileName="", code="code", language="CSL")
	Belirtilen düğüme, kodu yeni bir nesne olarak ekler. fileName, dosya adı olarak kullanıma uygun, path kısmı bulunmayan, kodun tanıtıcı değeri olarak kullanılan bir isimdir. AppID, sistem tarafından oluşturulan uygulama tanımlayıcısıdır. Bir uygulama içinden aynı fileName'a sahip iki (or more) script herhangi bir NS'ye eklenemez. Bu giriş için, bilhassa UI üzerinden yapılan çağrılarda AppID kullanılmaz. Bunun yerine yapılan çağrının realm değeri kullanılır. Paket yöneticileri, yeni bir script eklemek üzere, bu çağrıyı doğrudan kullanmamalıdırlar. Bunun yerine COMAR-OM üzerinde paket yönetimi için ayrılan girdilerden bu çağrıyı yapmalıdırlar.

om.delNodeScript(node="NS:node", AppID="", fileName="")
	Belirtilen düğümdeki nesneyi kaldırır.
om.addNodePreProc(node="NS:node", code="", language="CSL")
	Belirtilen düğüme yeni bir preprocessor kodu ekler.
om.addNodePreProc(node="NS:node", object=obj, method="methodName")
	Belirtilen düğüme yeni bir preprocessor nesnesi ekler.
om.addNodePostProc(node="NS:node", code="", language="CSL")
	Belirtilen düğüme yeni bir preprocessor kodu ekler.
om.addNodePostProc(node="NS:node", object=obj, method="methodName")
	Belirtilen düğüme yeni bir preprocessor nesnesi ekler.

addNodePreProc/addNodePostProc çağrıları, başarılı oldukları sürece scriptId string döndürürler.

om.delNodePreProc(node="NS:node", scriptid="scriptId")
om.delNodePostProc(node="NS:node", scriptid="scriptId")
	Belirtilen scriptId'yi düğümün pre/post zincirinden kaldırır.
om.getACLChain(node="NS:node")
	Belirtilen düğüme ait ACL'lerin bir listesini COMARArray olarak döndürür. Array'ın her bir elemanı priority sıralamasını index olarak kullanan aşağıdaki array'den oluşur:
	quick	= "Y"/"N"
	invert	= "Y"/"N"
	mode	= "allow"/"deny"
	look	= ACL türü.
	value	= Karşılaştırılacak değer
om.Policy[node="NS:node"] [="allow"|"deny"]
	Düğüm için ACL policy'yi belirler.
om.insertACL(node="NS:node", position=0, quick="N", invert="N", mode="allow|deny", look="ACL", value="deger")
	Düğüme yeni bir ACL ekler.
		position	: Tanımlanmamışsa, yeni ACL zincirin en sonuna eklenir. Diğer değerler için, yeni ACL belirtilen pozisyona eklenir ve bu poizsyondaki ACL ve ötesindekiler bir ileriye kaydırılır.
om.delACL(node="NS:node", position=pos)
	Belirtilen pozisyondaki ACL'i siler.

	ACL işlemlerinde: "QUICK ALLOW USER=ali" satırı:
		quick="Y", invert="N", mode="allow", look="USER", value="ali"
	şeklinde ifade edilir.
	Burada, eğer "QUICK" tanımlı ise 'quick' parametresi "y" yapılır.
	Eğer "ALLOW|DENY NOT ..." şeklinde kontrolün mantıksal tersi kullanılacaksa, 'invert' parametresi "Y" yapılır.
	Bakılacak olan özellik, 'look' parametresine yazılır.
	Bu özelliğin karşılaştırılacağı değer ise "value" parametresine yazılır.

	getACLChain ile alınan array ise:

	array[0] = İlk öncelikli ACL
	array[n] = "n" öncelikli ACL
	Her array elemanı yeni bir array şeklindedir, key'ler ise yukarıdaki parametrelere uygun olarak:
	array[0]["quick"] = "Y"
	array[0]["mode"] = "USER"
	şeklinde sıralanır.

om.setNodeProfile(node="NS:node", profile="profile_name", default="")
	OM düğümünün kalıcı verilerinin hangi profilde tutulacağını belirler. Profile değişiminde, eski veriler yeni profilin bahsedilen değerine taşınır.

om.addNewInstance(index="")
	Sadece OM düğümleri tarafından çağrılabilir. Bu çağrıyı yapan OM düğümünün belirtilen indexle yeni bir instance'ı oluşturulur. Böylece, nesne çağrılırken bu index kullanılarak seçim yapılabilir.
	from COMAR:Network.connPoint.PHY:
		CORE:om.addNewInstance(index = "ethernet0");
	from any other:
		phy = COMAR:Network.connPoint.PHY["ethernet0"];
		phy.TXSpeed = 100000;
	veya:
		phys = COMAR:Network.connPoint.PHY; 
		# phys is:
		#   phys[0] = "ethernet0"
		#   phys[1] = "ethernet1"
		#   phys[2] = "serial0"
		#   phys[3] = "serial1"
		
om.delInstance(index="")
	Sadece OM düğümleri tarafından çağrılabilir. om.addNewInstance ile hazırlanmış olan instance değerini kaldırmayı sağlar..
	
CORE Profile Management:
	COMAR Profile yönetimi CORE tarafından sağlanır. COMAR ortamı bazı profilleri standart olarak sunar. Bunun yanında OM düğümlerindeki scriptler kendileri yeni profiller tanımlayabilirler. COMAR-OM'daki her nesnenin persistent/instance değerleri belli bir profil içinde tutulur. Bu sayede uygulamaların sistemin yeni durumuna göre ek bir işlem gerektirmeden yapılandırılmaları imkanı sağlanabilir.

	COMAR CORE aşağıdaki profilleri gömülü olarak sağlar. Bu profillerin değişimleri ise OM üzerinden yürütülebilir. Bir profilin ne zaman değişeceği CORE tarafından belirlenmez. Fakat, profil değişimleri CORE üzerinden yapılmalıdır.

profileMgr.profile["name"] [="new_value"]
profile.create(name="new_profile")

profile.createBindedProfile(name="new_profile", bindProperty="NS:node.property")
profile.createBindedProfile(name="new_profile", bindMethod="NS:node.method")
	Yeni bir profile oluşturur. Bu profile ise, belirtilen property/method'un çağrıldıktan sonra geri döndürdüğü değerin hash değeri ile kullanılır.

	...............
	...............

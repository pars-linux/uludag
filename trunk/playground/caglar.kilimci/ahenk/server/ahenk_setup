#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    Ahenk server setup tool.
"""

import getpass
import optparse
import os
import subprocess
import sys
import time


TEMP_SSL = """[ req ]
default_bits = 1024
encrypt_key = yes
distinguished_name = req_dn
x509_extensions = cert_type
prompt = no

[ req_dn ]
C=TR
ST=Marmara
L=Kocaeli
O=Pardus
OU=Automatically-generated ejabberd SSL key
CN=localhost
emailAddress=root@localhost

[ cert_type ]
nsCertType = server
"""

TEMP_LDAP = """include       /etc/openldap/schema/core.schema
include       /etc/openldap/schema/cosine.schema
include       /etc/openldap/schema/nis.schema
%(schemas)s

pidfile       /var/run/openldap/slapd.pid
argsfile      /var/run/openldap/slapd.args

modulepath    /usr/libexec/openldap
moduleload    back_hdb.la

database      bdb
suffix        "%(domain)s"
rootdn        "cn=%(root_account)s, %(domain)s"
rootpw        %(password)s

TLSCipherSuite HIGH:MEDIUM:-SSLv2
TLSCACertificateFile /etc/openldap/ssl.pem
TLSCertificateFile /etc/openldap/ssl.pem
TLSCertificateKeyFile /etc/openldap/ssl.pem

directory     /var/lib/openldap-data
index         objectClass eq

access to attrs=userPassword
       by self write
       by anonymous auth
       by dn.exact="cn=%(root_account)s, %(domain)s" write
       by * none

access to *
       by self write
       by dn.exact="cn=%(root_account)s, %(domain)s" write
       by users read
       by * none
"""

TEMP_LDIF = """dn: %(domain)s
objectClass: dcObject
objectClass: organization
o: %(title)s
dc: %(dc)s

dn: cn=%(root_account)s, %(domain)s
objectClass: organizationalRole
objectClass: simpleSecurityObject
cn: %(root_account)s
userPassword:%(root_password)s
"""

TEMP_JABBER = """{loglevel, 1}.
{hosts, ["localhost", "%(domain)s"]}.
{listen,
 [
  {5222, ejabberd_c2s, [
            {certfile, "/etc/ejabberd/ssl.pem"}, starttls,
            {access, c2s},
            {shaper, c2s_shaper},
            {max_stanza_size, 65536}
        ]},
  {5223, ejabberd_c2s, [
            {access, c2s},
            {shaper, c2s_shaper},
            {certfile, "/etc/ejabberd/ssl.pem"}, tls,
            {max_stanza_size, 65536}
        ]},
  {5269, ejabberd_s2s_in, [
            {shaper, s2s_shaper},
            {max_stanza_size, 131072}
        ]},
  {5280, ejabberd_http, [
            http_poll,
            web_admin
        ]}
 ]}.
{auth_method, ldap}.
{ldap_servers, ["localhost"]}.
%%{ldap_encrypt, tls}.
%%{ldap_tls_verify, soft}.
%%{ldap_port, 636}.
{ldap_uids, [{"cn", "%%u"}]}.
{ldap_base, "%(ldap_domain)s"}.
{ldap_rootdn, "cn=%(root_account)s, %(ldap_domain)s"}.
{ldap_password, "%(password)s"}.
{ldap_filter, "(|(objectClass=pardusComputer)(&(objectClass=organizationalRole)(cn=%(root_account)s)))"}.
{shaper, normal, {maxrate, 100000}}.
{shaper, fast, {maxrate, 500000}}.
{acl, local, {user_regexp, ""}}.
{access, max_user_sessions, [{50, all}]}.
{access, local, [{allow, local}]}.
{access, c2s, [{deny, blocked}, {allow, all}]}.
{access, c2s_shaper, [{none, admin}, {normal, all}]}.
{access, s2s_shaper, [{fast, all}]}.
{access, announce, [{allow, admin}]}.
{access, configure, [{allow, admin}]}.
{access, muc_admin, [{allow, admin}]}.
{access, muc, [{allow, all}]}.
{access, pubsub_createnode, [{allow, all}]}.
{access, register, [{allow, all}]}.
{registration_timeout, infinity}.
{language, "en"}.
{modules,
 [
  {mod_adhoc,    []},
  {mod_announce, [{access, announce}]},
  {mod_caps,     []}, 
  {mod_configure,[]},
  {mod_disco,    []},
  {mod_irc,      []},
  {mod_last,     []},
  {mod_muc,      [
        {access, muc},
        {access_create, muc},
        {access_persistent, muc},
        {access_admin, muc_admin}
    ]},
  {mod_offline,  []},
  {mod_privacy,  []},
  {mod_private,  []},
  {mod_pubsub,   [
        {access_createnode, pubsub_createnode},
        {plugins, ["default", "pep"]}
    ]},
  {mod_register, [
        {welcome_message, {"Welcome!",  "Welcome to Ahenk network."}},
        {access, register}
    ]},
  {mod_roster,   []},
  {mod_shared_roster,[]},
  {mod_stats,    []},
  {mod_time,     []},
  {mod_vcard,    []},
  {mod_version,  []}
 ]}.
"""

def get_text(label, hidden=False):
    """
        Gets user input.

        Arguments:
            label: Prompt message
            hidden: True if hidden information, like passwords
        Returns: Text, or None if cancelled.
    """
    try:
        if hidden:
            return getpass.getpass("%s > " % label)
        else:
            return raw_input("%s > " % label)
    except KeyboardInterrupt:
        return None


def crypt_pass(password):
    """
        Encrypts password.

        Arguments:
            password: Plain text password
        Returnds: Encrypted password.
    """
    cmd = ["/usr/sbin/slappasswd", "-n", "-s", password]
    proc = subprocess.Popen(cmd, shell=False,
                            stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT, close_fds=True)
    return proc.stdout.read()


def make_ldap_conf(domain, root_account, root_password):
    """
        Generates OpenLDAP configuration file.

        Arguments:
            domain: Unique domain name
            root_account: Admin user name
            root_password: Admin password
        Returns: LDAP configuration
    """
    ldap_domain = "dc=" + domain.replace(".", ", dc=")

    root_password = crypt_pass(root_password)

    schemas = []
    for schema in os.listdir("/usr/share/ahenk-setup/schema/"):
        if schema.endswith(".schema"):
            schemas.append("include       /etc/openldap/schema/%s" % schema)

    return TEMP_LDAP % {"domain": ldap_domain,
                        "root_account": root_account,
                        "password": root_password,
                        "schemas": "\n".join(schemas)}


def make_jabber_conf(domain, root_account, root_password):
    """
        Generates Ejabberd configuration file.

        Arguments:
            domain: Unique domain name
            root_account: Admin user name
            root_password: Admin password
        Returns: Jabber configuration
    """
    ldap_domain = "dc=" + domain.replace(".", ", dc=")

    return TEMP_JABBER % {"domain": domain,
                          "ldap_domain": ldap_domain,
                          "root_account": root_account,
                          "password": root_password}


def make_ldif(domain, root_account, root_password):
    """
        Generates initial LDIF for LDAP domain.

        Arguments:
            domain: Unique domain name
            root_account: Admin user name
            root_password: Admin password
        Returns: LDIF text
    """
    ldap_domain = "dc=" + domain.replace(".", ", dc=")
    component = ldap_domain.split(",")[0].split("dc=")[1]
    root_password = crypt_pass(root_password)
    return TEMP_LDIF % {"domain": ldap_domain,
                        "title": component.capitalize(),
                        "dc": component,
                        "root_account": root_account,
                        "root_password": root_password}


def import_ldif(domain, root_account, root_password):
    """
        Imports initial LDIF to LDAP domain.

        Arguments:
            domain: Unique domain name
            root_account: Admin user name
            root_password: Admin password
    """
    ldap_domain = "dc=" + domain.replace(".", ", dc=")
    common = "cn=%s, %s" % (root_account, ldap_domain)

    ldif = make_ldif(domain, root_account, root_password)

    cmd = ["/usr/bin/ldapadd", "-x", "-D", common, "-w", root_password]
    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    out, err = proc.communicate(input=ldif)

def main():
    """
        Main
    """
    parser = optparse.OptionParser("usage: %prog [options] domain")

    parser.add_option("-N", "--dryrun", dest="dryrun", action="store_true",
                      help="Do nothing, just tell")
    parser.add_option("-u", "--username", dest="username",
                      help="Username for root account", metavar="NAME")
    parser.add_option("-p", "--password", dest="password",
                      help="Password for root account", metavar="PW")
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
                      help="Verbose mode")

    (options, args) = parser.parse_args()

    if os.getuid() != 0 and not options.dryrun:
        print "%s must be run as root." % sys.argv[0]
        sys.exit(1)

    try:
        import pisi
    except ImportError:
        print "Can't find PiSi. Is this a Pardus system?"
        sys.exit(1)

    packages = pisi.api.list_installed()
    if "openldap-server" not in packages:
        print "Install openldap-server package."
        sys.exit(1)
    if "ejabberd" not in packages:
        print "Install ejabberd package."
        sys.exit(1)

    if not len(args):
        print "A domain name is required."
        sys.exit(1)

    domain = args[0]

    if not options.username:
        options.username = get_text("Username for admin account")
        if not options.username:
            sys.exit(1)

    if not options.password:
        options.password = get_text("Password for admin account", hidden=True)
        if not options.password:
            sys.exit(1)

    print "Stopping openldap-server"
    if not options.dryrun:
        os.system("service openldap_server stop")

    print "Writing new /etc/openldap/slapd.conf"
    conf = make_ldap_conf(domain, options.username, options.password)
    if not options.dryrun:
        file("/etc/openldap/slapd.conf", "w").write(conf)
    else:
        print
        print "    " + conf.replace("\n", "\n    ")
        print

    print "Generating SSL certificate"
    if not options.dryrun:
        file("/etc/openldap/ssl.cnf", "w").write(TEMP_SSL)
        os.system("dd if=/dev/urandom of=/etc/ejabberd/ssl.rand count=1 > /dev/null")
        os.system("/usr/bin/openssl req -new -x509 -days 365 -nodes -config /etc/ejabberd/ssl.cnf -out /etc/ejabberd/ssl.pem -keyout /etc/ejabberd/ssl.pem > /dev/null")
        os.system("/usr/bin/openssl gendh -rand /etc/ejabberd/ssl.rand 512 >> /etc/ejabberd/ssl.pem")
        os.system("/usr/bin/openssl x509 -subject -dates -fingerprint -noout -in /etc/ejabberd/ssl.pem > /dev/null")
        os.system("cp /etc/ejabberd/ssl.pem /etc/openldap/ssl.pem")
        os.system("chown ejabberd /etc/ejabberd/ssl.pem")
        os.system("chown ldap:ldap /etc/openldap/ssl.pem")
        os.system("rm -rf /etc/ejabberd/ssl.rand")

    print "Writing new /etc/ejabberd/ejabberd.cfg"
    conf = make_jabber_conf(domain, options.username, options.password)
    if not options.dryrun:
        file("/etc/ejabberd/ejabberd.cfg", "w").write(conf)
    else:
        print
        print "    " + conf.replace("\n", "\n    ")
        print

    print "Loading LDAP schemas"
    if not options.dryrun:
        for schema in os.listdir("/usr/share/ahenk-setup/schema/"):
            if schema.endswith(".schema"):
                os.system("cp /usr/share/ahenk-setup/schema/%s /etc/openldap/schema/%s" % (schema, schema))
        print

    else:
        for schema in os.listdir("/usr/share/ahenk-setup/schema/"):
            if schema.endswith(".schema"):
                print "cp /usr/share/ahenk-setup/schema/%s /etc/openldap/schema/%s" % (schema, schema)
        print

    print "Starting openldap-server"
    if not options.dryrun:
        os.system("service openldap_server start")
        os.system("service openldap_server on")

    print "Loading inital database components"
    if not options.dryrun:
        time.sleep(3)
        import_ldif(domain, options.username, options.password)
    else:
        ldif = make_ldif(domain, options.username, options.password)
        print
        print "    " + ldif.replace("\n", "\n    ")
        print

    print "Starting ejabberd"
    if not options.dryrun:
        os.system("service ejabberd start")
        os.system("service ejabberd on")

    print "Ahenk server is ready."


if __name__ == "__main__":
    main()


#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble
\tolerance 10000
\usepackage{hyperref}
\end_preamble
\language english
\inputencoding latin5
\fontscheme pslatex
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

New Developer's Guide
\layout Author


\lang turkish
Barýþ
\lang english
 Metin <baris@pardus.org.tr>, A.
 Murat Eren <meren@pardus.org.tr>
\layout Standard
\align center 
Translation: 
\lang turkish
K.
 Deniz Öðüt
\layout Standard
\align center 
Proofreading: Shane Shields, Görkem Çetin
\layout Abstract

This document describes what a new developer should know and do to join
 the development process of Pardus project.
\layout Abstract
\pagebreak_top \pagebreak_bottom 

\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Introduction
\layout Standard

In this document we'll try to explain how contributers can support the Pardus
 Liux, which is developed under the structure of Pardus Project, and the
 requirements to be a Pardus developer.
 Although we are talking about the Pardus development model in particular,
 we believe that the requirements explained in the document apply to almost
 all distribution projects.
\layout Standard

Please feel free to browse the web pages of Pardus for other information
 not contained in this document.
 From those pages you may find the information needed on other documents,
 tools used and services.
 Pardus pages can be reached from 
\begin_inset LatexCommand \url{http://www.pardus.org.tr}

\end_inset 


\layout Section

What is a developer?
\layout Standard

To put it roughly, it is not wrong to say that the project should fulfill
 two types of mission.
 As it is the case for any distribution, gathering the software and preparing
 the infrastructure to enable this task and sustaining it, as well as developing
 new tools and technologies to form the soul of the distribution are among
 the required tasks.
\layout Standard

When referring to 
\emph on 
developer
\emph default 
 we describe not only those who write programs but also those who fulfill
 any single task.

\emph on 
 
\emph default 
We are aware that
\emph on 
 
\emph default 
work has to be done in many areas such as documentation, bug controls, visual
 materials, translations etc.
 besides programming to implement a software project.
 We need all of them for Pardus as well.
\layout Subsection*

How will I start?
\layout Standard

First of all its a good idea to keep up with current events.
 To do this its mostly effective to observe for a while and watch how work
 proceeds.
 It might be useful to join the e-mail lists which can be accessed from
 the Pardus web pages and follow the discussions, ongoing events, investigate
 bug reports, the solutions proposed regarding the bugs and examine the
 documents published.
\layout Standard

By considering the outlined methods you may continue to help development.
 You can add your comments and proposals for solutions to the bug reports
 by testing the sofware or you can report the new bugs you found.
 You can contribute to develop innovative technologies and add new features
 or you can support a step of the process which you think is not working
 (maybe working too slow) and speed it up.
 By doing so, you should always be in communication with other developers
 and contributers.
 As its true for all tasks performed by more than one person, we need to
 have knowledge of each other.
 
\layout Standard

Our needs can be summarized as the articles below:
\layout Subsection

Developing software and debugging
\layout Standard

You can contribute your knowledge and labour on developing software by assisting
 with cleaning up the source and helping innovative technology teams working
 in this field.
 They can provide the best information on how you can help them.
 The Pardus e-mail lists which you can join via 
\begin_inset LatexCommand \url{http://liste.uludag.org.tr/mailman/listinfo}

\end_inset 

 will be helpful.
\layout Standard

You may examine the reported bugs, and find solutions for them, using Pardus
 bug tracking system which can be accessed via the web pages.
\layout Subsection

Translation
\layout Standard

Localization of free software, to enable them to be used with correct and
 perfect Turkish is another requirement for us.
 In this context, you may work with localization teams organized for almost
 all major free software project.
 We'll draw direct benefit from your support for localization projects if
 you give priority to the software selected by Pardus project.
 
\layout Standard

To say in short, support localization efforts.
 Beyond rough translations try to improve the quality of translations.
 While supporting translation works, by providing not only Ulusal Daðýtým
 but also all existing Linux distributions with packages in problem-free
 Turkish, you will be part of an important mission.
\layout Standard

To support notable translation groups, you can reach the localization works
 you feel interest in via 
\begin_inset LatexCommand \url{http://www.pardus.org.tr/projeler/turkce/y10me/}

\end_inset 

 (in Turkish)
\layout Subsection

Tests and bug reports
\layout Standard

You can report bugs by testing the software we choose.
 You can controle the bugs in other distributions and report the situation.
 To know that the very same bug exists in other distributions might help
 us to produce a proper solution.
 If that problem is solved -or never existed- in a particular distribution,
 reaching a solution will be faster by examining the work that particular
 distribution did for that software.
 You can reach our bug tracking system via 
\begin_inset LatexCommand \url{http://bugs.pardus.org.tr/}

\end_inset 


\layout Subsection

Graphical Design, Multimediea
\layout Standard

If you are talented in this domain, you can help with the topics which require
 graphics knowledge, such as the icon sets, font types and colour themes.
 Feel free to ask for help from us via e-mail lists when you need visual
 materials to use in your work.
\layout Subsection

Documentation
\layout Standard

You can support the documentation of the ongoing projects.
 Along with the user's documents you can prepare 
\begin_inset Quotes eld
\end_inset 

How To
\begin_inset Quotes erd
\end_inset 

 documents for the developers that have newly joined the project.
 You can assist us to update our Web pages or you can help us to keep foreign
 language -such as English, German, Spanish- translations of our pages up-to-dat
e.
\layout Subsection

Publicity
\layout Standard

You can support the publicity of the project and encourage more people to
 learn about it.
\layout Standard

Probably the list of the topics you can help is not limited with those above.
 By rendering your opinions on the discussion points within e-mail lists,
 advancing proposals, providing the lists with constructive criticism and
 developments related with the distribution, you can find new topics to
 help.
\layout Section

What is the responsibility of the developer?
\layout Standard

Indeed, the answer of this question might vary considerably depending on
 the subject you begin to work on, but we can mention the basic responsibilities
 of all developers in general.
 In fact, the responsibilities described here are basic points for many
 developer to work together in harmony.
 In this sense, although what is mentioned below is true in general, you
 can find your own way to cooperate as you become familiar with your working
 environment and friends.
\layout Subsection

Continuity
\layout Standard

A developer should be prepared to work on the projects s/he is dealing with
 continiously.
 Here 
\begin_inset Quotes eld
\end_inset 

continuity
\begin_inset Quotes erd
\end_inset 

 doesn't stand for a 7/24 work but it stresses the continuity of the subject
 to be dealt.
 For different areas are clannish in an operation system, developers should
 keep up with each others speed.
 
\layout Subsection

Accuracy
\layout Standard

In the project you might be working on the same subject with more than one
 developer.
 What's more, there might be other developers affected by your work.
 For this reason not only the continuity of your work but also the accuracy
 are of great importance in proportion with the extend they affect other
 developers.
 If you are performing your work on one of the main development repositories,
 you should take into account the other developers working with you that
 are affected by your work, in all stages.
 You should make sure that any change you make does not -even slightly-
 prevent other developers from doing their job.
\layout Subsection

Determination
\layout Standard

If you have the power of decision for a subject you are working on, changing
 your decisions too often makes it difficult for the other developers to
 follow and what's more important it makes the developers who are dependent
 on you to have difficulties while working.
 Hence it will be useful to take well-thought decisions and to ask for the
 opinions of the other developers before making a decision.
\layout Standard

At a particular point if you feel that you should change your decision anyway,
 you can do this by letting the other developers know about it and -if your
 previous works are already being used- by working in an 
\begin_inset Quotes eld
\end_inset 

experimental
\begin_inset Quotes erd
\end_inset 

 area harmless to them.
\layout Subsection

Communication
\layout Standard

It'll be useful to let other developers know about the decisions you make,
 the steps you take and the changes -even the minor ones- you make.
 In this way, you can adapt new developers -who are always needed- to the
 subject you are dealing with easier, you can cooperate with the developers
 you work with more consistently and faster.
 When you'll be in need for help in the future, with the help of this attitude,
 you can be sure that a solution will be produced faster because another
 develepor already knows what you want to do.
 For communication you can use e-mail lists, the documents you'll prepare
 or explanatory information (such as subversion messages) you'll add to
 the changes you make.
\layout Section

New developer application
\layout Standard

There's always room for a new developer.
 You too can apply to be a Pardus developer and become an official developer
 as well.
 Although it's a prerequisite to accept the responsibility of being a new
 developer, it's not enough for all cases.
 On the other hand, we can put it openly that we are enthusiastic for delegation
 of responsibility and accepting new developers.
 For details please keep on reading...
\layout Subsection

Who may submit?
\layout Standard

Everyone who is working for Pardus and who accepts the developer responsibilitie
s described in this document may submit a 
\emph on 
new developer application
\emph default 
.
 The main channel of communication is the e-mail lists.
 In order to accept an application, applicant's determination and style
 of working should be obverved.
 In this sense, you can select a task suitable for you and begin working
 on it before you submit.
 By sharing your work with the other developers you enable them to examine
 your work and so other developers will have the chance to become acquainted
 with you.
 
\layout Standard

For example, it may be a good starting point to work on the software which
 is already in the package repositories, propose new patches and solutions,
 examine and test other solution proposals and report what you get.
\layout Subsection

How to submit?
\layout Standard

To submit the application you can e-mail to admins@pardus.org.tr
\layout Standard

In your application e-mail;
\layout Enumerate

the development subjects you are working on related with Pardus,
\layout Enumerate

other subjects you want to work on,
\layout Enumerate

the e-mail address/username which you use for the bug tracking system,
\layout Enumerate

your areas of specialization,
\layout Enumerate

a Pardus developer who knows about your work and might be a reference for
 you
\layout Standard

should be included.
\layout Standard

You should include the username and ciphertext of
 your password in your application e-mail.
 By doing so, you provide us with the ciphertext of your password where
 you are the only one who knows the plaintext.
 We can then add your username and password wherever an identitiy check
 is required.
 
\layout Subsubsection

to create a password with perl
\layout Standard

To do this the, you can use the command below:
\layout LyX-Code

perl -e "print crypt('yourpassword','xy'),
\backslash 
"
\backslash 
n
\backslash 
";"
\begin_inset Foot
collapsed true

\layout Standard

'xy' are two random characters given to crypt() function as a parameter
 to be used in shadowing.
\end_inset 


\layout Standard

This command will create just your password.
 In your e-mail you should mention the username you want to use.
\layout Subsubsection

to create a password with python
\layout Standard

You can do the same with python by using the command below:
\layout LyX-Code

python -c "import crypt; print crypt.crypt('password', 'xy')"
\layout Standard

In this case as well, just the shadowed form of your password will be given
 as output.
 In your e-mail you should mention the username you want to use.
\layout Section

Subversion repositories
\layout Standard

The development process in Pardus is maintained via a Subversion version
 control system.
 Subversion is an open source version tracking system.
 Its a development infrastructure which makes it possible for more than
 one application developer to work together unconcerned about demolishing
 each others' changes.
 Thanks to this, any single software's development process can be tracked
 backwards, the changes made gradually can be watched and can be easily
 returned to any version of a particular time.
\layout Standard

At the moment there are two subversion repositories we use in Pardus structure
 .
\layout Subsection

Pardus Repository
\layout Standard

Pardus repository is the one in which the products being developed within
 the project are kept.
 All the software developed for Pardus is kept in Pardus repository.
 The repository is at the address https://svn.pardus.org.tr/pardus.
 It keeps the source package repositories where the software's PiSi packages
 are found.
\layout Standard

More information on the Pardus repository can be found in the document Pardus
 Depo Politikasý (Pardus Repository Policy).
\layout Subsection

Hierarchy of repository directories
\layout Standard

Each Pardus subversion repository has the hierarchy of directories detailed
 below.
\layout Standard

There are three main directories in a repository: trunk, tags and repos.
\layout Subsubsection

trunk/
\layout Standard

Trunk is the directory in which continuous work is performed.
\layout Standard

Each project module (document, Web pages, software projects, etc.) has its
 own directory under trunk/.
\layout Subsubsection

tags/
\layout Standard

Tags directory is the place where, for any module, the work done under trunk
 is tagged and copied to.
 Within this directory, there exist 3 directories.
\layout Itemize


\series bold 
tags/RELEASE/
\series default 
: This is the directory which software (or modules) use to tag their own
 version numbers.
 For example, version 0.2 of tasma is tagged in tags/RELEASE/tasma-0.2 directory.
\layout Itemize


\series bold 
tags/BLACKHOLE
\series default 
/: Its a blackhole the projects for which the development is stopped (because
 of the lack of a developer to deal with it or no more need for that project)
 are 
\begin_inset Quotes eld
\end_inset 

thrown
\begin_inset Quotes erd
\end_inset 

 into.
 When the projects in it are desired to be used again, they are copied under
 trunk/ and worked on.
\layout Itemize


\series bold 
tags/RESTRUCTURED/
\series default 
: Its the directory in which the module is put if the software (or module)
 undergoes a total restructuring and if the old files will not be used anymore.
 For example, 
\begin_inset Quotes eld
\end_inset 

abc
\begin_inset Quotes erd
\end_inset 

 project which was restarted to be written on 28th May 2005 is moved under
 tags/RESTRUCTURED/abc-2005-05-28/.
\layout Subsubsection

repos/
\layout Standard

Repos is a directory in which developers can advance their work in an experiment
al nature without disturbing the other developers working on the same module
 under trunk.
 The developer can proceed her/his experimental work by creating her/his
 own directory under repos/.
\layout Standard

(As a rule which is valid only for packeges repository, the documents related
 with this project are found under repos/doc directory.)
\layout Section

Using Subversion
\layout Standard

A very detailed user's manual
\begin_inset Foot
collapsed true

\layout Standard


\begin_inset LatexCommand \url{http://svnbook.red-bean.com/}

\end_inset 


\end_inset 

 is available.
 Besides that book, information about the project can be reached from the
 frequently asked questions page
\begin_inset Foot
collapsed true

\layout Standard


\begin_inset LatexCommand \url{http://subversion.tigris.org/project_faq.html}

\end_inset 


\end_inset 

 on the own Web site
\begin_inset Foot
collapsed true

\layout Standard


\begin_inset LatexCommand \url{http://subversion.tigris.org/}

\end_inset 


\end_inset 

 of Subversion project.
 In this section frequently needed commands for practical usage are tried
 to be told by examples.
\layout Subsection

How do I know if I have Subversion in my system or not?
\layout Standard

As the quickest way to see if you have Subversion in your system or not,
 you can refere to the output of 
\begin_inset Quotes eld
\end_inset 

svn --version
\begin_inset Quotes erd
\end_inset 

 command.
 It's a good sign if you see something like this:
\layout LyX-Code

evreniz@jaco:~$ svn --version
\layout LyX-Code

svn, version 1.0.3 (r9775)
\layout LyX-Code

  compiled May 19 2004, 21:28:49
\layout LyX-Code

Copyright (C) 2000-2004 CollabNet.
\layout LyX-Code

Subversion is open source software, see http://subversion.tigris.org/
\layout LyX-Code

This product includes software developed by CollabNet (http://www.Collab.Net/).
\layout LyX-Code

The following repository access (RA) modules are available:
\layout LyX-Code

* ra_dav : Module for accessing a repository via WebDAV (DeltaV) protocol.
\layout LyX-Code

  - handles 'http' schema
\layout LyX-Code

  - handles 'https' schema
\layout LyX-Code

* ra_local : Module for accessing a repository on local disk.
\layout LyX-Code

  - handles 'file' schema
\layout LyX-Code

* ra_svn : Module for accessing a repository using the svn network protocol.
\layout LyX-Code

  - handles 'svn' schema
\layout LyX-Code

evreniz@jaco:~$ 
\layout Standard

If it doesn't exist, from 
\begin_inset LatexCommand \url{http://subversion.tigris.org/project_packages.html}

\end_inset 

 you can have the package prepared for your distribution or operating system
 and install it.
 To our knowledge, all of the general Linux distributions, including Pardus,
 has subversion (svn) packages prepackaged.
\layout Subsection

What is a repository?
\layout Standard

A repository is a disk area on which the last version, all the versions
 prior to the last version and the changes between versions of the software
 package(s) every developer works on, information including their user,
 date and cause are stored which can be reached by several methods.
 
\layout Subsection

How can I see what directories exist in a repository?
\layout Standard

A single repository may contain more than one directory in it.
 The hierarchy of a repository is just like the inside of a directory on
 a disk.
 So, you can browse without having to copy all the repository to your disk
 and just get a view of the part you want to work on or have a look at.
 The list of directories and files in a repository is displayed using 
\begin_inset Quotes eld
\end_inset 

svn ls repository_address
\begin_inset Quotes erd
\end_inset 

 format:
\layout LyX-Code

$ svn ls http://svn.pardus.org.tr/uludag
\layout LyX-Code

repos/
\layout LyX-Code

tags/
\layout LyX-Code

trunk/
\newline 

\layout LyX-Code

$ svn ls http://svn.pardus.org.tr/uludag/trunk
\layout LyX-Code

COMAR/
\layout LyX-Code

comar_prototip_old/
\layout LyX-Code

web/
\newline 

\layout LyX-Code

$ svn ls http://svn.pardus.org.tr/uludag/trunk/COMAR
\layout LyX-Code

COMAR-1.sxw
\layout LyX-Code

COMARd/
\layout LyX-Code

CSL/
\layout LyX-Code

OM/
\layout LyX-Code

SlicerAPI/
\layout LyX-Code

confparser/
\newline 

\layout LyX-Code

$ svn ls http://svn.uludag.org.tr/uludag/trunk/COMAR/confparser
\layout LyX-Code

GenericParser.py
\layout LyX-Code

README
\layout LyX-Code

branchedParser.py
\layout LyX-Code

comar_configparser.png
\layout LyX-Code

config_files/
\layout LyX-Code

confparser.py
\layout LyX-Code

flatParser.py
\layout LyX-Code

sectionedParser.py
\layout LyX-Code

$ 
\layout Subsection

How do I get a copy of a directory in the repository?
\layout Standard

In order to create a copy of the repository 
\begin_inset Quotes eld
\end_inset 

svn co
\begin_inset Quotes erd
\end_inset 

 command is used.
 Once the copy is created, no more processing is performed on this command
 copy.
\layout LyX-Code

$ svn co http://svn.pardus.org.tr/uludag
\layout LyX-Code

A uludag/trunk
\layout LyX-Code

...
\layout LyX-Code

...
\layout Standard

You can treat the repository as if its an URI.
 By doing so, you can get any subdirectory in the repository.
\layout LyX-Code

$ svn co http://svn.pardus.org.tr/uludag/trunk/COMAR
\layout LyX-Code

A COMAR/COMAR-1.sxw
\layout LyX-Code

A COMAR/CSL
\layout LyX-Code

...
\layout LyX-Code

...
\layout Subsection

How do I know if my copy is up-to-date or not?
\layout Standard

You have to update the copy of the repository you have periodically with
 
\begin_inset Quotes eld
\end_inset 

svn update
\begin_inset Quotes erd
\end_inset 

 command in order to know about the last changes and to track the last version.
 If you call the command alone the files in the directory you are on and
 the entire directory will be updated.
 Besides, you can add the address of the directory or the single file you
 want to update to the end of the command.
\layout LyX-Code

~/work/uludag/[...]/uludag/trunk $ svn update
\layout LyX-Code

U tasma/modules/tasmanet/device.cpp 
\layout LyX-Code

U tasma/modules/tasmanet/devicesettings.cpp 
\layout LyX-Code

U tasma/modules/tasmanet/device.h 
\layout LyX-Code

U tasma/modules/tasmanet/devicesettings.h 
\layout LyX-Code

Updated to revision 158.
\layout LyX-Code

~/work/uludag/[...]/uludag/trunk $
\layout Subsection

What do the signs by the files mean?
\layout Standard

While you are working with SVN and during processes such as updating and
 searching, as in the previous example, the signs by the files are to inform
 you about what kind of a change related with the next file is performed.
\layout Standard

One of the letters U, D, A, C or G may be found by files: 
\layout Itemize


\series bold 
A
\series default 
 Added
\layout Itemize


\series bold 
D
\series default 
 Deleted
\layout Itemize


\series bold 
U
\series default 
 Updated
\layout Itemize


\series bold 
G
\series default 
 Merged (the last update you got from the repository is merged with the
 file you are performing local changes)
\layout Itemize


\series bold 
C
\series default 
 Conflicted (the last update you got from the repository is conflicted with
 the changes you performed localy)
\layout Subsection

I changed some files; what shall I do now?
\layout Standard

You can use 
\begin_inset Quotes eld
\end_inset 

svn status
\begin_inset Quotes erd
\end_inset 

 command whenever you want to see what changes you made in your copy.
 This command can run with an URI you add to the end of it as all the other
 commands.
 Below its seen that a file is added to, a file is deleted from and two
 files are changed regarding the last updated copy of the repository:
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ svn status
\layout LyX-Code

A COMARd/csl/degisiklik
\layout LyX-Code

D COMARd/csl/loader.py 
\layout LyX-Code

M COMARd/COMARValue.py
\layout LyX-Code

M comar-call/rpc.c
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ svn status COMARd/csl/COMARValue.py
\layout LyX-Code

M COMARd/COMARValue.py
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $
\layout Standard

Also, you can learn what you particularly changed in changed files with
 
\begin_inset Quotes eld
\end_inset 

svn diff
\begin_inset Quotes erd
\end_inset 

 command:
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ svn diff comar-call/rpc.c
\layout LyX-Code

Index: comar-call/rpc.c
\layout LyX-Code

===================================================================
\layout LyX-Code

--- comar-call/rpc.c (revision 158) 
\layout LyX-Code

+++ comar-call/rpc.c (working copy) 
\layout LyX-Code

@@ -146,6 +146,7 @@ 
\layout LyX-Code

  if (len == 0) break; 
\layout LyX-Code

  if (len == -1) { 
\layout LyX-Code

          puts("connection broken too soon"); 
\layout LyX-Code

+         //totally different change 
\layout LyX-Code

          break; 
\layout LyX-Code

  } 
\layout LyX-Code

  printf("RECV[%s]
\backslash 
n
\backslash 
n", buf); 
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ 
\layout Subsection

I added a new file but there is a 
\begin_inset Quotes eld
\end_inset 

?
\begin_inset Quotes erd
\end_inset 

 by it...
\layout Standard

While you are working on the copy of the repository when you would like
 to create a new file, you should inform your local copy about your intention
 to add that file to the repository with the help of 
\begin_inset Quotes eld
\end_inset 

svn add
\begin_inset Quotes erd
\end_inset 

 (it has sister commands such as 
\begin_inset Quotes eld
\end_inset 

svn copy
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

svn del
\begin_inset Quotes erd
\end_inset 

 as well).
 Let's explain why there's such a need as follows: Let's assume that you
 would like to compile and test an application which is in your local copy.
 In this case, some files that you don't prefer to send to the main repository
 will be created in your work copy such as Makefiles and *.m4 files which
 only you have any need for.
 In such cases, it will be very advantageous and convenient if the files
 added locally are not added to the repository as well, because when you
 change the source code of the software, recompile it and decide to send
 it to the repository at a proper time, you know that the other files are
 not going to the repository.
 With 
\begin_inset Quotes eld
\end_inset 

svn add
\begin_inset Quotes erd
\end_inset 

, you add to the repository 
\emph on 
the files you want to add
\emph default 
.
 
\begin_inset Quotes eld
\end_inset 

svn del
\begin_inset Quotes erd
\end_inset 

 will not mentioned again.
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ svn status
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ touch newscript.csl
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ svn status
\layout LyX-Code

? newscript.csl
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ svn add newscript.csl
\layout LyX-Code

A newscript.csl
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ svn status 
\layout LyX-Code

A newscript.csl
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ 
\layout Subsection

I want to revert the files I changed to their original states.
\layout Standard

You can revert the changes you made to their original state as in the last
 copy using 
\begin_inset Quotes eld
\end_inset 

svn revert
\begin_inset Quotes erd
\end_inset 

 command anytime you like:
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ svn status
\layout LyX-Code

A COMARd/csl/thechange
\layout LyX-Code

D COMARd/csl/loader.py
\layout LyX-Code

M COMARd/COMARValue.py
\layout LyX-Code

M comar-call/rpc.c 
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ svn revert comar-call/rpc.c
\layout LyX-Code

Reverted 'comar-call/rpc.c'
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ svn status
\layout LyX-Code

A COMARd/csl/thechange
\layout LyX-Code

D COMARd/csl/loader.py
\layout LyX-Code

M COMARd/COMARValue.py
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $
\layout Standard

Its also possible to revert all of the files to their originals recursively...
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ svn revert .
 -R 
\layout LyX-Code

Reverted 'COMARd/csl/thechange'
\layout LyX-Code

Reverted 'COMARd/csl/loader.py' 
\layout LyX-Code

Reverted 'COMARd/COMARValue.py'
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $ svn status
\layout LyX-Code

~/work/[...]/trunk/COMAR/comar $
\layout Subsection

I want to send the files I changed; what to do?
\layout Standard

If you are sure of the last condition of the files you changed, you can
 use 
\begin_inset Quotes eld
\end_inset 

svn commit
\begin_inset Quotes erd
\end_inset 

 command in order to transmit your changes to the repository.
 By using this command -as its true for all the rest- you can send to the
 repository a single file, a single directory and what is under it or all
 the changes you made.
 When you run 
\begin_inset Quotes eld
\end_inset 

svn commit
\begin_inset Quotes erd
\end_inset 

, svn -using your preferred text editor- opens a file for you with the changes
 you made listed in it in order to make sure others see what you changed
 and to enable your changes to be logged for backward tracking in the repository.
 To alter the text editor opened as the preferred one you can make use of
 the environment variable that svn uses named SVN_EDITOR:
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ SVN_EDITOR="vi" svn commit 
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ SVN_EDITOR="mcedit" svn commit
\layout LyX-Code

~/work/[...]/COMARd/csl/sample $ SVN_EDITOR="kwrite" svn commit
\layout LyX-Code

.
\layout LyX-Code

.
\layout Standard

As soon as you write the changes to the text editor, save what you wrote
 and close the editor, svn will begin to send the changes in your local
 copy to the repository.
\layout Subsection

How about the other commands?
\layout Standard

You can run Subversion to learn Subversion commands as well.
 
\begin_inset Quotes eld
\end_inset 

svn help command_name
\begin_inset Quotes erd
\end_inset 

 feeds you back with detailed information about 
\emph on 
command_name
\emph default 
 while 
\begin_inset Quotes eld
\end_inset 

svn help
\begin_inset Quotes erd
\end_inset 

 serves you with a list of commands you can use.
\layout LyX-Code

$ svn help
\layout LyX-Code

usage: svn <subcommand> [options] [args]
\layout LyX-Code

Type "svn help <subcommand>" for help on a specific subcommand.
\layout LyX-Code

Most subcommands take file and/or directory arguments, recursing
\layout LyX-Code

on the directories.
 If no arguments are supplied to such a
\layout LyX-Code

command, it will recurse on the current directory (inclusive) by
\layout LyX-Code

default.
\layout LyX-Code

Available subcommands:
\layout LyX-Code

add
\layout LyX-Code

blame (praise, annotate, ann)
\layout LyX-Code

cat
\layout LyX-Code

checkout (co)
\layout LyX-Code

cleanup
\layout LyX-Code

commit (ci)
\layout LyX-Code

copy (cp)
\layout LyX-Code

delete (del, remove, rm)
\layout LyX-Code

diff (di)
\layout LyX-Code

export
\layout LyX-Code

help (?, h)
\layout LyX-Code

import
\layout LyX-Code

info
\layout LyX-Code

list (ls)
\layout LyX-Code

log
\layout LyX-Code

merge
\layout LyX-Code

mkdir
\layout LyX-Code

move (mv, rename, ren)
\layout LyX-Code

propdel (pdel, pd)
\layout LyX-Code

propedit (pedit, pe)
\layout LyX-Code

propget (pget, pg)
\layout LyX-Code

proplist (plist, pl)
\layout LyX-Code

propset (pset, ps)
\layout LyX-Code

resolved
\layout LyX-Code

revert
\layout LyX-Code

status (stat, st)
\layout LyX-Code

switch (sw)
\layout LyX-Code

update (up)
\layout LyX-Code

\layout LyX-Code

Subversion is a tool for version control.
\layout LyX-Code

For additional information, see http://subversion.tigris.org/
\layout LyX-Code

\layout Standard

In order to have detailed information about a Subversion command;
\layout LyX-Code


\series bold 
$ svn help add 
\layout LyX-Code

add: Put files and directories under version control, scheduling them for
\layout LyX-Code

addition to repository.
  They will be added in next commit.
 usage: add PATH...
\layout LyX-Code

\layout LyX-Code

Valid options:  
\layout LyX-Code

--targets arg            : pass contents of file ARG as additional args
  
\layout LyX-Code

-N [--non-recursive]     : operate on single directory only  
\layout LyX-Code

-q [--quiet]             : print as little as possible  
\layout LyX-Code

--config-dir arg         : read user configuration files from directory
 ARG  
\layout LyX-Code

--force                  : force operation to run  
\layout LyX-Code

--auto-props             : enable automatic properties  
\layout LyX-Code

--no-auto-props          : disable automatic properties
\layout Standard

commands can be used or Frequently Asked Questions can be browsed from 
\begin_inset LatexCommand \url{http://subversion.tigris.org/project_faq.html}

\end_inset 

 or Subversion book can be read from 
\begin_inset LatexCommand \url{http://svnbook.red-bean.com}

\end_inset 


\layout Section

Rules for using Subversion
\layout Standard

Subversion repository is a common place shared by all developers.
 In order to work together developers should be using the repository efficiently
, properly and in an organized way.
\layout Standard

Rules for using Subversion are the rules to be respected by the developers
 having the privilege to write to Pardus repositories.
\layout Subsection

Always work with an updated repository
\layout Standard

The updates on the Subversion repository will be more frequent as the quantity
 of the developers increase.
 In order to know about the rest of the process and to avoid a conflict
 between what you do and the rest to be done, before you begin to work,
 always update your repository by means of 
\emph on 
svn update
\emph default 
 command.
\layout Subsection

Think before you commit
\layout Standard

Think twice before you commit
\begin_inset Foot
collapsed true

\layout Standard

commit= the action performed by means of svn commit command
\end_inset 

 the changes you made to the Subversion repository.
 The data you commit to the repository will reach to all developers and
 affect their work.
 In this sense, its of great importance to follow the articles below.
\layout Enumerate

Do not commit a non-running code to the Subversion repository.
\layout Enumerate

Always update your repository before you commit by means of 
\emph on 
svn update
\emph default 
 in order to get the last changes.
 Be sure that the changes you made do not conflict with the others.
\layout Enumerate

Pay attention to what you commit.
 To make sure of this, always control the changes you are about to commit
 by means of 
\emph on 
svn diff
\emph default 
 command before commitment.
\layout Enumerate

Always test the changes you made.
 Even better, test them twice.
\layout Subsection

Add descriptive messages to your commitments
\layout Standard

Explanation messages used in the commitments should focus on the change
 that is made and they should be as descriptive as possible.
 As much as you can, try to add explanation messages related with only the
 files you made changes on.
 However, in the limits of the context, you can include all the information
 which can not be derived from the output of a svn diff command in your
 explanation message.
\layout Standard

Refraining from adding a proper explanation message will make it difficult
 to understand the changes you made.
\layout Subsection

Abide by the work plans
\layout Standard

If a work/time plan exists for the distribution in general or if the main
 developer of the component you are working on sets such a plan, abide by
 this plan regarding your commitments.
\layout Standard

For example, an application developer might want to stop adding new features
 to the application at a particular time and might want to work on fixing
 the known issues.
 Its expected that the change you make is coherent with this rule.
\layout Standard

If you are not sure of the coherency of the change you made with the plan,
 you have to refer the related e-mail lists or the main developer.
\layout Subsection

If you made a change affecting more than one component, inform all developers
 about the change.
\layout Standard

In order to ensure all developers know about the 
\begin_inset Quotes eld
\end_inset 

major
\begin_inset Quotes erd
\end_inset 

 update you made, always send an informative message to the related e-mail
 list.
\layout Subsection

Take the responsibility of the change you made
\layout Standard

If the update you made is creating a problem, take the responsibility of
 it and make sure to solve it yourself or by getting help.
\layout Subsection

Respect the generally accepted principles
\layout Standard

Obey the general rules accepted during developers' discussions and be sure
 that your changes are not violating those rules.
 In any case you are unsure you can always choose the 
\begin_inset Quotes eld
\end_inset 

communication
\begin_inset Quotes erd
\end_inset 

 path.
\layout Subsection

Enter the bug number when solving a bug in the bug tracking system.
\layout Standard

If the update you make is solving a reported bug, in order to synchronize
 the bug tracking system with the updates in the repository, notify the
 bug you solved and close the bug in the bug tracking system afterwards.
\layout Subsection

Update the files which you are responsible
\layout Standard

Update only the files which are in your responsibility.
 If you find a bug in files which is in another developer's responsibility,
 first, discuss the situation either by directly contacting the responsible
 developer or by asking the other developers in e-mail lists and only after
 doing so make an attemp to update the repository.
 If the responsible developer does not accept the changes you made, behave
 respectfully.
\layout Subsection

Do not add the automatically created files to the repository
\layout Standard

Do not add the files such as Makefile, Makefile.in, configure scripts, etc.
 which are created afterwards by compilation tools.
 These files will be recreated in different forms in all developers' machines
 and will be perceived as an update by the other develepors.
 In general, adding these files to the repository is perceived as a bug.
\layout Subsection

Perform atomic updates
\layout Standard

Commit all the changes related with a particular improvement/update at once.
 Subversion lets you commit more than one file at once.
 Other developers might be confused because of seperate commits and they
 can miss the improvements you made.
\layout Bibliography
\bibitem {key-3}

Metin, Barýþ & Onur, Çaðlar (November 2004).
 Ulusal Daðýtýma Nasýl Yardým Ederim? http://www.pardus.org.tr
\layout Bibliography
\bibitem {key-6}

Metin, Barýþ (November 2004).
 Paketler Deposu Yeni Geliþtirici Baþvurusu.
 http://www.pardus.org.tr
\layout Bibliography
\bibitem {key-5}

Eren, A.
 Murat (November 2004).
 Subversion Deposu Kullanma Kýlavuzu.
 http://www.pardus.org.tr
\layout Bibliography
\bibitem {key-7}

Barth, Andreas (2005).
 Debian Developer's Reference.
 http://www.debian.org/doc/manuals/developers-reference/
\layout Bibliography
\bibitem {key-8}

Fox, Tammy & Pennington, Havoc (2003).
 Fedora Project Developer's Guide.
 http://fedora.redhat.com/participate/developers-guide/
\layout Bibliography
\bibitem {key-9}

KDE (2004).
 Applying For a KDE CVS Account.
 http://developer.kde.org/documentation/misc/applycvsaccount.php
\layout Bibliography
\bibitem {key-10}

KDE (2004).
 KDE CVS Commit Policy.
 http://developer.kde.org/policies/commitpolicy.html
\the_end

#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    Ahenk Agent
"""

import logging
import ConfigParser
import optparse
import os
import sys

from ahenk.agent import mainloop


def main():
    """
        Main function.
    """

    # Command line options
    parser = optparse.OptionParser()
    parser.add_option("-c", "--config", dest="conffile",
                        default="/etc/ahenk/ahenk-agent.conf",
                      help="Use alternate configuration file", metavar="FILE")
    parser.add_option("-d", "--daemon", action="store_true", dest="daemon",
                      help="Run as a daemon.")
    parser.add_option("-g", "--debug", dest="debug", action="store_true",
                      help="Debug mode")
    parser.add_option("-k", "--kill", action="store_true", dest="kill",
                      help="Kill running daemon.")
    parser.add_option("-n", "--dry-run", action="store_true", dest="dryrun",
                      help="Do nothing, just tell.")
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
                      help="Verbose mode")
    (options, args) = parser.parse_args()

    # Only root can run that application
    if os.getuid() != 0:
        print "%s must be run as root." % sys.argv[0]
        sys.exit(1)

    # Normalize configuration file path
    options.conffile = os.path.realpath(options.conffile)

    # Read configuration file
    if not os.path.exists(options.conffile):
        print "%s is missing." % options.conffile
        sys.exit(1)
    parser = ConfigParser.ConfigParser()
    try:
        parser.read(options.conffile)
    except IOError:
        print "%s is corrupted." % options.conffile
        sys.exit(1)

    # Load configuration
    load_config(parser, options)

    # Load optional configuration
    load_config_optional(parser, options)

    # Create required directories
    create_dirs(options)

    # Init logger
    init_logger(options)

    # Run agent
    run_agent(options)

    sys.exit(0)

def init_logger(options):
    """
        Initializes logger

        Arguments:
            options: Options parsed with optparse module
    """
    if options.debug:
        level = logging.DEBUG
    elif options.verbose:
        level = logging.INFO
    else:
        level = logging.WARNING
    if options.daemon:
        filename = options.logfile
    else:
        filename = None
    logging.basicConfig(filename=filename, level=level, format="%(asctime)-15s %(message)s")

def create_dirs(options):
    """
        Create required directories.

        Arguments:
            options: Options parsed with optparse module
    """
    if not os.path.exists(options.moddir):
        os.makedirs(options.moddir)
    if not os.path.exists(options.policydir):
        os.makedirs(options.policydir)

def load_config(parser, options):
    """
        Load configuration.

        Arguments:
            parser: Options parsed with ConfigParser module
            options: Options parsed with optparse module
    """
    # Host and domain names are mandatory.
    if parser.has_option("server", "hostname"):
        options.hostname = parser.get("server", "hostname")
    else:
        print "No Ahenk-Server address defined in %s" % options.conffile
        sys.exit(1)

    if parser.has_option("server", "domain"):
        options.domain = parser.get("server", "domain")
    else:
        print "No domainname defined in %s" % options.conffile
        sys.exit(1)

    # Username and password must be used together
    if parser.has_option("server", "username"):
        options.username = parser.get("server", "username")
    else:
        options.username = None
    if parser.has_option("server", "password"):
        options.password = parser.get("server", "password")
    else:
        options.password = None

def load_config_optional(parser, options):
    """
        Load optional configuration.

        Arguments:
            parser: Options parsed with ConfigParser module
            options: Options parsed with optparse module
    """
    # Policy check interval, default is 60 seconds
    if parser.has_option("server", "interval"):
        options.interval = int(parser.get("server", "interval"))
    else:
        options.interval = 60

    # PID file
    if parser.has_option("general", "pidfile"):
        options.pidfile = parser.get("general", "pidfile")
    else:
        options.pidfile = "/var/run/ahenk-agent.pid"

    # Log file
    if parser.has_option("general", "logfile"):
        options.logfile = parser.get("general", "logfile")
    else:
        options.logfile = "/var/log/ahenk-agent.log"

    # Modules directory
    if parser.has_option("general", "moddir"):
        options.moddir = parser.get("general", "moddir")
    else:
        options.moddir = "/var/lib/ahenk-agent/"

    # Policy cache directory
    if parser.has_option("general", "policydir"):
        options.policydir = parser.get("general", "policydir")
    else:
        options.policydir = "/var/db/ahenk-agent/"

def run_agent(options):
    """
        Run agent.

        Arguments:
            options: Options parsed with optparse module
    """
    # It's time to enter the main loop:
    if options.daemon or options.kill:
        daemon = mainloop.Agent(options)
        if options.kill:
            daemon.stop()
        else:
            daemon.start()
    elif not options.kill:
        # Interactive mode for debugging
        daemon = mainloop.Agent(options)
        daemon.run()

if __name__ == "__main__":
    sys.exit(main())

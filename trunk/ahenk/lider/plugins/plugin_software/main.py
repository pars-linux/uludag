#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    Software magement module
"""

# Qt4 modules
from PyQt4 import QtGui
from PyQt4 import QtCore

# Generated UI module
from plugins.plugin_software.ui_software import Ui_widgetSoftware

# Helper modules
from helpers import plugins


class WidgetModule(QtGui.QWidget, Ui_widgetSoftware, plugins.PluginWidget):
    """
        Software management UI.
    """
    def __init__(self, parent=None):
        """
            Constructor for main window.

            Arguments:
                parent: Parent object
        """
        plugins.PluginWidget.__init__(self)
        QtGui.QWidget.__init__(self, parent)

        self.setupUi(self)

        self.connect(self.pushPackages, QtCore.SIGNAL("clicked()"), self.__slot_packages)

    def showEvent(self, event):
        """
            Things to do before widget is shown.
        """
        pass

    def get_type(self):
        """
            Widget type.

            Should return TYPE_GLOBAL or TYPE_SINGLE
        """
        return plugins.TYPE_SINGLE

    def load_policy(self, policy):
        """
            Main window calls this method when policy is fetched from directory.
            Not required for global widgets.
        """
        text = [
            "softwareRepositories = %s" % policy.get("softwareRepositories", ""),
            "softwareUpdateSchedule = %s" % policy.get("softwareUpdateSchedule", ""),
            "softwareUpdateMode = %s" % policy.get("softwareUpdateMode", "off"),
        ]
        text = "\n".join(text)
        self.textPolicy.setPlainText(text)

    def dump_policy(self):
        """
            Main window calls this method to get policy generated by UI.
            Not required for global widgets.
        """
        return {}

    def talk_message(self, sender, message):
        """
            Main window calls this method when an XMPP message is received.
        """
        command, reply = message.split(":")
        print command
        if command == "software packages":
            packages = reply.split(",")
            self.textPackages.setPlainText("\n".join(packages))

    def __slot_packages(self):
        """
            Triggered when user clicks 'list packages' button.
        """
        if self.item and self.talk:
            jid = "%s@%s" % (self.item.name, self.talk.domain)
            self.talk.send_message(jid, "software packages")

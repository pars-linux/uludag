#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    Service magement module
"""

# Standard modules
import simplejson

# Qt4 modules
from PyQt4 import QtGui
from PyQt4 import QtCore

# Generated UI module
from ui_services import Ui_widgetServices

# Helper modules
from lider.helpers import plugins
from lider.helpers import wrappers
from lider.helpers import i18n

i18n = i18n.i18n

class WidgetModule(QtGui.QWidget, Ui_widgetServices, plugins.PluginWidget):
    """
        Service management UI.
    """
    def __init__(self, parent=None):
        """
            Constructor for main window.

            Arguments:
                parent: Parent object
        """
        plugins.PluginWidget.__init__(self)
        QtGui.QWidget.__init__(self, parent)

        # Attach generated UI
        self.setupUi(self)

        # UI events
        self.connect(self.pushStart, QtCore.SIGNAL("clicked()"), self.__slot_start_service)
        self.connect(self.pushStop, QtCore.SIGNAL("clicked()"), self.__slot_stop_service)

        # Package index
        self.package_index = {}

        self.start_set = []
        self.stop_set = []

    def set_item(self, item):
        """
            Sets directory item that is being worked on.
            Not required for global widgets.
        """
        self.item = item
        if self.item and not self.item.folder:
            self.groupBox.setEnabled(True)
        else:
            self.groupBox.setEnabled(False)

    def showEvent(self, event):
        """
            Things to do before widget is shown.
        """
        if self.item:
            print "item name %s , item domain %s" %(self.item.name, self.talk.domain)
            jid = "%s@%s" % (self.item.name, self.talk.domain)
            self.talk.send_command(jid, "service.info")
            print "----  SERVICE-INFO  ----"

    def get_type(self):
        """
            Widget type.

            Should return TYPE_GLOBAL or TYPE_SINGLE
        """
        return plugins.TYPE_SINGLE

    def get_classes(self):
        """
            Returns a list of policy class names.
        """
        return ["servicePolicy"]

    def load_policy(self, policy):
        """
            Main window calls this method when policy is fetched from directory.
            Not required for global widgets.
        """
        self.start_set = policy.get("serviceStart", [])
        self.start_set = policy.get("serviceStop", [])

    def dump_policy(self):
        """
            Main window calls this method to get policy generated by UI.
            Not required for global widgets.
        """
        policy = {
            "serviceStart": self.start_set,
            "serviceStop": self.stop_set
        }
        return policy

    def talk_message(self, sender, command, arguments=None):
        """
            Main window calls this method when an XMPP message is received.
        """
        print "-----  Service Plugin Command  ----- "
        print command

        if command == "service.info":
            self.tableWidget.setRowCount(len(arguments))
            print "----- INFO ------"
            index = 0

            for name, desc, status in arguments:
                item_description = QtGui.QTableWidgetItem(str(desc))
                self.tableWidget.setItem(index, 0, item_description)

                item_name = QtGui.QTableWidgetItem(str(name))
                self.tableWidget.setItem(index, 3, item_name)

                if status in ['started', 'on', 'conditional_started']:
                    item_status = QtGui.QTableWidgetItem(i18n("Running"))
                else:
                    item_status = QtGui.QTableWidgetItem(i18n("Stopped"))
                self.tableWidget.setItem(index, 1, item_status)

                if status in ['stopped', 'on']:
                    item_autostart = QtGui.QTableWidgetItem(i18n("Yes"))
                elif status in ['conditional_started', 'conditional_stopped']:
                    item_autostart = QtGui.QTableWidgetItem(i18n("Conditional"))
                else:
                    item_autostart = QtGui.QTableWidgetItem(i18n("No"))
                self.tableWidget.setItem(index, 2, item_autostart)

                index += 1
        elif command in ["service.start.status", "service.stop.status"]:
            msg = QtGui.QMessageBox.information(self, i18n("Status"), arguments)

    def talk_status(self, sender, status):
        """
            Main window calls this method when an XMPP status is changed.
        """
        pass

    def __slot_start_service(self):
        """
            This method is called when the start button clicked to start the selected service
        """
        item = self.tableWidget.selectedItems()
        item_name = str(item[3].text())

        self.start_set.append(item_name)
        #jid = "%s@%s" % (self.item.name, self.talk.domain)
        #self.talk.send_command(jid, "service.start", [item_name])

    def __slot_stop_service(self):
        """
            This method is called when the stop button clicked to stop the selected service
        """
        item = self.tableWidget.selectedItems()
        item_name = str(item[3].text())

        self.stop_set.append(item_name)
        #jid = "%s@%s" % (self.item.name, self.talk.domain)
        #self.talk.send_command(jid, "service.stop", [item_name])

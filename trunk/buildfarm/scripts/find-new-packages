#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys

import pisi
from buildfarm import utils

class UpdateInfo:
    def __init__(self, package):
        self.name = package.source.name
        self.version = package.history[0].version
        self.release = package.history[0].release
        self.owner = package.source.packager.name
        self.comment = package.history[0].comment.splitlines()[0][:40]
        if self.comment != package.history[0].comment:
            self.comment += "..."

        self.url = "http://packages.pardus.org.tr/info/%s/testing/source/%s.html" % (utils.get_distribution_release(),
                                                                                     self.name)

if __name__ == "__main__":
    stable_packages = {}
    new_packages = []

    updaters = {}
    updates = {}

    testing_dir = utils.get_compiled_packages_directory()
    stable_dir = utils.get_stable_packages_directory()

    if not stable_dir:
        print "You don't have a stable repository on this buildfarm."
        sys.exit(1)

    # Create index objects
    testing_index = pisi.index.Index(os.path.join(testing_dir, "pisi-index.xml"))
    stable_index = pisi.index.Index(os.path.join(stable_dir, "pisi-index.xml"))

    # Create a package mapping
    for package in stable_index.packages:
        stable_packages[package.name] = package

    for package in testing_index.packages:
        # Skip if it already exists in stable repository
        if os.path.exists(os.path.join(stable_dir, package.packageURI)):
            continue

        # Assume that the package is completely new for stable repository
        status = "A"
        update_action = " "

        # Get the old package from stable repository
        old_stable = stable_packages.get(package.name)
        if old_stable:
            # Stable has an older release so this is an (U)pdate
            status = "U"
            if package.has_update_type("security", old_stable.history[0].release):
                # This is security
                update_action = "S"
            elif package.has_update_type("critical", old_stable.history[0].release):
                # This is critical
                update_action = "C"

        # Finally append it to the new_packages list
        new_packages.append((package.source.name, package.packageURI, status, update_action))

        # Add the source package to updates dictionary
        if package.source.name not in updates:
            updates[package.source.name] = UpdateInfo(package)

        if old_stable:
            history = package.history
            old_release = old_stable.history[0].release
        else:
            # In case of a new package
            history = package.history[:1]
            old_release = ""

        for update in history:
            if update.release == old_release:
                break

            updater = update.name
            updaters.setdefault(updater, set()).add(package.source.name)

    new_packages.sort()

    old_source = new_packages[0][0]
    for source, filename, status, update_action in new_packages:
        if source != old_source:
            print
            old_source = source
        print "%s%s %s" % (status, update_action, filename)

    with open("updates.txt", "w") as f:
        for updater in sorted(updaters):
            sources = updaters[updater]
            f.write("%s:\n" % updater)
            for source in sorted(sources):
                info = updates[source]
                f.write("     Source: %s ( %s )\n" % (source, info.url))
                f.write("    Version: %s\n" % info.version)
                f.write("    Release: %s (%s)\n" % (info.release, info.comment))
                f.write("      Owner: %s\n" % info.owner)
                f.write("\n\n")


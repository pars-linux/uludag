#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2006-2010 TUBITAK/UEKAE
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Please read the COPYING file.
#
import os
import gettext
_ = gettext.translation('yali', fallback=True).ugettext

import yali
import yali.context as ctx

def loadModules():
    os.system("modprobe -bqa dm-mod raid0 raid1 raid456 raid10")

def setupEnvironment():
    import locale
    locale.setlocale(locale.LC_ALL, "")
    os.environ['LC_NUMERIC'] = 'C'
    os.environ["LVM_SUPPRESS_FD_WARNINGS"] = "1"

def setupExceptionHandler():
    import sys
    import signal
    import traceback
    import cStringIO
    def signal_handler(sig, frame):
        if sig == signal.SIGTERM:
            sys.exit(1)
    def exception_handler(exception, value, error_traceback):
        """ YALI exception handler for showing exceptions in GUI """
        signal.signal(signal.SIGINT, signal.SIG_IGN)   # disable further interrupts

        sio = cStringIO.StringIO()

        sio.write(_("Unhandled internal YALI exception.\n"
                    "Please file a bug report to <http://bugs.pardus.org.tr>."))

        _value = ''
        for arg in value.args:
            _value += str(arg) + '\n'

        sio.write(_value)
        sio.write(str(exception))
        sio.write('\n\n')
        sio.write(_("Backtrace:"))
        sio.write('\n')
        traceback.print_tb(error_traceback, None, sio)

        sio.seek(0)

        ctx.logger.debug("Unhandled internal YALI exception:%s" % unicode(sio.read()))

        if ctx.interface:
            ctx.interface.exceptionWindow(exception, unicode(sio.read()))

    sys.excepthook = exception_handler
    signal.signal(signal.SIGTERM, signal_handler)

def init_gui_interface():
    import yali.gui.interface
    ctx.interface = yali.gui.interface.Interface()

def init_gui_runner():
    import yali.gui.runner
    gui_runner = yali.gui.runner.Runner()
    ctx.logger.debug("Install type is %s" % yali.gui.STEP_TYPE_STRINGS[ctx.flags.install_type])
    screens = yali.gui.get_screens(ctx.flags.install_type)
    gui_runner.setSteps(screens, ctx.flags.startup)
    gui_runner.run()

def parseOptions(argv=None):
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option("-d", "--debug", dest="debug",
                      action="store_true", default="True",
                      help="enable debug")
    parser.add_option("--dryRun", dest="dryRun",
                      action="store_true", default="False",
                      help="only show the result")
    parser.add_option("--baseonly", dest="baseonly",
                      action="store_true", default="False",
                      help="install base system packages")
    parser.add_option("--colllection", dest="collection",
                      action="store_true", default="False",
                      help="install collection type package"
                           "installation if collections exist")
    parser.add_option("--system", dest="install_type",
                      action="store_const", const= 1, default=0,
                      help="start system installation")
    parser.add_option("--oem", dest="install_type",
                      action="store_const", const=2, default=0,
                      help="start Yali with oem mode")
    parser.add_option("--firstBoot", dest="install_type",
                      action="store_const", const=3, default=0,
                      help="start with first boot options")
    parser.add_option("--rescue", dest="install_type",
                      action="store_const", const=4, default=0,
                      help="start Yali with rescue mode")
    parser.add_option("--kahya", dest="kahya",
                      help="run with Kahya file", metavar="FILE")
    parser.add_option("-s", "--startFrom", dest="startFrom",
                      type="int", default=0,
                      help="start from the given screen (num)")
    parser.add_option("-t", "--theme", dest="theme",
                      help="load given theme", type="str", default="oxygen")

    return parser.parse_args(argv)

def main():
    ctx.logger.debug("Yali has been started")

    loadModules()
    setupEnvironment()
    init_gui_interface()
    setupExceptionHandler()

    (options, args) = parseOptions()
    if options.install_type:
        ctx.flags.install_type = options.install_type

    ctx.flags.startup = options.startFrom

    if options.debug:
        ctx.flags.debug = True

    if options.dryRun:
        ctx.flags.dryRun = True


    if options.collection:
        ctx.flags.collection = True

    if options.baseonly:
        ctx.flags.baseonly = True

    if options.kahya:
        ctx.flags.kahya = True
        ctx.flags.kahyaFile = options.kahya

    if options.theme:
        ctx.flags.stylesheet = options.theme

    if not ctx.storage:
        from yali.storage import Storage
        ctx.storage = Storage()

    if not ctx.bootloader:
        from yali.storage.bootloader import BootLoader
        ctx.bootloader = BootLoader()
    ctx.flags.parse_kernel_options()

    init_gui_runner()


if __name__ == "__main__":
    main()

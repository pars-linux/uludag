#!/usr/bin/python
# -*- coding: utf-8 -*-

# Standard Python Library
from getpass import getpass
from optparse import OptionParser
import os
import os.path
import sys

# PLSA Library
from plsa.utility import build_advisory, get_localized_node
from plsa.validator import validate_plsa
from plsa.gpg import GPG

# piksemel
import piksemel

# i18n
import gettext
__trans = gettext.translation("plsa", fallback=True)
_ = __trans.ugettext

# Error codes
SUCCESS, FAIL_USAGE, FAIL_READ, FAIL_WRITE, \
FAIL_XML, FAIL_KEY, FAIL_PP, FAIL_LANG = xrange(8)

def main():
    language = os.environ["LANG"][:2]

    version = "1.0"
    usage = "%prog <options> advisory.xml"

    parser = OptionParser(usage=usage,  version="%prog " + version)
    parser.add_option("-s", "--sign", dest="sign",
                      help=_("sign advisory with KEY"), metavar=_("KEY"))
    parser.add_option("-p", "--pass", dest="passphrase",
                      help=_("use PASS as passphrase"), metavar=_("PASS"))
    parser.add_option("-l", "--language", dest="language",
                      help=_("generate advisory for locale LANG (default: %s)") % language, metavar=_("LANG"))
    parser.add_option("-o", "--output", dest="output",
                      help=_("save advisory text to FILE"), metavar=_("FILE"))
    options, args = parser.parse_args()

    if len(args) == 0:
        parser.print_help()
        return FAIL_USAGE

    if not options.language:
        options.language = language

    try:
        __trans_advisory = gettext.translation("plsa", languages=[options.language], fallback=options.language=="en")
        _a = __trans_advisory.ugettext
        # Texts in advisory should use '_a' instead of '_' function
    except:
        print _("PLSA doesn't have required translation file.")
        return FAIL_LANG

    # Read advisory xml
    if not os.path.isfile(args[0]) or not os.access(args[0], os.R_OK):
        print _("Unable to read %s.") % args[0]
        return FAIL_READ
    try:
        xml_doc = piksemel.parse(args[0])
    except:
        print _("XML file is not valid.")
        return FAIL_XML

    # Validate advisory xml
    xml_val = validate_plsa()
    xml_val.validate(xml_doc)
    if len(xml_val.errors):
        print _("XML file has errors:")
        for i in xml_val.errors:
            print "  " + i
        return FAIL_XML

    node_adv = xml_doc.getTag("Advisory")

    # Check for missing tags
    required = ["Title", "Summary", "Description"]
    nodes = [x.name() for x in node_adv.tags() if "xml:lang" in x.attributes() and x.getAttribute("xml:lang") == options.language and x.firstChild()]
    missing = set(required) - set(nodes)
    if missing:
        print _("XML has missing tags for locale '%s': %s") % (options.language, ", ".join(missing))
        return FAIL_LANG

    # Collect data required to build advisory text
    adv_data = {}
    adv_data["id"] = node_adv.getAttribute("id")
    adv_data["date"] = node_adv.getTagData("ReleaseDate")
    adv_data["severity"] = node_adv.getTagData("Severity")
    adv_data["title"] = get_localized_node(node_adv, "Title", options.language)
    adv_data["summary"] = get_localized_node(node_adv, "Summary", options.language)
    adv_data["description"] = get_localized_node(node_adv, "Description", options.language)
    adv_data["references"] = []
    adv_data["packages_up"] = []
    adv_data["packages_rm"] = []

    # Get references
    node_ref = node_adv.getTag("References")
    if node_ref:
        node = node_ref.getTag("Reference")
        while node:
            adv_data["references"].append([node.getTagData("Name"),
                                           node.getTagData("Link")])
            node = node.nextTag()

    # Get list of affected packages
    node_pck = node_adv.getTag("Packages")
    if node_pck:
        node = node_pck.getTag("Package")
        while node:
            if "Release" in [i.name() for i in node.tags()]:
                adv_data["packages_up"].append([node.getTagData("Name"),
                                                node.getTagData("Release")])
            else:
                adv_data["packages_rm"].append(node.getTagData("Name"))
            node = node.nextTag()

    # Build advisory text
    text = build_advisory(adv_data, _a)

    # Sign advisory
    if options.sign:
        gnupg = GPG()
        if options.sign not in [x["keyid"][-8:] for x in gnupg.list_keys(secret=True)]:
            print _("Key not found in GnuPG database.")
            print _("Available keys are:")
            for i in gnupg.list_keys(secret=1):
                print "  %s - %s" % (i["keyid"][-8:], i["uids"][1])
            return FAIL_KEY
        else:
            if not options.passphrase:
                options.passphrase = getpass(_("Passphrase: "))
            text_signed = gnupg.sign(text, options.sign, options.passphrase)
            if not str(text_signed):
                print _("Invalid passphrase.")
                return FAIL_PP
            else:
                text = text_signed

    if options.output:
        try:
            open(options.output, "w").write(text)
        except IOError:
            print _("Unable to write advisory text to %s") % options.output
            return FAIL_WRITE
    else:
        print text

    return SUCCESS

if __name__ == "__main__":
    sys.exit(main())

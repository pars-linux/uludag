# MSP Provider for postfix:
# This provider support LDAP, SMTP-AUTH, MYSQL-AUTH mboxDB's
# and MAILBOX, MAILDIR format store.

# Standart interface definitions

property	mspForEntry[mailbox_name=''] {
	get	{
		instance curr_mbox, curr_mboxdb;
		if (mailbox_name == "")
			abort;

		# get directory for 'postconf'

		bindir = COMAR:pkginfo.getPkgDir(appID=me.IID, path='usrsbin');
		
		# bindir can be changed our previous calling.
		# This is a race condition. COMAR can be handle and lock this dir 
		# while script/object is running..
		
		if (bindir)
			bindir = '/usr/sbin/';

		mbox_transport = grep_startif(exec=bindir+'postconf', pattern='mailbox_transport');

		if (mbox_transport != "") {
			# if mailbox_transport is set and no "local:*",
			# Postfix don't provide MSP functions..

			transport = getvalue(string = mbox_transport);
			# getvalue built_in function, get value part from 'VAR = VALUE" style lines..
			if (strstr(string = transport, pattern = 'local:') == 0)
				abort;
		}

		if (isdomainname(mailbox_name))	{
			# mailbox_name as a domain name e.g: @foo.bar
			# We find this domain is virtual domains.
			# Search it for mydomains
			mydomain = grep_startif(exec=bindir+'postconf', pattern='mydomain');
			if (strstr(string = mydomain, pattern = mailbox_name)) {
				makeinstance newmsp, "fromMBox";
				newmsp._Mailbox = mailbox_name;
				mspForEntry = newmsp;
				exit;
			}
			mydomains = grep_startif(exec=bindir+'postconf', pattern='mydestination', end_pattern = "\n");
			domains = getvalue(string = mydomains);

			foreach (num = domain in domains) {
				if (startwith(domain, '/')) {
					# a domain list from file..
					if (confdir == '') {
						confdir = COMAR:pkginfo.getPkgDir(appID=me.IID, path='config');
					}
					if (filesearch_line(file=domain, pattern=mailbox_name)) {
						makeinstance newmsp, "fromMBox";
						newmsp._Mailbox = mailbox_name;
						mspForEntry = newmsp;
						exit;
					}
				} elif (strstr(string=domain, pattern=':')) {
					proto = substr_left(string=domain, first=':');
					if (proto == 'hash') {
						if (filesearch_line(file=substr_mid(string=domain, first=':'), pattern=mailbox_name)) {
							makeinstance newmsp, "fromMBox";
							newmsp._Mailbox = mailbox_name;
							mspForEntry = newmsp;
							exit;
						}
					} elif (proto == 'ldap') {
						# Currently the time is 01:30.. This time
						# not a good time for write a ldap search routine..
						
					}
				}
			}
		}
	}
}

property 	_MailBox {
	set {
		instance mbox_name;
		mbox_name = _MailBox;
	}
	get {
		instance mbox_name;
		_MailBox = mbox_name;
	}
}

function 	getConfParameter(directive='') {
	alias	directive conf, parameter;	
	bindir = COMAR:pkginfo.getPkgDir(appID=me.IID, path='usrsbin');	
	value = grep_startif(exec=bindir+'postconf', pattern=directive, end_pattern = "\n");
	if (value != '') {
		getConfParameter = getvalue(string = value);
		exit;
	}
	abort;	# Return an error..
}

function	isVirtualDomain(name='') {
	domainpart = '@' + substr_mid(string=domain, first='@');
	vdlist = me.getConfParameter(directive="virtual_mailbox_domains");
	
}

property	object[appID=''] {
	get	{
		if (appID != me.IID)
			abort;
		object = me;
	}
}

property	mboxdb {
	instance curr_mbox, curr_mbox_provider;
	if (curr_mbox == '') {
		abort;
	}

}

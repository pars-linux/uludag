CISCP - COMAR Intra Session Communication Protocol.

COMARd, bir transaction'ı yerine getirmek üzere 4 aşamalı hiyerarşik bir session modeli kullanır. Görülen lüzum üzerine, her session ayrı birer process olarak çalıştırılmaktadır. Bu durumda oturumların merkezi yönetimini sağlamak üzere transaction boyunca yapılan tüm işlemler ortak düğümlere yayılırlar. Burada ortaya çıkan IPC gereksinimi için pipe kullanımı tercih edilmiştir.

Protokol iki ana pipe üzerine kuruludur. Bunlar pseudo fullduplex çalışma üzere birleştirilmiş tipik pipe() file descriptorleridir. Kanallardan ilki, COMMAND CHANNEL olarak kullanılır. Diğer kanal ise DATA CHANNEL olarak adlandırılır. Python pipe() implementasyonu uygun şekilde asenkron işlemektedir. Böylece sürecin otokontrolü daha emniyetli olarak sağlanabilir.

COMARd, bu işlevler üst düzey COMARPipe arabirimini sağlar. Bu sayede, IPC istekleri gerekli olduğu durumlarda pipe() yerine shmem, socket vs. yoluyla da yapılabilir. Böylece sistemin SENDMAIL benzeri bir heyula haline gelmesi riski durumunda, ilgili birimler daha küçük hale getirilerek multiplexed stdio, shmem, fifo vb. yöntemlerle çalışabilirler. Bu sebeple, IPC çağrılarının kapsüllenmiş arabirim üzerinden kullanılması uygun olacaktır.

CISCP işleyiş:
	CISCP Protokolü, Komut kanalından gelen komut ve gerekli durumlarda ilgili veriyi veri kanalından alan bir dizi komut ile yürütülür. Burada komutlar ASCII format olarak tanımlanmıştır. Buna mukabil, bu format gelecek versiyonlarda CONSTANT olarak kullanılabilmelidir. Bu sebeple, komutun kendisi yerine, ilgili constant'ın kullanımı gereklidir. Data Channel Binary veri taşıyabilir. Fakat, CMD Kanalında sadece ilgili ASCII komutlar taşınabilir.

	CISCP üzerinde, komutlar ve parametreleri birer boşlukla ayrılırlar. Tüm komutlar, komut kanalına yollanmadan önce başına 4 basamaklı paket boyunu, 8 hex basamaklı PID değerini pakete eklerler. PID, Process'in pid_t pid'i anlamına gelmez. PID, TA-MGR tablosunda sürecin kayıtlı olduğu adresi gösterir. Her session içersinde oluşan yeni process, parenti tarafından ivedilikle bu tabloya kaydedilir. Bu uygulama sayesinde gerektiği durumlarda kanal verileri için TA-MGR bir HUB olarak kullanılabilir. PID değerleri, bazı çağrılar için çağrının kaynağını, bazıları içinse hedef adresini gösterirler. PID Değerinden sonra gelen 4 Baytlık bölge ise RESERVED Durumundadır. Bu bölge TID olarak kullanılır. Herhangi bir alıcı kendine ulaşan mesaja cevap verirken aldığı paketteki TID değerini aynen geri döndürür.

	packetSize[4]
	PID[8]
	TID[4]
	CMD[packetSize - 12]

	CISP üzerinde tüm komutlar Datagram modundadır. Komutların hiçbirisi geriye bir "değer" dönüşünü beklemez. Sorgulama komutları, komutun alıcısı tarafından yollanan yeni bir komutla ilgili veriyi isteyen uygulamaya gönderir. Buna karşılık, alıcı her durumda komutu aldığını belirtmek üzere data kanalından "0004 OK " (" OK ", not " OK"), "0004 ERR", "0004 BAD", "0004 DTA" veya "0004 ADR" Bilgisini gönderir. "ERR" verinin alınamadığını, encode edilemediğini, "BAD" komutun geçersiz olduğunu, "DTA" Datanın geçersiz olduğunu ifade ederken, "ADR" ise komutun alıcısının yanlış/geçersiz olduğunu ifade eder. Bu cevaplar her zaman

	Data kanalından veri alışverişi ise paket tabanlı bir yapıya sahiptir. Data transfer komutları olarak bilinen komutlar yoluyla, bir paketle alınamayan uzunluktaki veriler, devam eden paketlerle alınırlar. Eğer bir komut beraberinde veri taşıyorsa, bu veri data kanalı üzerinden taşınır; komutun devamında data kanalında bulunan verinin offset, size ve toplam boyuna dair bilgi bulunur. Bu <size> bilgisi yanında Data kanalının ilk 4 baytı her zaman ASCII formda data kanalındaki verinin boyunu gösterir.

	Primitive Format:

	CISP üzerindeki tüm komutlar kanallar üzerinde CISP Opcodes denen formatta taşınırlar. Bu opcode'ların tamamında ilk 4 Bayt transmission encoding bilgisini taşır. 5. Bayt her zaman "_" işaretidir. Devamında max 15 karakter uzunluğunda komut kodu yeralır. Bu kodlar olabildiğince kısa tutulmaya çalışılmıştır.

	Bu 4 baytın anlamları şu şekildedir:

	CMD[0]		: Komut sınıfı.
					"D"	: Data transfer command. This commands can be processed internally on COMARPipe.
					"T"	: Transaction command.
					"S"	: TA State Set command.
					"I"	: IPC Control Commands.
					"M"	: Task Management Commands.
					"L"	: Session Internal/Session-Session Command.
					"E"	: Hata mesajları. Bu mesajın kod bölümü (E???_KOD) errno ile uyumlu değerleri sayı olarak ifade eder.
					"Q"	: Database Access Functions. Always root <-> Client.
					"N"	: Event subsystem commands.
	CMD[1]		: Data geçişi.
					"R"	: Read data from datachannel. Komutun devamında data yolundaki veriye dair bilgiler olmalıdır.
					"N"	: No data on data channel.
					"P"	: Parametrical command. Command have a string-ascii-8bit[32] parameter. No data on Data channel.
	CMD[2]		: PID Origin.
					"T"	: PID indicate Target process.
					"S"	: PID indicate Source process.
					"M"	: TA-MGR. PDI indicate TA-MGR PID. This PID only used Scope = "B" Broadcast packets.
	CMD[3]		: Scope
					"U"	: Unicast.
					"B"	: Broadcast.

	Tipik komut işleme süreci:
	if PID_Origin == "S"
		Check-opcode-part.
		If opcode-as-your-interest-command
			process-command
			if necessarry
				send-to-parent
			endif
		else
			send-to-parent
		endif
	elseif PID_Origin == "T"
		if PID == Your-pid
			process-command
			if necessarry
				send-to-parent
			endif
		else
			if PID-is-your-child
				send-to-child
			else
				drop-transfer-or-send-to-parent
			endif
		endif
	elseif PID_Origin == "M"
		process_command
		send-to-your-childs
	else
		this-is-invalid-packet-drop-it
	endif

	Komutlar:

	Komutların ham listesi için OPLIST.txt dosyasına, komutların sessionlara dağılımına göre hazırlanmış listelere ise "*_CMDS.txt" dosyalarına bakınız. Komutların OPCODE'a göre sıralı listesi ise OPLIST_SORTED.txt dosyasında bulunabilir. parsecmds.py uygulaması OPLIST.txt'den diğer dosyaları otomatik olarak oluşturmayı sağlar.


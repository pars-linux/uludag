COMAR Internals.

1. COMAR Startup states:

    a.	With COMAR-Awared system, COMAR Use a memory resident
	identifier for comar state. For ULUDAG Linux, this is
	a simple Kernel proc interface: /proc/comar/state.
	
	This file contain COMAR State:
	    if file is empty, COMAR go BOOTUP state..
	    if file content is;
		READY  - if a COMAR process runned as a daemon
			 COMAR run as a CLI interface.
			 Else, COMAR go to daemon mode and
			 process CLI..
			 
		BOOTUP:identifier - if a COMAR process runned 
			as a daemon, COMAR wait change this to
			READY. If defined (comard.conf) timeout
			reached, COMAR exit immediately 
		    
		SHUTDOWN:identifier - if a COMAR process runned 
			as a daemon, COMAR exit immediately.
			Else, COMAR go to daemon mode and continue
			shutdown.
			
	If no COMAR-Aware system, COMAR run as a CLI.
	
2. COMAR Initialization:

    After state check, COMAR process this tasks for daemon mode :
    
    a.	Initialize COMAR-API components.
    
	From "/usr/lib/comar/API/", comar find "api.*" files and import
	contained API calls for its.
	
	This is API initialization phase.
	
    b.	Initialize OM NameSpaces.
    
	From "/usr/lib/comar/OM/", COMAR search *.om.xml files.
	This files contain fixed XML trees for define OM trees.
	if COMAR Find a *.om.xml file, compare its timestamp 
	with *.om.cache. If *.om.xml is newest from cache, or
	*.om.cache not exist, COMAR create new cache. 
	
	COMAR use object lookup mechanism with only this cache.
	This cache files contains this record pattern:
	    
	For A.B.C.D task:
	
	HASH Value for A, A.B, A.B.C    
	ACL Setting for A, A.B, A.B.C
	DESCRIPTIONS for A.B.C.D
	Object Interface pattern for A.B.C.D
	Object Attributes for A.B.C.D
	
	This file uses hash values for "A.B.C..." form.
	
    c.	Create OM caches:
	
	OM NameSpace saved "/usr/lib/comar/OM/*.om.cache" caches.
	But, object registration add new files with this pseudo-static
	data:
	
	1. ObjPool:
	    *.om.objpool files contain objpool info. This info provide 
	    IID's for objects. 
	    
	2. ObjData:
	    *.om.objdata files contain IID's real code/data or URL for
	    this code/data. objhooks uses this info for load object.
	    
	3. ObjEvents:
	    *.om.trigger files contain object access event data.
	    all records uses this pattern:
	    
	    key = OMNodeID "\" POST|PRE
	    data = CANBLOCK|NOBLOCK "\" OMName ":" OMNodeID "\" IID
	    	    
	4. ObjInstance:
	    *.om.idata contain instance oriented data for use with
	    "saveInstanceData" call.
	    *.om.idata-hot contain small but memory cached data. 
	    
	5. ObjPersistData:
	    *.om.pdata files contain object persistent data. Access 
	    method is "savePersistentData"
	    *.om.pdata-hot contain small but memory cached data. 
	
	6. OMStatistics:
	    *.om.stats files contain OM access info. This files refreshed
	    scheduled time/shutdown/bootups. OMStatistics appended a log 
	    file. 
	
	For attachObject/removeObject etc. calls, this files manipulated.
	And accessing this data is slow. This reason especially bad for 
	shutdown/bootup and many time UI-Sourced processing. 
	
	For solve this problem, COMAR use a hot-object cache. This cache
	contain three area:
	
	1. hot-data: If a request occurred for marked 'mode="HOT-CACHE"'
		     object, COMAR read all object persistent/instance 
		     data for all HOT-CACHE marked objects.
		     
	2. LRU Cache: COMAR save access statistics for objects and IID's.
		      Every reload or reconfiguration call for COMAR, 
		      COMAR lookup this statistics and load recently used
		      and frequently used objects to this cache. 
	
	3. Last Used Objects: COMAR save last used objects to this cache.
	
	LRU Cache and LUO Cache parameters configured with comard.conf.
	
    d.	Initialize Collectors:
	
	Collectors standart mechanisms for COMAR access. Collectors can 
	be have special initializations. But, COMAR create and initialize
	owned Collector-API. This API a simple Multithread FIFO and IPC
	mechanism.
	
	
	
	
	    
	    
	
	
	
	
	
	
		    
	    
	
	
	
    
    
    
    
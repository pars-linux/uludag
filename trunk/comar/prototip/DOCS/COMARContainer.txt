COMAR Container Object.

COMAR, Configure by Objects, Modify & Restart

In COMAR all abstract tasks provided a Task Tree. All Tree items provides
an object container. Tools contain an object and insert its to this 
container. 


Container provide Tree-Oriented functions. 

ACL Usage:

    COMAR Containers must have one or more ACL items. ACL items 
    define object's accessibility. ACL items defined in CHAINS.
    
    COMAR ACL Chains:
    
	USER	: Define Users. NOBODY define unknown user, ALL
		  define all known users.
		  
	GROUP	: Define groups. NOBODY define unknown group, ALL
		  define all known groups.
		  
	ISADMIN	: Is user defined as this an admin of resource. 
		  
	OBJECT	: Caller Object's Name. 
		  UI, defines User Interface, immediately.
		  
	SOURCE	: COOPERATIVE, LOCAL, GLOBAL, or host address. 
		  COOPERATIVE, as comar.conf, many networks can be 
		  marked as "COOPERATIVE". This show full access 
		  from this LAN.
		  LOCAL, defines current HOST. 
		  GLOBAL, any host from anywhere, typically Internet.
		  host address, defined with:
		    IP=a.b.c.d[/netmask]
		    IPV6=a:b:c:d:e:f:g:h[/netmask]
		    IPX=a:b
		    MAC=a:b:c:d:e
		
	CARRIER	: DATAGRAM or CONNECTED. 
		  DATAGRAM, indicate single-way carrier.
		  CONNECTED, indicate in/out carrier.
		  
		  DATAGRAM define unsured sources, such as e-mail, UDP..
		  CONNECT define SOURCE is really okay..
		  
	CALLER	: Caller object. 		  
	
	
    Defining ACL's:
    
	ACL Definition format
	
	[QUICK] <ALLOW | DENY> [NOT] <CHAIN='value'> 
	<POLICY> <ALLOW | DENY>
		  
	Such as:
	
	POLICY ALLOW
	    Accept all request, if not denied previously.
	    
	ALLOW USER=Serdar
	    Accept request form Serdar.
	 	  
	DENY SOURCE=GLOBAL
	    Deny request coming from global network.
	    
	ALLOW ISADMIN=STORAGE
	    Allow request from STORAGE Admin User(s)
	    
	DENY CARRIER=DATAGRAM
	    Deny requests from UDP, e-mail..
	    
	ALLOW SOURCE=IP=212.174.154.128/24
	    Allow requests from this network.
	    
	ALLOW CALLER=UI
	    Allow User Interface requests.
	    
	ALLOW CALLER=NS:A.B.C
	    Allow calls from NS:A.B.C and child nodes.	    
	
	NOT, define "not" operator. QUICK, immediately process request.
	
	ACL Processing can be done this way:
	
	1. Request marked with "POLICY" definition.
	2. Compare declared ACL's. If match, its mark changed new state.
	   If matched ACL have a "QUICK", this policy immediately applies.
	   
	3. On exceed Last ACL definition, request policy applies.
	
	Generally, this ACL set defined with COMAR-OM configuration. 
	You don't want change this settings, but if you have special 
	requirements, then you can set this ACL's. 
	
	This ACL settings cannot effect global COMAR access restrictions.
	

COMAR Objects.
	
Parameter Passing:
	
	All parameters must be passed as an array. This Array Format 
	language dependent. For C/C++ this array as a linked-list with
	this format:
	
	typedef struct _COMARPrmType COMARPrmType;
	struct _COMARPrmType {
	char	*name;
	char	*type;
	void	*data;
	COMARPrmType	*next;
	};
	
	type, can be must "NUMERIC", "STRING", "OBJECT" or "ARRAY".
	
	NUMERIC	: data contain string represantion of number.
	STRING  : data contain a COMAR String value.
	          
	struct COMARString {
	char	*encoding;	// ASCII, ISO8859..., UTF-8
	size_t	size;		// String Size.
	char	*string;
	}
	
	OBJECT	: Data Contain a COMAR Object Instance Data.
	
	struct COMARObjInstance {
	char	*name;		// Object Name. NS:A.B.C Format, ASCII
	void	*instanceId	// InstanceId, opaque data for you..	
	}
	
	ARRAY	: Data contain an array defined with linked list.
	
	typedef struct _COMARArray COMARArray;
	struct COMARArray {
	char		*key;
	unsigned int	instance;  // don't use, reserved for future				   
	char		*type;	   // See Above definitons..
	void		*data;
	COMARArray	*next;
	}
	
	For Python, parameters passed as a list of dictionaryes.
	
	[ { 'parameterName':COMARValue }, ... ]
	
	All COMAR->Obj(CSL) or Obj(CSL)->COMAR calls always
	define this array as parameter list.
	
	COMARValueObject, defined in module COMARValue.py:
	
	COMARValue.type : Type of value.
	COMARValue.data : Value.
	
	if COMARValue.type == "string",
	   COMARValue.data = COMARString
	      COMARString.encoding
	      COMARString.value
	     
	if COMARValue.type == "numeric",
	   COMARValue.data = value of item.

	if COMARValue.type == "array",
	    COMARValue.data = array's first element, COMARArrayItem
		COMARArray.Key = Key for array item index
		COMARArray.Instance = Instance value for array item index 
				      (reserved, always zero currently)
		COMARArray.item = COMARValue
		COMARArray.next = Next array entry, None for last entry.
		
	if COMARValue.type == "object",
	   COMARValue.data = COMARObjectDescriptor
	      COMARObjectDescriptor.name = name of object.
	      COMARObjectDescriptor.instance = instance id of object.
	      
	   Normally, Object passing not required general parameter
	   passing. But many API calls can be return an object id.
	   You must assume Object Descriptor content is opaque data.
	   
	   Sample usage:
	      obj = SlicerAPI(filename = "foo.txt");
	      regex = obj.setREGEX("\.bat$");
	      
	      In this sample, 'obj' is a COMAR Object. Your next
	      call is contain a Object. Your next calls, call this
	      object.
	      
	      COMAR Objects, completely indepedented from CSL or 
	      other CSL OM Space calls. From CSL OM Space, you 
	      must always use this object as a reference. 
	      
	    
	C/C++ utility codes/objects currently not available.
	
	For PERL, STDIO etc. CSLUtils provide a XML Represantion
	for passed arguments. 
	
	You don't forget, COMAR-OM Space, can only accept CSL scripts.
	Your own objects must be placed APP, CAPI etc. NameSpaces..
	
Return Values:
	Function/method/property call return values always a 
	COMARRetVal object. This object defined in COMARValue.py.
	
	execResult	= 0 if execution normally finished.
			  1 if execution terminated with (abort)
			  2 called entry not available.. 
			  CSL Codes only return 0 or 1. 
			  execResult = 2 returned from objHook.
			  
	returnValue	= COMARValue object, contain return value
			  for executed code..
	
	
Object Instances with CSL:
	COMAR objects theorically writable in any language. But, currently
	only CSL Language Handler is written.
	
	A COMAR object must be compatible COMAR Object calls. Object 
	Instance data always saved by COMAR. This restriction make 
	difficult writing objects in other languages. But, system 
	persistency and reliability always guarenteed with this way.
	
	First Look, this a big problem for object coder. But, generally,
	process is very easy. Your instance data can be inside a conf file,
	regular file etc., normally. Such as, if you write a network 
	interface object, your all data placed with interface information.
	Your instance ID can be 'eth0', that's ok, may be..
	
	For instance accepted objects, your class definition must have
	two special function. This short manual only describe CSL way for
	instance creating. 
	
	persistent directive:
	    
	Format:
	    persistent variable, variable, ...;
	    
	    if you declare one or more persistent directive, your declared 
	    variables saved your instance data. For your next call, 
	    all data automatically retrieved.
	    
	instance directive:
	
	Format:
	    instance variable, variable, ...;
	    
	    if you declare one or more instance directive, your declared
	    variables shared with other object method, function and
	    property code. 
	    
	makeinstance command:
	
	    makeinstance object, "identifier", autodestroy;
	    
	    makeinstance, create your new instance. Your all persistent and
	    instance variables copied to new instance namespace. But, your 
	    code continue with next command and current instance variables.
	    object is set your instance identifier object. New object's 
	    instance name is set as "identifier". If autodestroy is true,
	    on your references is removed, your instance destroyed. 
	    
	    You can define a "__destroy()" method, for deconstructor.
	    
	destroy command:
	
	    destroy [identifier];
	    
	    if you use destroy command, your instance destroyed and all
	    your instance data removed. If you don't use identifer, 
	    current instance destroyed. 
	    
	Sample:
	
	
	method up() {
	    instance ifc_name;
	    
	    exec(file="ifconfig", parameters=ifc_name + " up");	    
	}
	
	function new(name = "", type="") {	
	    instance ifc_name, ifc_MTU, ifc_MAC ;
	    
	    if (name=="") 
		abort;
	    
	    if (type != "ethernet") 
		abort;
		
	    ifc_MAC = GetMACAddress(interface=name);
	    ifc_MTU = 1500;
	    ifc_name = name;
	    auto_destroy = "n";
	    makeinstance newifc, name, auto_destroy;	    
	    newifc.up();
	    new = newifc;	# return newifc object..
	}
	
	After create new instance, you can set it to your return value.
	
	If this object defined with node: "Network.interface", other
	objects (and GUI etc.) can be reach with your new object:
		
	....
	....
	
	Network.Interface.new(name = "eth0", type="ethernet");
	
	...
	...
	
	Network.Interface["eth0"].down();
	
	
	if your object referenced with a variable, variable hold your
	instance identifier(s) directly. Don't forget, you not alone.
	If container have multiple objects and many objects can be
	set new instances with same name. 
	
	a = Network.interface["eth0"];
	
	"a", contain a reference list of "Network.interface" objects
	with instance name is "eth0". 
	
	a.up();
	
	Call, all Network.interface["eth0"] objects's up() method.
	And, respectivelly, if your new instance maked with
	
	makeinstance foo, bar, "y";
	
	variable "a" deleted (end-of-code) or changed, your instance
	automatically destroyed and your "__destroy()" method called
	once, if defined..
		
	For solve race conditions, you can define unique identifier
	for your new instance. COMAR-API provide a function 
	"uniqueid()". This function return a random but %100 
	guaranteed unique string. This method usable with on-the-fly
	objects. Such as parser codes, file operations etc..
	
	method runMime(file="") {
    	    mime = MIMEHandlers.GetViewer(mimetype="text/plain");
	    mime.run(file="COMAR.txt");
	}
	
	on exit from method runMime, "mime" erased and contained 
	object automatically destroyed..

	Another object creation method called as "make node". This
	method don't create an object and no return an object instance. 
	This method make a new OM node class/object and register it to 
	original node. But OM Container can ignore this call for conflict
	with OM Node attribute "MULTIINSTANCE".
	
	register command:
	    
	    register object;
	    register command re-register object to its own OM node.
	    All instance variables copied with 
	
		
Searching an object from properties:
	CSL Provides a powerfull mechanism for selecting objects for 
	its any property. You can select one or more objects with its
	property values.
	
	For object in COMAR:foo.bar
	    property prop {
		get {
		    prop = 5;
		}		
	    }
	
	You can use select() CSL Function for search an object with having
	special property value:
	
	    obj = select(node = "foo.bar", property = "prop", value = 5);
	    
	select() function execute all foo.bar objects "prop" property and 
	return only then this property value as "5". 
	
	For low level access, this function implemented with "iterate" calls
	on COMAR Container. "iterate" call always run and return all values of
	called property. Normally, COMARContainer run method look iteration
	mode for specified node.

	
Using nsAPI:
	nsAPI, namespace oriented low-level API for using COMAR 
	objects. nsAPI contain this sub sections:
	
	CAPI	: Base system calls and extensible API functions. 
		  This API contain parser API's, SlicerAPI etc.
		  		  
	IAPI	: Provide basic data storage API. CSL uses this
		  for save persistent and instance variables..
		  
	NS	: NameSpaces.
		  For standart COMAR task calls contain three
		  items:
		  Sample Task: 
		    NS:ROOT.NODE.OBJECT
		    NS		= NameSpace for task.
		    ROOT	= Root item for task.
		    NODE	= One or more branch for task.
		    OBJECT	= Requested Task.
		    
		  Your calls for task from NS's, you track this
		  way:
		  
		  1. Get NS Entry exist for nsAPI
		  
		      entry = nsAPI['NS']['NS:ROOT.NODE.OBJECT']
		      if entry is None, this Function not available
		         for you (permissions etc..)..
		      
		  2. Get Task Entry for nsAPI:
		      TaskEntry = entry['PropertyGet']
		      TaskEntry = entry['PropertySet']
		      TaskEntry = entry['Method']
		      TaskEntry = entry['Function']
		      
		     entry index parameters case-insentive.
		     
		     if TaskEntry is not None, you call this
		     entry with parameter list and a routine id.
		     
		        TaskEntry(prmlist)
			
		     This call return a COMARRetVal. But,
		     execResult always is zero (0)..	         

nsAPI Items:
	'CAPI'		: CAPI Defined functions list. 
			  Form:
			  'CAPI':{'funcName':CAPIFunction, ...}
			  CAPIFunction prototype:
			  
			  CAPIFunction(name, prmlist)
			  
			  name, name for called function
			  prmlist, a dictionary (for Python)
			    has 'parameterName':COMARValue form.
	    			  
			  CAPIFunction, provided in COMARContainer.
			  COMARContainer adds required items such as
			  callerInfo etc..
    CAPI Calls:
    
	CAPI, provide low-level functions, base math functions etc.
	Warning: 
	    This functions can be provided with COMAR or CSL interpreter.
	    
	
	int(value = 'expression')
	    return integer part of expression
	
	rnd()
	    return a integer random value.
	
	strupper(string = 'string')
	    return uppercase version of string. Localized.
	    
	strlower(string = 'string')
	    return lowercase version of string. Localized.
	    
	startwith(string='string', prefix='prefix')
	    if string started with prefix, return 1
	
	endwith(string='string', trailer='trailer')
	    if string ended with trailer, return 1
	    
	casestartwith(string='string', prefix='prefix')	
	caseendwith(string='string', trailer='trailer')

	    Similar to startwith, endwith. But, not case
	    sensitive.
	    
	join(array='strarray', concat='char')
	    concatenate all items of 'strarray' with insert 
	    'char' on using as as separator.
	    
	split(string='string', separator='sepchar')
	    return an array for 'string' parsed with 
	    'sepchar'. 
	    
	find(string='string', pattern='pattern')
	    return position for pattern position on string.
	    0, not found, 1 = First char...
	    
	casefind(string='string', pattern='pattern')
	    Similar to find, but not case-sensitive.
	    
	insert(string='string', position='pos', 
		part='newpart', replace=0)
	    insert 'newpart' to 'pos' of string. 
	    if replace=0, old position string not 
	    changed, elsewhere, replace count char deleted.
	    
	    insert(string='ABCDEF', position=2,
		   part='123', replace=0)
		   
		   return -> 'A123BCDEF'
		   
	    insert(string='ABCDEF', position=2,
		   part='123', replace=2)
		   
		   return 'A123CDEF'
	
	strlen(string = 'string')
	    return size of string.
	    
	part(string='string', start='start_pos',
	     size='size')
	    return string's part of started with
	    'start_pos' and 'size' portion.
	    
	    if size = 0, return to end-of-string.
	    
	rpart(string='string', start='start_pos',
	     size='size')
	    return string's part of started with
	    'start_pos' and 'size' portion, but 
	    start_pos is counted from end-of-string.
	    
	iconv(string='string', from='encoding', to='encoding')
	    convert string (Encoded with from-encoding) to
	    to-encoding format. UTF-8, html, url can be useable.
	    
	typeof(var='variable')
	    Return type identifier for 'variable'
	    n -> numeric, s -> string, a -> array
	    o -> object, z -> NULL

			  
	'IAPI'		:
	
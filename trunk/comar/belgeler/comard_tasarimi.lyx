#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble
\tolerance 10000
\usepackage{hyperref}
\end_preamble
\language turkish
\inputencoding auto
\fontscheme pslatex
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

COMARd Tasarýmý
\layout Author

Serdar Köylü, A.
 Murat Eren, Gürer Özen
\layout Standard
\pagebreak_bottom 

\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Görev
\layout Standard

COMAR mimarisi içinde, COMAR yürütücüsünün (COMARd) görevleri: kullanýcý
 grafik arayüzü (KGA), COMAR destekli uygulamalar, uzak COMARd, ve çeþitli
 araçlar gibi yerlerden gelen istekleri
\layout Itemize

Almak,
\layout Itemize

Yetki doðrulamasý yapmak,
\layout Itemize

Ýsteðin yerine getirilmesi için gereken nesneleri baþlatmak,
\layout Itemize

CSL nesnelerini ayrýþtýrýp çalýþtýrmak,
\layout Itemize

Uzak nesnelerin çalýþtýrýlmasý için gereken iletiþimi saðlamak,
\layout Itemize

Nesnelerin ihtiyaç duyacaðý alt düzey sistem ve ayar dosyasý eriþimlerini
 saðlamak,
\layout Itemize

Nesnelerin kalýcý (persistent) deðerlerini profil bazýnda tutmak,
\layout Itemize

Nesneler üzerindeki deðiþiklikleri, ilgilenen diðer nesnelere iletecek olaylar
 oluþturmak,
\layout Itemize

Baþlatýlan iþleri takip etmek,
\layout Itemize

Bekleme durumunda olan iþleri uyutup uyandýrmaktýr.
\layout Standard

Bu istekler temel olarak
\layout Itemize

Modeldeki bir nesne üzerinde bir iþlem yapýlmasýný isteyen OM çaðrýlarý,
\layout Itemize

Bu çaðrýlardan dönen yanýtlar,
\layout Itemize

Bir olayýn gerçekleþtiðini bildiren çaðrýlar,
\layout Itemize

Baþlatýlan iþlemlerin durumuyla ilgili sorgu ve iptal çaðrýlarý olarak sýnýfland
ýrýlabilir.
\layout Section

Gereksinimler
\layout Subsection

Yürütücü Gereksinimleri
\layout Standard

Ayný anda gelen istekler, nesnelerin ayný anda iþletilmesini gerektirecektir.
 Ýþletilmekte olan bir nesne, modeldeki diðer nesnelerden istekte bulunabilir.
 Belli bir görevi yerine getiren birden fazla nesne olduðunda, bunlarýn
 ayný anda çalýþtýrýlmasý, sistemin týkanmasýný ve gereksiz yere yavaþlamasýný
 önlemek için gereklidir.
 Bu nedenlerden dolayý, nesnelerin baðýmsýz süreçler olarak iþletilebilmesi
 gerekecektir.
 Bu gereksinim CSL dilinin koþutzamanlý (concurrent) çalýþma modeli ile
 de örtüþmektedir.
\layout Standard

Ýþletilecek nesnelere baktýðýmýzda üç ana grup görüyoruz:
\layout Enumerate

CSL yorumlayýcýsý tarafýndan yürütülen, CSL ile yazýlmýþ yerel nesneler,
\layout Enumerate

Bir baðlantý modülü yoluyla uzak COMARd'ye yürüttürülen uzak nesneler,
\layout Enumerate

COMARd'nin kendisi tarafýndan saðlanan; nesne modeline nesneler yerleþtirip
 çýkarmak, kullanýcý yetkilerini ayarlayýp sormak gibi iþlemleri yapan nesneler.
\layout Standard

Bu nesneleri iþletecek modüller birer süreç olarak çalýþacaðýna göre, bunlarý
 takip edecek bir yöneticiye gerek vardýr.
 Bu yönetici, bir nesne çaðrýsý için, ilgili görevi saðlayan nesneleri,
 tiplerine uyan iþletici modüller ile çalýþtýracaktýr.
\layout Subsection

Dýþ Ýletiþim Gereksinimleri
\layout Standard

Ýstekler COMARd'ye farklý yollardan ulaþabilirler.
 Yerel baðlantýlar için unix socket, dbus gibi aktarým protokolleri uygun
 gelirken, uzak baðlantýlar için http, ssh gibi protokoller, hatta e-posta,
 SMS gibi iletiþim metotlarý lazým olabilir.
 Sürekli baðlantý deðil, datagram aktarabilen protokoller ve isteklerin
 geliþ ve dönüþ yollarýnýn farklý olabileceði durumlar da göz önüne alýnmalýdýr.
\layout Standard

Birden fazla iletiþim metodunu destekleyebilmek için, COMARd içinde bir
 RPC bileþeni ve bu görevi yerine getiren iletiþim modülleri gerekecektir.
 Yetki denetimi için gerek kimlik doðrulama iþlemi bu modüllerin görev alanýna
 girmektedir.
 Her protokolün kendine göre doðrulama mekanizmalarý vardýr.
 Örnek olarak unix socket kullanýldýðýnda dinleyici soketi açan process'in
 hangi sistem kullanýcýsýna ait olduðunu bulabilir.
 Uzak baðlantý protokolleri ise TLS, SASL gibi kendi þifreleme ve kimlik
 doðrulama mekanizmalarýna sahiptir.
\layout Standard

Bir kullanýcýnýn birden fazla istekte bulunabileceði gözönüne alýnýrsa,
 iþ takibi için bu istekleri birbirinden ayýracak bir mekanizmaya gerek
 vardýr.
 Ýstekler ve yanýtlarýn doðru yere ulaþmasý için her modülün, çaðrýlarla
 birlikte her çaðrýnýn hangi isteðe ait olduðu bilgisini taþýmasý gerekecektir.
\layout Standard

Ýletiþim protokolünün bekleme durumlarý COMARd iþleyiþini týkamamalýdýr.
 Bunu saðlamak için her modülün kendi içinde ayrý süreçler olarak çalýþmasý,
 COMARd ile baðlantý için non-blocking iþlevler kullanmaya dikkat etmesi
 gerekecektir.
\layout Standard

Sonuç olarak her bir RPC modülünün saðlamasý gerekenler:
\layout Itemize

Bir COMARd çaðrýsýný sarýp hedefine ulaþtýrabilmek,
\layout Itemize

Dýþardan gelen sarýlmýþ çaðrýlarý alýp COMARd'ye verebilmek,
\layout Itemize

Çaðrýlarýn kimden geldiði (kimlik doðrulama), hangi isteðe ait olduðu bilgilerid
ir.
\layout Subsection

Performans Gereksinimleri
\layout Enumerate

Yapýlandýrma iþlemleri sistemde sürekli ve sýk bir biçimde yapýlmamaktadýr.
 COMARd'nin yapacaðý iþler azaldýðýnda ya da iþ olmadýðýnda minimum kaynak
 kullanýmýna geçebilmesi verimi arttýracaktýr.
\layout Enumerate

Bununla birlikte özellikle açýlýþ esnasýnda bir sürü iþlem yapýlmaktadýr,
 bu iþlemler birbirlerinden baðýmsýz olduklarý, aralarýndaki baðýmlýlýklar
 çok az olduðu için paralel çalýþtýrýlmalarý büyük hýz kazancý saðlayacaktýr.
\layout Enumerate

Ýsteklerin paralel yürütülebilmesi, kullanýcýnýn interaktif iþlemlerine
 çabuk yanýt verebilmek için de önemlidir.
\layout Subsection

Güvenlik Gereksinimleri
\layout Enumerate

COMARd, elindeki nesnelerle sisteme kullanýcý eklemek, alt düzey ayarlarý
 deðiþtirmek gibi iþlemler yapabilmekte ve bu iþlemleri baþlatabilmek için
 yüksek yetki seviyesinde çalýþmaktadýr.
 Güvenlik açýklarýna yol açmamak için, gelen isteklerin kimin adýna yapýldýðý
 saptanmalý ve istekte bulunan kiþinin bu iþlemi yapmasýna izin verilip
 verilmediði mutlaka kontrol edilmelidir.
 Ýsteklerin kontrole girmeden yanlýþlýkla yürütücü kýsma geçmemesi gereklidir.
\layout Enumerate

Nesnelerin içinden gelen istekler de tekrar yetki doðrulamaya sokulmalý,
 doðrulamadan geçmeden direk olarak diðer nesnelere eriþime izin verilmemelidir.
\layout Enumerate

COMARd'nin istek takip ve yürütme mekanizmalarýnýn kötüye kullanýlarak kaynak
 harcamasýna yol açmamasý için, sistem, kullanýcýlar ve anonim istekler
 bazýnda kaynak limitleri konulabilmelidir.
\layout Section

Tasarým
\layout Subsection

Bileþenler
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename comard-mimari.eps
	clip
	subcaptionText "COMARd SÃ¼reÃ§ BileÅŸenleri"

\end_inset 


\layout Caption

COMARd Bileþenleri
\end_inset 


\layout Subsubsection

Manager
\layout Standard

COMARd çalýþtýrýldýðýnda devreye giren ilk süreçtir.
 Hazýrlýklarýný tamamladýktan sonra, iþletilecek nesne modeli tanýmlamalarýný
 yükler, RPC modüllerini baþlatarak dinlemeye geçer.
 RPC'den gelen istekler için birer Job süreci baþlatýr.
 Sorumluluklarý:
\layout Itemize

RPC modüllerinin çalýþtýrýlmasý.
\layout Itemize

Job oturumlarýnýn çalýþtýrýlmasý.
\layout Itemize

Ýstek takibi (Transaction Manager).
\layout Itemize

Nesne modelinin yönetimi (yeni nesneler eklenmesi, ACL deðiþiklikleri, vs)
 ve deðiþikliklerden OM Driver'larýn haberdar edilmesi.
\layout Subsubsection

RPC
\layout Standard

Ýletiþim kanallarýný dinler, gelen istekleri kimden geldiðini doðruladýktan
 sonra Manager'a iletir.
\layout Subsubsection

Job
\layout Standard

Bir isteði takip eder, gerekli nesne modeli çaðrýlarý için OM Driver süreçleri
 oluþturur.
\layout Subsubsection

OM Driver
\layout Standard

Kendisine verilen bir nesne çaðrýsýný denetler, yetkiler tamamsa, sýrasýyla
 öncül (PRE) nesneleri, ilgili çaðrýya ait nesneleri, ve ardýl (POST) nesneleri
 birer Exec süreci olarak çalýþtýrýr.
\layout Subsubsection

Exec
\layout Standard

Verilen çaðrýnýn hedef nesnelerini ilgili Object Hook ile bir süreç baþlatarak
 iþletir.
\layout Subsubsection

Object Hooks
\layout Standard

Bir çaðrýyý implemente eden nesneleri çalýþtýrýrlar.
 CSL betikleri için CSL VM, uzak nesneler için bir iletiþim Hook'u, ve COMARd
 tarafýndan yerine getirilecek dahili iþlevler için gömülü modüllerden oluþur.
\layout Subsection

Ýþleyiþ
\layout Standard

Süreç yönetiminin basit olmasý, ve istendiðinde COMARd iç bileþenlerinin
 ayrý programlar/modüller haline getirilebilmeleri için bileþenlerin thread
 olarak deðil process olarak çalýþtýrýlmasý ve birbirleriyle bir iç iletiþim
 mekanizmasý (IPC) yoluyla haberleþmeleri seçilmiþtir.
\layout Standard

Process'ler Linux üzerinde copy-on-write metodu ile açýlmakta olduklarýndan,
 bir bileþenin kendi altýndaki bileþenleri fork() çaðrýsý ile açmasý kaynaklar
 açýsýndan düþük maliyetli olacaktýr.
\layout Standard

CSL VM modelde en alttaki Object Hook bileþeni olarak iþlemektedir.
 Bununla birlikte bir CSL betiði içinden diðer bir nesneye çaðrý yapýldýðýnda
 OM Driver'ýn fonksiyonalitesine ihtiyaç duyacaktýr.
 Ayný iþlevlerin birden fazla yerde tekrar edilmemesi, ve süreçlerin iç
 içe çoðalarak kontrolden çýkmamalarý için böyle bir durumda alttaki bileþenin
 üstteki bileþene IPC yoluyla haber verip, yeni çaðrýnýn sürecini baþlatmasýný
 ve takip edip sonucu geriye bildirmesini istemesine karar verdik.
\layout Subsection

Ýç Ýletiþim (IPC)
\layout Standard

Process'ler fork() edildiklerinde ana process'in deðerlerini aynen almakta,
 daha sonra ise deðiþtirdikleri deðerleri kendi adreslemeleri içindeki ayrý
 yerlere yazmaktadýr.
 Birbirlerine bilgi aktarabilmeleri için bir mekanizma gerekmektedir.
 Bu mekanizma, ana ve çocuk process arasýnda iki yönlü bilgi aktarabilmeli,
 ve iþlemleri týkamamak için asenkron olarak çalýþabilmelidir.
\layout Standard

Mevcut IPC mekanizmalarý arasýndan pipe kullanýmýna karar verdik.
 Bir ana ve çocuk process arasýnda iki ana çift yönlü pipe olacaktýr.
 Bunlardan ilki komut kanalý, ikincisi veri kanalý olarak iþ görecektir.
\layout Subsection

Dýþ Ýletiþim (RPC)
\layout Standard

COMARRPCData, COMARd uygulamasý ile yapýlacak haberleþme için kullanýlan
 alt düzey veri yapýsýdýr.
 Bu yapýnýn daha üst düzey tiplere çevrilip kullanýlmasý tavsiye edilir.
 Bununla beraber, COMARd ve çevresindeki modüller her zaman bu veri formatýný
 kullanýrlar.
 Bu veri formatýný kullanmak için COMARValue formatýnýn anlþaýlmýþ olmasý
 gereklidir (FIXME: COMARVal ile ilgili bir section olmalý).
 COMARRPCData yapýsý aþaðýdaki gibidir:
\layout Description

RPCVersion\SpecialChar ~
(
\emph on 
string-ascii-8bit[8]
\emph default 
): Bu yapýnýn versiyonunu gösterir.
 Þu anda 1.0 olmalýdýr.
\layout Description

RPCTTSID\SpecialChar ~
(
\emph on 
string-ascii-8bit[255]
\emph default 
): Bu çaðrýnýn transaction track ID'sini ihtiva eder.
 Bu deðer RPC isteðini yapan sistem çapýnda her iþlem sekansý için yeðane
 olmalýdýr.
\layout Description

RPCEOLTime\SpecialChar ~
(
\emph on 
numeric
\emph default 
): UNIX Time türünde bu çaðrýnýn en son hangi tarihe kadar cevaplanmasý
 gerektiðini belirtir.
 Eðer 0 ise, çaðrýyý yapan bu iþlevi polling ile sorgulayabilir, alýcý iþlem
 sonucuna dair bilgiyi asla çaðýrana geri yollamaz.
\layout Description

RPCPriority\SpecialChar ~
(
\emph on 
string-ascii-8bit[32]
\emph default 
): Bu çaðrýnýn (recommended) iþlenme önceliðini gösterir.
\begin_deeper 
\layout Description


\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="block" valignment="top" width="12page%">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
NORMAL
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

: 
\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
Normal iþlenme sýrasý
\end_inset 
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
URGENT
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

: Bu ç
\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
aðrý acil olarak iþlenmelidir
\end_inset 
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

INTERACTIVE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

: 
\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
Bu çaðrý interactive bir iþlem için kullanýlmaktadýr.
\end_inset 
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DONTCARE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

: 
\family roman 
\series medium 
\shape up 
\size normal 
\emph off 
\bar no 
\noun off 
\color none
Bu çaðrýnýn cevabý her hangi bir zamanda geri alýnabilir.
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_deeper 
\layout Description

RPCType\SpecialChar ~
(
\emph on 
string-ascii-8bit[32]
\emph default 
): RPC türü.
\layout Description

RPCData: RPC türüne baðlý olarak hazýrlanmýþ veri.
 RPC türleri aþaðýdaki altbaþlýklardan herhangi birisi olabilir.
 Bu durudma beklenen ya da dönen RPCData verisinin türü aþaðýda açýklandýðý
 formatlara istinaden deðiþir.
\layout Subsubsection

OMCALL
\layout Standard

RPCData içeriðinde belirtilen formatta bulunan COMAR OM çaðrýsýnýn yerine
 getirilmesini saðlar.
 Eðer RPCType OMCALL ise, RPCData þu þekilde beklenir:
\layout List
\labelwidthstring 00.00.0000


\series bold 
RPCData
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
type
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[255]
\emph default 
): Çaðrý türü
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

propertyset
\layout List
\labelwidthstring 00.00.0000

propertyget
\layout List
\labelwidthstring 00.00.0000

method
\end_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
name
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[255]
\emph default 
): Çaðrýlan iþlevin adý.
\layout List
\labelwidthstring 00.00.0000


\series bold 
index
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[255]
\emph default 
): Çaðrýlan iþlev için index/instance deðeri.
\layout List
\labelwidthstring 00.00.0000


\series bold 
parameter
\series default 
\SpecialChar ~
(
\emph on 
array
\emph default 
): Parametre listesi.
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

name\SpecialChar ~
(
\emph on 
string-ascii-8bit[255], index/key
\emph default 
): Parametrenin adý
\layout Standard

value (
\emph on 
COMARValue
\emph default 
): Parametrenin deðeri
\end_deeper 
\end_deeper 
\layout Subsubsection

OBJCALL
\layout Standard

RPCData içeriðinde belirtilen formatta bulunan nesne çaðrýsýnýn yerine getirilme
sini saðlar.
 Eðer RPCType OBJCALL ise, RPCData þu þekilde beklenir:
\layout List
\labelwidthstring 00.00.0000


\series bold 
RPCData
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
object
\series default 
\SpecialChar ~
(
\emph on 
COMARObject
\emph default 
)
\layout List
\labelwidthstring 00.00.0000


\series bold 
type
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit
\emph default 
)
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

propertyset
\layout List
\labelwidthstring 00.00.0000

propertyget
\layout List
\labelwidthstring 00.00.0000

method
\end_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
name
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit
\emph default 
): Çaðrýlan iþlevin adý
\layout List
\labelwidthstring 00.00.0000


\series bold 
parameter
\series default 
\SpecialChar ~
(
\emph on 
array
\emph default 
): Parametre listesi.
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

name\SpecialChar ~
(
\emph on 
string-ascii-8bit[255], index/key
\emph default 
): Parametrenin adý.
\layout List
\labelwidthstring 00.00.0000

value\SpecialChar ~
(
\emph on 
COMARValue
\emph default 
): Parametrenin deðeri.
\end_deeper 
\end_deeper 
\layout Subsubsection

EXEC
\layout Standard

RPCData içeriðinde bulunan CSL kodunun iþletilip sonucun geri döndürülmesini
 saðlar.
 Eðer RPCType EXEC ise, RPCData þu þekilde beklenir:
\layout List
\labelwidthstring 00.00.0000


\series bold 
RPCData
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
code
\series default 
\SpecialChar ~
(
\emph on 
string-base64[<65535]
\emph default 
): Çalýþtýrýlacak kod.
\layout List
\labelwidthstring 00.00.0000


\series bold 
compression
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[16]
\emph default 
)
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

GZIP
\layout List
\labelwidthstring 00.00.0000

BZIP2
\layout List
\labelwidthstring 00.00.0000

NONE
\end_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
type
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[32]
\emph default 
)
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

propertyset
\layout List
\labelwidthstring 00.00.0000

propertyget
\layout List
\labelwidthstring 00.00.0000

method
\end_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
name
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[64]
\emph default 
): Kod içinden Çaðrýlacak iþlevin adý
\layout List
\labelwidthstring 00.00.0000


\series bold 
parameter
\series default 
\SpecialChar ~
(
\emph on 
array
\emph default 
): Parametre listesi
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

name\SpecialChar ~
(
\emph on 
string-ascii-8bit[64], index/key
\emph default 
): Parametrenin adý
\layout List
\labelwidthstring 00.00.0000

value\SpecialChar ~
(
\emph on 
COMARValue
\emph default 
): Parametrenin deðeri
\end_deeper 
\end_deeper 
\layout Subsubsection

RESPONSE
\layout Standard

Daha önce CALL ile yapýlmýþ bir çaðrýnýn cevabýdýr.
 Eðer RPCType RESPONSE ise, RPCData þu þekilde beklenir:
\layout List
\labelwidthstring 00.00.0000


\series bold 
RPCData
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
TTSID
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[255]
\emph default 
): Cevabý verilen Transaction ID.
\layout List
\labelwidthstring 00.00.0000


\series bold 
status
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[32]
\emph default 
)
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

ACCEPTED : Kabul edildi.
\layout List
\labelwidthstring 00.00.0000

PROCESSED : Ýþleniyor.
\layout List
\labelwidthstring 00.00.0000

QUEUE : Ýþlenmek üzere kuyrukta bekliyor.
\layout List
\labelwidthstring 00.00.0000

WAIT : Ýþlenirken baþka bir sebepten dolayý beklemede.
\layout List
\labelwidthstring 00.00.0000

RESULT : Ýþlem sonlandýrýldý ve returnvalue geçerli.
\layout List
\labelwidthstring 00.00.0000

PERMISSIONDENIED : Bu iþlemi yapma hakkýnýz yok.
\layout List
\labelwidthstring 00.00.0000

INVALID : Geçersiz bir iþlem çaðrýsý.
\layout List
\labelwidthstring 00.00.0000

ABORT : Ýþlem CANCEL ile sonlandýrýldý.
\layout List
\labelwidthstring 00.00.0000

ERROR : Geçersiz bir OM çaðrýsý yapýldý.
 Bu nesne/method OM üzerinde tarifli deðil.
\layout List
\labelwidthstring 00.00.0000

NOTFOUND : BU TTSID ile bir çaðrý yapýlmamýþ.
\layout List
\labelwidthstring 00.00.0000

FATAL : Nesne yürütülürken oluþan bir sorun nedeniyle iþlem durduruldu.
\layout List
\labelwidthstring 00.00.0000

KILLED : Nesnenin yürütülmesi operatör tarafýndan engellendi.
\layout List
\labelwidthstring 00.00.0000

ACCESSDENIED : Bu nesneye eriþemezsiniz (OM ACL Policy).
\end_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
returnvalue
\series default 
\SpecialChar ~
(
\emph on 
COMARRetVal
\emph default 
): Eðer status, RESULT ise geri dönüþ deðeridir.
 Aksi halde tanýmsýzdýr.
\end_deeper 
\layout Subsubsection

STATUS
\layout Standard

Daha önce istenen ama cevaplanmamýþ bir isteðin durumunu sorgulamak amacýyla
 kullanýlýr.
 Eðer RPCType STATUS ise, RPCData þu þekilde beklenir:
\layout List
\labelwidthstring 00.00.0000


\series bold 
RPCData
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
TTSID
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[255]
\emph default 
): Cevabý istenen Transaction ID.
\end_deeper 
\layout Subsubsection

NOTIFY
\layout Standard

Event notification.
 Ýþlemin state'i ile ilgili bilgi döndürür.
 Eðer RPCType NOTIFY ise, RPCData þu þekilde beklenir:
\layout List
\labelwidthstring 00.00.0000


\series bold 
RPCData
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
eventid
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[255]
\emph default 
)
\layout List
\labelwidthstring 00.00.0000


\series bold 
status
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[32]
\emph default 
)
\end_deeper 
\layout Subsubsection

CANCEL
\layout Standard

Daha önceden baþlatýlmýþ bir iþlevi iptal etmek için kullanýlýr.
\layout List
\labelwidthstring 00.00.0000


\series bold 
RPCData
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000


\series bold 
TTSID
\series default 
\SpecialChar ~
(
\emph on 
string-ascii-8bit[255]
\emph default 
): Ýptal edilecek TTSID.
\end_deeper 
\layout Section

Yukarýya düzgünce taþýnacak/ayýklanacak karýþýk hedeler:
\layout Subsection

objHook
\layout Itemize

Container ile veri alýþveriþini IPC üzerinden saðlayabilmelidir.
 Bunun yanýnda standart stack based çaðrýlarda kullanýlabilir olmalýdýr.
\layout Itemize

Thread-safe olmalýdýr, ayný anda birden fazla kopyasýnýn çalýþtýrýlýyor
 olmasý race condition'lara neden olmamalýdýr.
\layout Itemize

Bilgi alýþveriþi için COMARRPCData ve COMARValue veri tiplerini kullanmalýdýr.
\layout Itemize

Sleep/weak-up desteði olmalýdýr.
 Sleep için bir girdi kabul etmeli, bu girdiyi aldýktan sonraki en uygun
 zamanda kendini askýya alabilmelidir.
\layout Itemize

StateSave / StateRestore desteði olmalýdýr.
 Yürüttüðü kodun / iþlemin o anki durumunu kaydedebilmelidir.
\layout Itemize

resume desteði olmalýdýr.
 Daha önceden kaydedilmiþ iþlemler kaldýklarý yerden ayný þekilde devam
 edebilmelidir.
\layout Itemize

objhook'tan istenen düðüm bilgisi bir defa set edildikten sonraki tekrar
 eden çaðrýlarda objhook, ait olduðu düðüme ait yordamlarý otomatik yükleyebilme
lidir.
\layout Itemize

Persistent data tracking ve COMAR LOW LEVEL API için COMARAPI bileþenlerini
 kullanmalýdýr.
\layout Itemize

Sistem çaðrýlarý için Container tarafýndan saðlanan CAPI bileþenlerini kullanmal
ýdýr.
\layout Itemize

Gerekli olan data ile ilgili bilgilere callerInfoObject veri tipi üzerinden
 eriþmelidir.
\layout Itemize

Container ve COMARAPI gibi çaðrýlarýn tümünde callerInfoObject veri tipi
 sunulmalýdýr.
\layout Subsection

NSContainer
\layout Standard

COMARd'nin geri kalan kýsmý ile objHook arasýnda bir glue görevi görür.
 Ayrýca düðüme atanmýþ birden fazla objHook olmasý durumunda bunlarýn container'
a baðlanmasý görevlerini de yürütmelidir.
\layout Itemize

Thread-safe olmasý gereklidir.Thread-safe olmalýdýr, ayný anda birden fazla
 kopyasýnýn çalýþtýrýlýyor olmasý race condition'lara neden olmamalýdýr.
\layout Itemize

objHook ve kendini yürüten bileþenlere callerInfoObject veritipi ile parametre
 geçirmelidir.
\layout Itemize

Her bir objhook'u paralel çalýþtýrabilmeli, gerekiyorsa bu objhook'larýn
 herbirinin ürettiði verileri biraraya toplayabilmeldir.
 Eðer geriye dönen veri bir nesne ise, bu durumda her bir nesne için prototip
 bilgisini nesne private data üzerinde tutabilmelidir.
\layout Itemize

Ait olduðu düðüme ait olan objhook nesnelerini doðrudan oluþturmadan COMARMODSTA
CK üzerinden kullanmalý, bu nesnelerin sadece bir instance'ýný elde tutmalýdýr.
\layout Itemize

Diðer tüm birimlerle veri alýþveriþini COMARValue üzerinden saðlamalýdýr.
\layout Subsection

OBJDRIVER
\layout Itemize

Blocked ve Non-blocked olarak çalýþabilmeli, thread-safe olmalýdýr.
\layout Itemize

RESUME/RUN ve CALL gibi yöntemleri desteklemelidir.
\layout Subsection

COMAR-RPC
\layout Standard

COMAR ile iletiþim için gerekli olacak RPC iþlevini yerine getirir.
\layout Itemize

RPC çaðrýlarý almak, iþletmek, sonuçlarý geriye döndürmek.
\layout Itemize

DATAGRAM (e-mail, sms etc.) için gerekli handshaking vs.
 görevlerini saðlamak.
\layout Itemize

Alýnan istekler için authentication ve authorization iþlevini gerçekleþtirmek.
\layout Itemize

Ýþlenecek olan istekleri COMAR-CORE'a devretmek.
\layout Standard

COMAR-RPC birer I/O low-level access modülü ve bu modüller için bir iþletici
 olan ana kodu ihtiva eder.
\layout Standard

Modüller iki gruba ayrýlýr.
 Server mode ve Client Mode.
 Server mode modüller þu fonksiyonelitelere sahip olmalýdýr:
\layout Itemize

Ayrý bir process olarak çalýþabilmelidir.
\layout Itemize

LISTEN/ACCEPT ardýndan ana COMAR Core'a elde edilen veriyi COMARRPCData
 formatýnda iletmek üzere IPC üzerinden saðlamak.
\layout Itemize

SHMEM ile COMAR-CORE'dan elde edilen COMARRPCData verisini RESPONSE olarak
 karþýya yollamak.
\layout Itemize

AUTH verilerini COMARAPI üzerinden saðlamalýdýr.
\layout Standard

Client Mode modüller ise þu fonksiyonaliteleri saðlamalýdýr:
\layout Itemize

Ayrý bir process/thread olarak çalýþabilmelidir.
\layout Itemize

CONNECT ile yollanacak bilgiyi IPC üzerinden alýp kullanabilmelidir.
\layout Itemize

RESPONSE baðlantýlarýný IPC üzerinden iþletebilmelidir.
\layout Itemize

COMAR-CORE baðlantýlarý tamamen COMARRPCData formatýnda yapýlmalýdýr.
\layout Itemize

Remote için gereken auth bilgisini kendi saklayabilmelidir.
\layout Standard

Ayrýca tüm modüller tiplerinden baðýmsýz olarak þu fonksiyonaliteleri saðlamalýd
ýr:
\layout Itemize

RPCTYPE - RPC türü (HTTP-XML/HTTPS-XML, MSG-XML vs.)
\layout Itemize

LOGLEVEL - Hangi seviyede loglama yapýlacaðý.
 0 - None, 1 - WARNINGS, 2 - CALLS, 3 - DEBUG MODE
\layout Subsection

COMAR-CORE
\layout Standard

COMARd'nin çekirdek görevlerini üstlenir.
\layout Itemize

Event kaynaklarýný takip etmek.
\layout Itemize

Timer iþlevlerini takip etmek.
\layout Itemize

OBJDRIVER'lar için gereken scheduling iþlevlerini sunmak.
\layout Itemize

task kuyruklarý yoluyla gerektiði durumlarda çalýþan yordamlarý uyutabilmek
 vs.
\layout Itemize

COMAR-RPC iþlevlerini yönetmek.
\layout Subsection

CAPI
\layout Standard

CAPI, COMAR uygulamalarý için gerekli olan düþük düzey fonksiyoneliteyi
 saðlar.
 CAPI, bir API Driver ve bununla sistem baðlanan birden fazla sayýda API
 sunucu modülünden oluþur.
 Her bir modül aþaðýdaki bilgileri içermelidir:
\layout List
\labelwidthstring 00.00.0000

APICLASS: Bu modülün adý.
\layout List
\labelwidthstring 00.00.0000

APICALLS: API için gereken vtbl.
 Bu tablo çaðrýlabilir fonksiyon adlarý için fonksiyon giriþlerini gösterir.
\layout Standard

Bir modül içinde tanýmlanan fonksiyonlar tamamen þu prototip üzerinden çaðrýlabi
lir:
\layout Standard

fonksiyon adý, parametre_listesi, checkPerms fonksiyon giriþi, callerInfoObject
 olarak çaðýran uygulamanýn callerInfo verisi.
\layout Standard

Modüller thread safe olmalýdýr.
 Her zaman COMARRetVal ile iþlev sonuçlarýný geri döndürmelidirler.
 Kullanýlan parametrelerde her zaman COMARValue formatýnda olmalýdýr.
\layout Subsection

COMARAPI
\layout Standard

COMAR temel iþlevlerini üstlenir.
 Bu iþlevler, COMARValue gibi veri yapýlarýnýn desteklenmesi, persistent
 veriler için çaðrýlar ve benzerleridir.
\layout Itemize

Nesne instance'larýný oluþturma/saklama/geri alma.
\layout Itemize

Nesne veritabaný iþlevleri.
\layout Itemize

RPC Client Mode çaðrýlarý.
\layout Itemize

Logging iþlevleri
\layout Itemize

Event registration Low Level bileþenleri
\layout Itemize

COMAR Kullanýcý veritabaný iþlevleri.
\layout Subsection

COMARValue API
\layout Standard

COMARValue, COMARRetVal gibi temel veri türlerini oluþturma/modifiye etme
 iþlevlerini üstlenir.
\layout Itemize

String, Numeric, Array ve Object veri tipleri için platform baðýmsýz, C
 ile kolay modifiye edilebilen, memory gibi referanslar kullanmayan bir
 genel veri kapsülleme yöntemi sunmak.
\layout Itemize

Her tür COMARValue için XML (vb.) veri kapsülleme & serialization fonksiyonlarý
 saðlamak.
\layout Section

COMAR Transaction Mekanizmasý
\layout Standard

Bu kýsýmda ÇOMAR'ýn transaction mekanizmasý açýklanacak..
 ÇOMAR sistemine RPC üzerinden ulaþan nesne çaðrýlarýnýn ya da event'larýn
 hangi þekilde iþletileceði bu kýsýmda açýklanacak.
 Hepsi çok ufak muhtemel deðiþikler dýþýnda hazýr..
\layout Subsection

Transaction Modülleri
\layout Standard

pass
\layout Subsection

Transaction Hayat Döngüsü
\layout Standard

pass
\layout Subsection

Transaction State'leri
\layout Standard

pass
\layout Subsection

Transaction State Diagram'ý
\layout Standard

pass
\layout Subsection

Session Tanýmlarý
\layout Standard

pass
\the_end

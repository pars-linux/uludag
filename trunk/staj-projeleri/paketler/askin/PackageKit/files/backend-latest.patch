diff -Nuar PackageKit-0.4.9-orig/backends/pisi/pisiBackend.py PackageKit-0.4.9/backends/pisi/pisiBackend.py
--- PackageKit-0.4.9-orig/backends/pisi/pisiBackend.py	2009-08-17 11:10:19.022786262 +0300
+++ PackageKit-0.4.9/backends/pisi/pisiBackend.py	2009-08-24 10:15:13.653499317 +0300
@@ -25,81 +25,6 @@
 
 class PackageKitPisiBackend(PackageKitBaseBackend, PackagekitPackage):
 
-    # It's an ugly way to sync with PK Groups and PiSi Components
-    # Maybe we can provide these with our index?
-    groups = {
-            "applications" : GROUP_OTHER,
-            "applications.admin" : GROUP_ADMIN_TOOLS,
-            "applications.archive" : GROUP_OTHER,
-            "applications.crypto" : GROUP_SECURITY,
-            "applications.doc" : GROUP_PUBLISHING,
-            "applications.doc.docbook" : GROUP_PUBLISHING,
-            "applications.editors" : GROUP_ACCESSORIES,
-            "applications.editors.emacs" : GROUP_ACCESSORIES,
-            "applications.emulators" : GROUP_OTHER,
-            "applications.filesystems" : GROUP_OTHER,
-            "applications.games" : GROUP_GAMES,
-            "applications.hardware" : GROUP_OTHER,
-            "applications.multimedia" : GROUP_MULTIMEDIA,
-            "applications.network" : GROUP_INTERNET,
-            "applications.network.mozilla" : GROUP_INTERNET,
-            "applications.pda" : GROUP_ACCESSORIES,
-            "applications.powermanagement" : GROUP_POWER_MANAGEMENT,
-            "applications.printing" : GROUP_PUBLISHING,
-            "applications.science" : GROUP_EDUCATION,
-            "applications.science.astronomy" : GROUP_EDUCATION,
-            "applications.science.electronics" : GROUP_EDUCATION,
-            "applications.science.mathematics" : GROUP_EDUCATION,
-            "applications.security" : GROUP_SECURITY,
-            "applications.shells" : GROUP_OTHER,
-            "applications.tex" : GROUP_PUBLISHING,
-            "applications.util" : GROUP_ACCESSORIES,
-            "applications.virtualization" : GROUP_VIRTUALIZATION,
-            "desktop.fonts" : GROUP_FONTS,
-            "desktop.freedesktop" : GROUP_DESKTOP_OTHER,
-            "desktop.freedesktop.inputmethods" : GROUP_LOCALIZATION,
-            "desktop.freedesktop.xorg" : GROUP_DESKTOP_OTHER,
-            "desktop.freedesktop.xorg.lib" : GROUP_DESKTOP_OTHER,
-            "desktop.gnome" : GROUP_DESKTOP_GNOME,
-            "desktop.kde" : GROUP_DESKTOP_KDE,
-            "desktop.kde.base" : GROUP_DESKTOP_KDE,
-            "desktop.kde.i18n" : GROUP_LOCALIZATION,
-            "kernel" : GROUP_SYSTEM,
-            "kernel.drivers" : GROUP_SYSTEM,
-            "kernel.firmware" : GROUP_SYSTEM,
-            "kernel-xen" : GROUP_VIRTUALIZATION,
-            "kernel-xen.dom0" : GROUP_VIRTUALIZATION,
-            "kernel-xen.dom0.drivers" : GROUP_VIRTUALIZATION,
-            "kernel-xen.dom0.firmware" : GROUP_VIRTUALIZATION,
-            "kernel-xen.domU" : GROUP_VIRTUALIZATION,
-            "programming" : GROUP_PROGRAMMING,
-            "programming.environments" : GROUP_PROGRAMMING,
-            "programming.environments.eclipse" : GROUP_PROGRAMMING,
-            "programming.languages" : GROUP_PROGRAMMING,
-            "programming.languages.dotnet" : GROUP_PROGRAMMING,
-            "programming.languages.gambas" : GROUP_PROGRAMMING,
-            "programming.languages.haskell" : GROUP_PROGRAMMING,
-            "programming.languages.java" : GROUP_PROGRAMMING,
-            "programming.languages.lisp" : GROUP_PROGRAMMING,
-            "programming.languages.pascal" : GROUP_PROGRAMMING,
-            "programming.languages.perl" : GROUP_PROGRAMMING,
-            "programming.languages.php" : GROUP_PROGRAMMING,
-            "programming.languages.python" : GROUP_PROGRAMMING,
-            "programming.languages.tcl" : GROUP_PROGRAMMING,
-            "programming.libs" : GROUP_PROGRAMMING,
-            "programming.tools" : GROUP_PROGRAMMING,
-            "server" : GROUP_SERVERS,
-            "server.database" : GROUP_SERVERS,
-            "server.mail" : GROUP_SERVERS,
-            "server.nis" : GROUP_SERVERS,
-            "server.www" : GROUP_SERVERS,
-            "system" : GROUP_SYSTEM,
-            "system.base" : GROUP_SYSTEM,
-            "system.devel" : GROUP_PROGRAMMING,
-            "system.doc" : GROUP_SYSTEM,
-            "system.locale" : GROUP_LOCALIZATION
-        }
-
     def __init__(self, args):
         PackageKitBaseBackend.__init__(self, args)
 
@@ -108,11 +33,19 @@
         self.installdb = pisi.db.installdb.InstallDB()
         self.packagedb = pisi.db.packagedb.PackageDB()
         self.repodb = pisi.db.repodb.RepoDB()
+        self.groupdb = pisi.db.groupdb.GroupDB()
 
         # Do not ask any question to users
         self.options = pisi.config.Options()
         self.options.yes_all = True
 
+    def __get_group(self, package):
+        try:
+            pkg_component = self.componentdb.get_component(package.partOf)
+            return pkg_component.group
+        except:
+            return "unknown"
+
     def __get_package_version(self, package):
         """ Returns version string of given package """
         # Internal FIXME: PiSi may provide this
@@ -122,11 +55,18 @@
             version = "%s-%s" % (package.version, package.release)
         return version
 
+    def __get_package_id(self, package):
+        """ Returns package id string of given package """
+        return self.get_package_id(package.name, self.__get_package_version(package), package.architecture, "")
+
     def __get_package(self, package, filters = None):
         """ Returns package object suitable for other methods """
         if self.installdb.has_package(package):
             status = INFO_INSTALLED
             pkg = self.installdb.get_package(package)
+            pkg2 = self.packagedb.get_package(package)
+            if pkg2.history[0].release > pkg.release:
+                status = INFO_UPDATING
         elif self.packagedb.has_package(package):
             status = INFO_AVAILABLE
             pkg = self.packagedb.get_package(package)
@@ -137,7 +77,7 @@
             if "none" not in filters:
                 filterlist = filters.split(';')
 
-                if FILTER_INSTALLED in filterlist and status != INFO_INSTALLED:
+                if FILTER_INSTALLED in filterlist and not (status == INFO_INSTALLED or status == INFO_UPDATING):
                     return
                 if FILTER_NOT_INSTALLED in filterlist and status == INFO_INSTALLED:
                     return
@@ -146,11 +86,11 @@
                 if FILTER_NOT_GUI in filterlist and "app:gui" in pkg.isA:
                     return
 
-        version = self.__get_package_version(pkg)
-
-        id = self.get_package_id(pkg.name, version, pkg.architecture, "")
-
-        return self.package(id, status, pkg.summary)
+        if status == INFO_UPDATING:
+            self.package(self.__get_package_id(pkg), INFO_INSTALLED, pkg.summary)
+            self.package(self.__get_package_id(pkg2), INFO_AVAILABLE, pkg2.summary)
+        else:
+            self.package(self.__get_package_id(pkg), status, pkg.summary)
 
     def get_depends(self, filters, package_ids, recursive):
         """ Prints a list of depends for a given package """
@@ -161,7 +101,7 @@
 
         for pkg in self.packagedb.get_package(package).runtimeDependencies():
             # Internal FIXME: PiSi API has really inconsistent for return types and arguments!
-            self.__get_package(pkg.package)
+            self.__get_package(pkg.package, filters)
 
     def get_details(self, package_ids):
         """ Prints a detailed description for a given package """
@@ -171,22 +111,60 @@
         package = self.get_package_from_id(package_ids[0])[0]
 
         if self.packagedb.has_package(package):
+            pkg_status = "available"
             pkg = self.packagedb.get_package(package)
-
-            if self.groups.has_key(pkg.partOf):
-                group = self.groups[pkg.partOf]
+            print "%s-%s-%s" % (pkg.version, pkg.release, pkg.build)
+            print package_ids[0].split(";")[1]
+            if self.installdb.has_package(package):
+                pkg_status = "installed"
+                if "%s-%s-%s" % (pkg.version, pkg.release, pkg.build) != package_ids[0].split(";")[1]:
+                    pkg = self.installdb.get_package(package)
+
+            my_package_id = "%s;%s;%s;%s" % (pkg.name,
+                                             self.__get_package_version(pkg),
+                                             pkg.architecture,
+                                             pkg_status)
+
+            #FIXME: pisi.installdb must be provide pkg.packageSize
+            if pkg.packageSize == None:
+                packageSize = 0
             else:
-                group = GROUP_UNKNOWN
+                packageSize = pkg.packageSize
 
-            self.details("%s-%s" % (pkg.name, self.__get_package_version(pkg)),
-                            pkg.license,
-                            group,
-                            pkg.description,
-                            pkg.packageURI,
-                            pkg.packageSize)
+            print my_package_id
+            print pkg.packageSize
+            self.details(my_package_id,
+                         " ".join(pkg.license),
+                         self.__get_group(pkg),
+                         pkg.description,
+                         pkg.packageURI,
+                         packageSize)
         else:
             self.error(ERROR_PACKAGE_NOT_FOUND, "Package was not found")
 
+    def get_update_detail(self, package_ids):
+        ''' Implement the {backend}-get-update_detail functionality '''
+        self.allow_cancel(True)
+        self.percentage(None)
+        self.status(STATUS_INFO)
+
+        package = self.get_package_from_id(package_ids[0])[0]
+
+        if self.installdb.has_package(package):
+            installed_package = self.installdb.get_package(package)
+            update_package    = self.packagedb.get_package(package)
+            if update_package.release > installed_package.release:
+                desc   = update_package.history[0].comment
+                issued = update_package.history[0].date
+                desc   = desc.replace("\n", "")
+                desc   = desc.split()
+
+                self.update_detail(self.__get_package_id(installed_package),
+                                   #FIXME: format to 'git-1.6.3.4-81-5-i686' from git;1.6.3.4-81-5;i686;
+                                   "'%s'" % ("-".join(self.__get_package_id(update_package).split(";")))[0:-1],
+                                   '', 'http://www.pardus.org.tr', 'http://bugs.pardus.org.tr',
+                                   '', 'none', " ".join(desc), '', '', issued, '')
+
     def get_files(self, package_ids):
         """ Prints a file list for a given package """
         self.allow_cancel(True)
@@ -197,33 +175,61 @@
         if self.installdb.has_package(package):
             pkg = self.installdb.get_files(package)
 
-            # FIXME: Add "/" as suffix
             files = map(lambda y: y.path, pkg.list)
 
-            file_list = ";".join(files)
+            # Reformat for PackageKit
+            # And add "/" for every file.
+            file_list = ";/".join(files)
+            file_list = "/%s" % file_list
 
             self.files(package, file_list)
 
+    def get_packages(self, filters):
+        """
+        List all instaled package
+        It is used with list-{create-diff-install}
+        """
+        for repo in self.repodb.list_repos():
+            for pkg in self.packagedb.list_packages(repo):
+                self.__get_package(pkg, filters)
+
     def get_repo_list(self, filters):
         """ Prints available repositories """
         self.allow_cancel(True)
         self.percentage(None)
 
-        for repo in pisi.api.list_repos():
-            # Internal FIXME: What an ugly way to get repo uri
-            # FIXME: Use repository enabled/disabled state
-            self.repo_detail(repo, self.repodb.get_repo(repo).indexuri.get_uri(), "true")
+        for repo in pisi.api.list_repos(False):
+            if self.repodb.repo_active(repo):
+                self.repo_detail(repo, self.repodb.get_repo_url(repo), "true")
+            else:
+                self.repo_detail(repo, self.repodb.get_repo_url(repo), "false")
 
     def get_requires(self, filters, package_ids, recursive):
         """ Prints a list of requires for a given package """
+        # Shows package's reverse dependencies.
+        # If packege will be removed, shows packages will be removed (rev deps).
+
         self.allow_cancel(True)
         self.percentage(None)
 
         package = self.get_package_from_id(package_ids[0])[0]
 
-        # FIXME: Handle packages which is not installed from repository
-        for pkg in self.packagedb.get_rev_deps(package):
-            self.__get_package(pkg[0])
+        if filters == 'installed':
+            # show removed packages
+            rev_dep_list = pisi.api.get_remove_order([package])
+            rev_dep_list.pop()
+            for pkg in rev_dep_list:
+                self.__get_package(pkg)
+        else:
+            # show reverse dependencies
+            if self.installdb.has_package(package):
+                for pkg in self.installdb.get_rev_deps(package):
+                    self.__get_package(pkg[0], filters)
+            else:
+                for pkg in self.packagedb.get_rev_deps(package):
+                    self.__get_package(pkg[0], filters)
+
+
 
     def get_updates(self, filter):
         """ Prints available updates and types """
@@ -253,7 +259,7 @@
 
         try:
             self.status(STATUS_INSTALL)
-            pisi.api.install([file])
+            pisi.api.install(files)
         except pisi.Error,e:
             # FIXME: Error: internal-error : Package re-install declined
             # Force needed?
@@ -276,6 +282,34 @@
         else:
             self.error(ERROR_PACKAGE_NOT_INSTALLED, "Package is already installed")
 
+    def download_packages(self, directory, package_ids):
+        '''
+        Implement the {backend}-download-packages functionality
+        '''
+
+        self.status(STATUS_DOWNLOAD)
+        fileList = []
+
+        for package_id in package_ids:
+            package = self.get_package_from_id(package_id)[0]
+            if self.packagedb.has_package(package):
+                try:
+                    self.percentage(0)
+                    pisi.api.fetch([package], directory)
+                    self.percentage(100)
+                    pkg = self.packagedb.get_package(package)
+                    filePath = directory + '/' + pkg.packageURI
+                    fileList.append(filePath)
+                    self.package(self.__get_package_id(pkg), INFO_DOWNLOADING, '')
+
+                except pisi.Error, e:
+                    self.error(ERROR_PACKAGE_DOWNLOAD_FAILED, e)
+            else:
+                self.message(MESSAGE_COULD_NOT_FIND_PACKAGE, "Could not find a match for package %s" % package)
+
+            self.files(package_ids[0], ";".join(fileList))
+
+
     def refresh_cache(self):
         """ Updates repository indexes """
         self.allow_cancel(False)
@@ -309,6 +343,20 @@
         else:
             self.error(ERROR_PACKAGE_NOT_INSTALLED, "Package is not installed")
 
+
+    def repo_enable(self, repoid, enable):
+        '''
+        Implement the {backend}-repo-enable functionality
+        '''
+        try:
+            if enable == 'false':
+                pisi.api.set_repo_activity(repoid, False)
+            else:
+                pisi.api.set_repo_activity(repoid, True)
+        except Exception, e:
+            self.error(ERROR_INTERNAL_ERROR, _format_str(traceback.format_exc()))
+
+
     def repo_set_data(self, repo_id, parameter, value):
         """ Sets a parameter for the repository specified """
         self.allow_cancel(False)
@@ -360,19 +408,36 @@
         key = key.lstrip("/")
 
         for pkg, files in pisi.api.search_file(key):
-            self.__get_package(pkg)
+            self.__get_package(pkg, filters)
 
     def search_group(self, filters, group):
         """ Prints a list of packages belongs to searched group """
         self.allow_cancel(True)
         self.percentage(None)
         self.status(STATUS_INFO)
+        # FIXME: pisi must provide
+        if group == "desktop-gnome":
+            group = "gnome.desktop"
+        elif group == "desktop-kde":
+            group = "kde.desktop"
+        elif group == "desktop-xfce":
+            group = "xfce.desktop"
+        elif group == "desktop-other":
+            group = "other.desktop"
+        elif group == "admin-tools":
+            group = "admin.tools"
+        elif group == "power-management":
+            group = "power.management"
+
+        package_list = []
 
         try:
-            for key in self.groups.keys():
-                if self.groups[key] == group:
-                    for pkg in self.componentdb.get_packages(key, walk = True):
-                        self.__get_package(pkg, filters)
+            for key in self.groupdb.get_group_components(group):
+                for pkg in self.componentdb.get_packages(key, walk = True):
+                    package_list.append(pkg)
+            package_list = list(set(package_list))
+            for pkg in package_list:
+                self.__get_package(pkg, filters)
         except:
             self.error(ERROR_GROUP_NOT_FOUND, "Component %s was not found" % group)
 
diff -Nuar PackageKit-0.4.9-orig/backends/pisi/pk-backend-pisi.c PackageKit-0.4.9/backends/pisi/pk-backend-pisi.c
--- PackageKit-0.4.9-orig/backends/pisi/pk-backend-pisi.c	2009-08-17 11:10:19.021786357 +0300
+++ PackageKit-0.4.9/backends/pisi/pk-backend-pisi.c	2009-08-24 10:15:32.630498499 +0300
@@ -55,28 +55,40 @@
 static PkBitfield
 backend_get_groups (PkBackend *backend)
 {
-	return pk_bitfield_from_enums (
-		PK_GROUP_ENUM_ACCESSORIES,
-		PK_GROUP_ENUM_EDUCATION,
-		PK_GROUP_ENUM_GAMES,
-		PK_GROUP_ENUM_INTERNET,
-		PK_GROUP_ENUM_OTHER,
-		PK_GROUP_ENUM_PROGRAMMING,
-		PK_GROUP_ENUM_MULTIMEDIA,
-		PK_GROUP_ENUM_SYSTEM,
-		PK_GROUP_ENUM_DESKTOP_GNOME,
-		PK_GROUP_ENUM_DESKTOP_KDE,
-		PK_GROUP_ENUM_DESKTOP_OTHER,
-		PK_GROUP_ENUM_PUBLISHING,
-		PK_GROUP_ENUM_SERVERS,
-		PK_GROUP_ENUM_FONTS,
-		PK_GROUP_ENUM_ADMIN_TOOLS,
-		PK_GROUP_ENUM_LOCALIZATION,
-		PK_GROUP_ENUM_VIRTUALIZATION,
-		PK_GROUP_ENUM_SECURITY,
-		PK_GROUP_ENUM_POWER_MANAGEMENT,
-		PK_GROUP_ENUM_UNKNOWN,
-		-1);
+	int groups;
+	groups = pk_bitfield_from_enums(
+		   PK_GROUP_ENUM_ACCESSIBILITY,
+		   PK_GROUP_ENUM_ACCESSORIES,
+		   PK_GROUP_ENUM_ADMIN_TOOLS,
+		   PK_GROUP_ENUM_COMMUNICATION,
+		   PK_GROUP_ENUM_DESKTOP_GNOME,
+		   PK_GROUP_ENUM_DESKTOP_KDE,
+		   PK_GROUP_ENUM_DESKTOP_OTHER,
+		   PK_GROUP_ENUM_DESKTOP_XFCE,
+		   PK_GROUP_ENUM_EDUCATION,
+		   PK_GROUP_ENUM_FONTS,
+		   PK_GROUP_ENUM_GAMES,
+		   PK_GROUP_ENUM_GRAPHICS,
+		   PK_GROUP_ENUM_INTERNET,
+		   PK_GROUP_ENUM_LEGACY,
+		   PK_GROUP_ENUM_LOCALIZATION,
+		   PK_GROUP_ENUM_MULTIMEDIA,
+		   PK_GROUP_ENUM_NETWORK,
+		   PK_GROUP_ENUM_OFFICE,
+		   PK_GROUP_ENUM_OTHER,
+		   PK_GROUP_ENUM_POWER_MANAGEMENT,
+		   PK_GROUP_ENUM_PROGRAMMING,
+		   PK_GROUP_ENUM_PUBLISHING,
+		   PK_GROUP_ENUM_SECURITY,
+		   PK_GROUP_ENUM_SERVERS,
+		   PK_GROUP_ENUM_SYSTEM,
+		   PK_GROUP_ENUM_VIRTUALIZATION,
+		   PK_GROUP_ENUM_SCIENCE,
+		   PK_GROUP_ENUM_DOCUMENTATION,
+		   PK_GROUP_ENUM_ELECTRONICS,
+		   PK_GROUP_ENUM_UNKNOWN,
+		   -1);
+	return groups;
 }
 
 /**
@@ -92,6 +104,15 @@
 }
 
 /**
+ * backend_get_mime_types:
+ */
+static gchar *
+backend_get_mime_types (PkBackend *backend)
+{
+	return g_strdup ("application/x-pisi");
+}
+
+/**
  * pk_backend_cancel:
  */
 static void
@@ -102,6 +123,20 @@
 }
 
 /**
+ * backend_download_packages:
+ */
+static void
+backend_download_packages (PkBackend *backend, gchar **package_ids, const gchar *directory)
+{
+	gchar *package_ids_temp;
+
+	/* send the complete list as stdin */
+	package_ids_temp = pk_package_ids_to_text (package_ids);
+	pk_backend_spawn_helper (spawn, "pisiBackend.py", "download-packages", directory, package_ids_temp, NULL);
+	g_free (package_ids_temp);
+}
+
+/**
  * backend_get_depends:
  */
 static void
@@ -141,6 +176,18 @@
 }
 
 /**
+ * backend_get_packages:
+ */
+static void
+backend_get_packages (PkBackend *backend, PkBitfield filters)
+{
+	gchar *filters_text;
+	filters_text = pk_filter_bitfield_to_text (filters);
+	pk_backend_spawn_helper (spawn, "pisiBackend.py", "get-packages", filters_text, NULL);
+	g_free (filters_text);
+}
+
+/**
  * backend_get_requires:
  */
 static void
@@ -156,6 +203,18 @@
 }
 
 /**
+ * backend_get_update_detail:
+ */
+static void
+backend_get_update_detail (PkBackend *backend, gchar **package_ids)
+{
+	gchar *package_ids_temp;
+	package_ids_temp = pk_package_ids_to_text (package_ids);
+	pk_backend_spawn_helper (spawn, "pisiBackend.py", "get-update-detail", package_ids_temp, NULL);
+	g_free (package_ids_temp);
+}
+
+/**
  * backend_get_updates:
  */
 static void
@@ -231,6 +290,18 @@
 	pk_backend_spawn_helper (spawn, "pisiBackend.py", "remove-packages", pk_backend_bool_to_text (allow_deps), package_ids_temp, NULL);
 	g_free (package_ids_temp);
 }
+/**
+ * pk_backend_repo_enable:
+ */
+static void
+backend_repo_enable (PkBackend *backend, const gchar *rid, gboolean enabled)
+{
+	if (enabled == TRUE) {
+		pk_backend_spawn_helper (spawn, "pisiBackend.py", "repo-enable", rid, "true", NULL);
+	} else {
+		pk_backend_spawn_helper (spawn, "pisiBackend.py", "repo-enable", rid, "false", NULL);
+	}
+}
 
 /**
  * pk_backend_search_details:
@@ -353,25 +424,25 @@
 	backend_destroy,			/* destroy */
 	backend_get_groups,			/* get_groups */
 	backend_get_filters,			/* get_filters */
-	NULL,					/* get_mime_types */
+	backend_get_mime_types,			/* get_mime_types */
 	backend_cancel,				/* cancel */
-	NULL,					/* download_packages */
+	backend_download_packages,		/* download_packages */
 	NULL,					/* get_categories */
 	backend_get_depends,			/* get_depends */
 	backend_get_details,			/* get_details */
 	NULL,					/* get_distro_upgrades */
 	backend_get_files,			/* get_files */
-	NULL,					/* get_packages */
+	backend_get_packages,			/* get_packages */
 	backend_get_repo_list,			/* get_repo_list */
 	backend_get_requires,			/* get_requires */
-	NULL,					/* get_update_detail */
+	backend_get_update_detail,		/* get_update_detail */
 	backend_get_updates,			/* get_updates */
 	backend_install_files,			/* install_files */
 	backend_install_packages,		/* install_packages */
 	NULL,					/* install_signature */
 	backend_refresh_cache,			/* refresh_cache */
 	backend_remove_packages,		/* remove_packages */
-	NULL,					/* repo_enable */
+	backend_repo_enable,			/* repo_enable */
 	backend_repo_set_data,			/* repo_set_data */
 	backend_resolve,			/* resolve */
 	NULL,					/* rollback */

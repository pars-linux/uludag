TSpell Notlar

Haziran 2004

1. Kok seciciler ve Performans
Ne yazýk ki hash secici istediðim performansý saðlayamadý, bir iki temizlik ve
numara ekleyip yaklaþýk 280.000 kök/s de sabitledim, aslýnda yapýlabilcek bir kaç þey
daha var. 
- String sýnýfýnýn toCharArray() metodu oldukça yavaþ, eðer kök seçiciye doðrudan bir 
karakter dizisi gönderirsek %15-20 hýzlanabilir. 
- Karsilastirma icin bir tur ozel hash degeri kullanilabilir, bu da %5-10 arasi bir getiri 
yapabilir.
Ancak basit yapýlý MapSecici zaten yaklasik 240.000 lik bir peformansa sahip
o yuzden eziyete deðer mi bilinmez, en iyisi þimdilik bu çalýþmayý ikinci plana atmak.
Tabi MapSecicinin her zaman dogru adaylari getirmedigi bir gercek fakat gene de elde
edecegimiz %20-25 lik ekstar performans icin simdilik kasmaya gerek yok.; 

2.Kelimeler
(TurkceHarf <- HarfDizisi <- Kelime) Su anda kullanmakta olduðumuz bu yapýnýn yerine
(char[] <- Kelime) þeklinde bir basitleþmeye gitmenin getirisi ve götürüsü ne olur acaba?
Getiriler: Daha basit bir yapý ve kolay debug, daha küçük bellek ihtiyacý
Götürüler: Daha az modüler ve nesneye yönelimli yapý (ancak iyileþtirilebilir)
Belirsiz : Performans, nesnelerden doðrudan çaðrý ile yapýlacak iþler için bazý boolean
 kelime haritalarý kullanýlmasý gerekecek. Ancak bunlar nesne oluþturma ve çaðýrma bedellerinden
 küçükse daha iyi performans gösterebilir. denenmeli.

Soru: Kelime sýnýfýný "Java String" sýnýfýnýn Türkçe için özelleþmiþ bir versiyonu gibi kullanabilir miyiz?

.... 

Nisan - Mayýs 2004
Refactoring ihtiyacý:
Bir kelime enflasyonumuz var ve çözülmesi gerekiyor.
Elimizdeki kelime, kök, sozluk kelimesi vs ye bir bakalým:

TurkceHarf : Tek bir turkce harfi ifade ediyor, harfin kendisi, sirasi, sert, yumusakligi vs gibi bilgileri tasiyor. 
HarfDizisi : TurkceHarf dizisi tasiyan bir container. karmasik karsilastirma, buyuyebilme gibi ozellikleri tasiyor
Kok    : Istitsnalari ve kelimenin yalin halini tutan sinif. istisnalarin ve degisime ugramis hallerin olusmasinda kullaniliyor.
Kelime : Icinde bir harf dizisi(HarfDizisi turunde) ve Kok tasiyan ana Kelime sinifi
SozlukKelime : [Miadi dolmus]Benim eski sozlugu okumak icin yapmis oldugum istisnai durumlari ve kelime tipini tasiyan sinif
SozlukKelimesi : SozlukKelime'nin yerini alan ve Kok karsilastirmasi isleminde kullanilan icinde istisnalari tasiyan Kok'u
                 ve kelimenin kendisini tasiyan sinif.
KelimeTuru : [Tartismali]aslinda bir enum. "bence bu sinif yokolabilir" bir kelimenin Turunu ifade etmek icin bu tur bir
sinifa ihtiyacimiz yok, icinde sadece debug icin bir String tasiyor, onun yerine Kelime veya SozlukKelimesi siniflarindan
birinin icine sabit int'ler koymak cok daha sade ve dogru.


- FilteringStream
MetinAraclari sinifinda hep benzeri isler yapiliyor, ozellikle injecterror ve ASCIIfyTurkish 
gibi minik araclar icin bir tür FilePipe yapmak iyi olacak
soyle ki, bu pipe input olarak String, FileName veya Stream alabilecek,
output olarak ta gene ayni turden bir cikti verecek. tabi bir suru constructor gerekli.

Bir de StreamFilter arayuzu yapip FilteringStream'in okudugu karakterleri dizi olarak veya
kelime olarak belirtilen StreamFileter'e verebilir. StreamFilter okunan veriyi isler ve 
geri verir. Sonuc olarak her seferinde dosya ac, kapa , oku yapmak yerine bir FilteringStream
nesnesi olusturup uygun StreamFilter nesnesini - veya nesnelerini - register etmek yeterli 
olabilir. 

Bir ara yapacagim. Refactoring iyidir vesselam.


- 13 Mart 2004
Karakter kodlamasý.. bela mý bela. iþin doðrusu bu konuyu eskiden beri sevmezdim, konu Türkçe
olunca gene hortladý tabi anýnda. 

- 10 Mart 2004
Ýstatistikler.. Yaptýðýmýz iþlemler sýrasýnda çeþitli istatistikleri de tutabiliriz, biraz
düþünelim, en basitinden en tuhafýna kadar. Verilen bir metin için:
Yapýsal olarak:

 - Harf sayýsý
 - Hece sayýsý
 - Kelime sayýsý
 - Cümle sayýsý
 - Hepsinin oranlarý (En çok kullanýlan harf, hece, kelime vs.)
 - Ortalama kelime uzunluðu
 - Ortalama Cümle uzunluðu
 - En uzun kelime
 - En uzun cümle
 
 Imla denetimi ve Gramer yönünden :
 
 - isim, Sýfat, Fiil vs sayýsý  ve oranlarý
 - En sýk kullandýðý kelime, ek, hece
 - Kelime kökenlerine göre sayýlar ve oranlarý (Arapça, Fransoýca vs.)
 - Denetim doðruluk oraný
 - Kelimelerin anlamsal türlerinin oraný (Bilimsel, genel, hukuki vs)
 - Olumsuz cümle oraný ?
 - Soru cümlesi sayýsý ?
 
 Gizli istatistikler
 - Genel Türkçe metinlerden sapma miktarý (genel Ek sýralamasýndan sapma oraný - cache-miss, 
   Kök adayý vuru oraný vs. Bu istatistik bizim büyük miktarda veriyi taramamýzdan sonra 
   toplanabilir.) 
  
  Tüm bu istatistikler herhangi bir metin için bir rapor þeklinde sunulabilse iyi olurdu sanýrým.
 
Sözlük iþini ben aldým. Elimizdeki kýsmen dönüþtürülmüþ sözlüðü bizim istediðimiz formata
getireceðim, diðer taraftan da basit bir xml sözlük hazýrlayacaðým, hayýrlýsý.

- 6 Mart 2004
Kelime sayýsý ile ilgili tahminim hatalý olabilir, Osmanlýca kelimeleri ekleyince sayý ikiyüzbini 
bulabiliyor sanýrým.
Biraz sözlük üzerinde düþünelim, Ahmet'in bu konudaki bilgisi çok daha geniþ.. Kabaca sayacak olursak;
 Kelimenin biçimsel özellikleri
  - Türü (isim, sýfat, fiil, zarf, zamir, edat)
  - Orijini (Türkçe, Arapça, Farsça, Fransýzca ...)
  - Sonu sert sessizle mi bitiyor?
  - Dðer özel durumlar (bunlar için Ahmet özel karakterler kullanýyordu)
 Anlamsal özellikler? 
  - Sanýrým bu konuda þimdilik tam bir muamma..

Aslýnda sözlük giriþi için basit bir php veya java arayüzü yapýlýp bilgiler bir Musql veritabanýna
girilirse daha iyi olacakmýþ gibi görünüyor. binary ve xml sözlükler bu veritabaný sorgulanarak
oluþturulabilir.


- 5 Mart 2004

ÝMLA DENETÝMÝ
imla denetimi algoritmasý kabaca þu adýmlardan oluþuyor

1. Sözlüðün okunmasý : Sadece en baþta yapýlýyor
   - Sözlük geniþleyebilir yapýda, muhtemelen XML formatýnda olacak, ayrýca bu sözlüðü binary
     formata dönüþtüren bir kütüphane fonksiyonuna da ihtiyacýmýz olacak, ancak taban daima okunaklý
     ve esnek olan XML sözlük olmalý. Bu konuda yapýlmýþ çalýþmalar taban alýnabilir. 
   - Türkçede yüzbin civarýnda muhtemel kelime var, ortalama olarak xml versiyonunun 4-5 MB, binary 
     versiyonunun da 1 MB civarýnda olmasý muhtemel. Taþýnabilirliði arttýrmak için sýkýþtýrma yolu
     da denenebilir.

2. Denetim yapýlacak kelime için ön inceleme - iþlem yapýlmasý
   - Çok mu kýsa? 'o' hariç.
   - Çok mu uzun? <40 En uzun kelimemiz : Çekoslovakyalýlaþtýrabileceklerimizden ?
   - Geçersiz harf taþýyor mu? <-- Azericede Q ve x var, o yüzden diyalektler için farklý olabilir. 
   - Noktalama iþsretlerinden arýndýrýlmalýdýr
   - Tamamen küçük harfe dönüþtürülmelidir.

3. Kök adaylarýnýn belirlenmesi. Bu, hassas bir konu. 
   - Kitabým kelimesinin kökü 'kitap' týr ancak içinde kitap kelimesini barýndýrmaz. 
     Dolayýsýyla kök analizinde sert sessiz ile biten kelimelerin yumuþak hallerinin de
     göz önüne alýnmasý gerekiyor, bu durumda yumuþama þartý olan sert sessizden sonra 
     sesli harf gelme kuralý da dikkate alýnabilir.
   - Performans: Çoðu kelime için tek bir kök adayý bulunacaktýr, ancak bazý kelimelerin
     çok miktarda adayý olabilir.  örneðin "Elmaslarýnýn" kelimesinin Üç adet aday kök'ü vardýr
     "El","Elma" ve "Elmas". kök arama iþleminin optimum olmasý kelime baþýna yapýlan iþ miktarýný 
     da azaltacaktýr.
   - Bu noktada, sýrf kök adaylarýnýn hýzla belirlenebilmesi için bellekteki sözlüðün yanýnda
     daha hafif bir kök aday veri yapýsýnýn da bulundurulmasý anlamlý olabilir. Bu, belli bir
     bellek yükü de getirecektir, performans getirisi incelenmeli.

4. Kök yapýlarý: 
   - Türkçe'de kök kelimeler, kelimenin türüne göre farklý ekleri alabilir ve ekler birbirine
     baðlanýrken belli kurallar vardýr, bir eke sadce belli bazý ekler birleþtirilebilir.
     Ahmet eski programda bu iþ için bir ek matrisi hazýrlamýþtý, bu matrisi kullanmak gene 
     anlamlý olabilir.
   
5. Adaylar üzerinde kelime üzerinden gidilerek muhtemel ekler sentezlenir
   - Ahmet'in örneði üzernden girdersek, "Elmaslarýnýn" kelimesi için önce "El" kelimesi bulunur
     (Bu noktada enteresan bir soru, Ahmet örneðinde El için önce çoðul ekinin deneneceðini ve Eller ile 
     uyuþmayacaðýndan olmayacaðýný yazmýþ.  ancak ler - lar ekini denemenin bile anlamý yok, çünkü El'den
     sonra gelen harf zaten 'm', isim  köküne 'm' ile baþlayan ek gelemeyeceðinden El, daha iþin baþýnda
     elenebilirdi. Belki de bu tür numaralarý þimdilik programa dahil etmemekte fayda var.)
   - Sentez sonucunda elde edilen kelime giriþ kelimesine eþit olduðu zaman kelime denetlemesi 
     baþarý ile tamamlanýr, eðer aday kök kalmamýþsa denetleme baþarýsýz demektir.  
   - Burada Perormans incelemesi yapýlabilir, ayrýca adaptif algoritmalar kullanarak kök cinslerine
     göre , hatta her kök için gelmesi en muhtemel 2-3 ek'in indexi de sözlükle beraber tutulabilir,
     bu puanlandýrmanýn doðru olabilmesi için ilginç þey denenebilir
       - Programa milyonlarca kelime verilerek istatistiki bilgiler deðerlendirilir
       - Metnin yapýsýna göre farklý ek seçim puanlandýrýlmalarý yapabilir (jenerik, hukuki, bilimsel vs.)
     Performans çalýþmasýnýn bir diðer ayaðý da karþýlaþtýrma iþlemlerindeki mini numaralar olabilir,
     hash deðerlerinin karþýlaþtýrýlmasý vs gibi. 
     

6. Ýstisnai durumlar

KELÝME TAVSÝYESÝ        
Bozuk kelimeler için uygun tavsiyelerde bulunmak oldukça farklý bir yol izlemeyi gerektirebilir.
Bu durumda da yakýnlýk analizi, kök türü, hatta kýsmi bir anlamsal analiz çok daha iyi tavsiyelerde
bulunulmasýný saðlayabilir.
Örneðin "Elmazlarýnýn" kelimesi için "Elmalarýnýn" ,"Elmaslarýnýn", "Olmazlarýnýn" tavsiyelerini 
verebilmek oldukça zorlu bir iþmiþ gibi görünüyor.



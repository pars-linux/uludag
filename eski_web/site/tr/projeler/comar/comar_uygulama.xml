<?xml version="1.0" encoding="utf-8" standalone="no"?>

<!DOCTYPE book SYSTEM "http://www.uludag.org.tr/style/uludagbook.dtd"
[
  <!ENTITY projectname "ÇOMAR">
  <!ENTITY longname "Configuration by Objects: Modify And Restart">
]>


<book version="0.1" lang="tr" type="guide">

  <bookinfo>
    <title>&projectname; (&longname;)</title>

    <author author_id="2">
      <firstname>Barış</firstname>
      <lastname>Metin</lastname>
      <address>
        <email>baris@uludag.org.tr</email>
      </address>
    </author>

    <pubdate>2004-03-29</pubdate>
    <revhistory>
      <revision author_id="1">
        <revnumber>0.1</revnumber>
	<date>2004-03-29</date>
      </revision>
    </revhistory>

    <abstract>
      <para>
        Daha önceki &projectname; dökümanında, genel hatları ile, neden &projectname;'a ihtiyacımız olduğunu ve nasıl bir &projectname; hayal ettiğimizi anlatmaya çalışmıştık. Bu dökümanda biraz daha uygulamaya yönelik olarak &projectname;'ı anlatmaya çalışacağız.
      </para>
    </abstract>
  </bookinfo>
  
  <chapter>
    <chapterinfo>
      <title>Klasik senaryo: AddVHost()</title>
      <abstract>
         <para>
            Alıştığımız tartışma konusunu bozmadan sistem web sunucusuna bir sanal alan adı (virtual host) eklemek işi ile örneklendirmeye çalışalım. Bir önceki dökümanın ötesinde tasarıma daha yakın örnek detayları ve sonunda kaba bir tasarım kararı ile sonlandırmaya çalışacağız.
         </para>
      </abstract>
    </chapterinfo>
    
    <sect1>
      <title>İnsanlar konuşa konuşa... &projectname; da öyle!</title>
      <para>
         <graphic source="/img/comar/COMAR_Prototype.png" />
      </para>
      <para>
         Bir önceki dökümanda anlatılanları genişleterek (belki biraz şekillendirerek/değiştirerek) dialog temelli bir yapılandırma sürecini örneklemeye çalışalım. Bileşenleri burada teker teker şekillendirmeyeceğiz, ÇOMAR tanımı dökümanında bileşenlerin resimli tanımları yapılmıştı. Dolayısı ile bu dökümanı okumadan <link url="comar.xml">bir önceki dökümanı</link> okumak yararlı olacaktır, fakat fazla etkisinde kalmayın :).
      </para>
      <para>
        Yapılandırma aracı başlatılır, veya bir şekilde ÇOMARD ile iletişime geçecek olan arayüz (Interface) tetiklenir. Yalnızca dialoğu yazarak buradan tasarım detayları hakkında bir fikir oluşturmaya çalışacağım.
      </para>
      
      <para>
        <em>Interface -> Comard</em>: {"service":"webserver", "command":"addvhost", "data":"some data....."}
      </para>
      <para>
        <em>Comard -> ConfStorage</em>: get_default_service("webserver")
      </para>
      <para>
        <em>ConfStorage -> Comard</em>: default["webserver"] = "apache2"
      </para>
      <para>
        <em>Comard -> ObjectDatabase</em>: find_object("apache2")
      </para>
      <para>
        <em>ObjectDatabase -> Comard</em>: apache2_obj = "/path_or_reference/to/apache2_object"
      </para>
      <para>
        <em>Comard -> apache2_obj</em>: commands = get_commands(); if "addvhost" in commands: addvhost(some data);
      </para>
      <para>
        <em>apache2_obj -> some_configuration_tool</em>: modify_conf_file_with_data(some data);
      </para>
      <para>
        <em>some_configuration_tool -> apache2_obj</em>: result = some_return_value
      </para>
      <para>
        <em>apache2_obj -> Comard</em>: result = more_meaningful_return_value_from_some_return_value
      </para>
      <para>
        <em>Comard -> apache2_obj</em>: inform_service_about_the_configuration();
      </para>
      <para>
        <em>apache2_obj -> Comard</em>: result = "service informed with a Restart" || "service informed with a Reload" || "no need to inform, changes are allready applied"
      </para>
      <para>
        <em>Comard -> Interface</em>: send_result_as_string("Configuration done!")
      </para>

      <para>
        Bu hayal ürünü konuşmalar ve fonksiyonlar genel anlamda bir yapılandırma sürecini tanımlayabilir. Dikkat edilmesi gereken, bir önceki dökümandan farklı olarak yeni bir bileşen gözükmekte, <strong>some_configuration_tool</strong>.
      </para>
      <para>
        &projectname;'ı bir soyutlama katmanı olarak hayal ediyorduk. Dolayısı ile &projectname; ilk adımlarını atarken asıl yapılandırma işlemi için farklı "backend"ler kullanabilir. Asıl hedeflediğimiz <em>soyutlama ve birleştirme</em> görevlerini bu sayade daha rahat gerçekleştirebilir ve teoride, işletim sistemi bir görünüm bile alabilir.
      </para>
      <para>
        İlk "backend" olarak, <link url="http://www.webmin.com">Webmin</link> düşünülebilir. Yapılandırma işlerini ayrı ayrı yapan Webmin modülleri (apache2_obj gibi) nesneler tarafından çağırılabilir. 
      </para>

      <para>
        Uyarlamaya (Implementasyon) doğru giderken, &projectname;'ı öncelikle bir <strong>simülasyon</strong> olarak düşünebiliriz. Objeler içerisinden çağırılacak/kullanılacak, yapılandırma fonksiyonlarını ideal olarak hep doğru değer döndüren, boş fonksiyonlar olarak bırakabiliriz. Böylelikle yukarıdaki senaryonun(dialog) soyutlama ve birleştirme görevleri ile ilgilenebiliriz.
      </para>

      <para>
        Bunun için;
        <orderedlist>
          <listitem>Öncelikli olarak bir nesne sıradüzeni (DOM) oluşturmaya başlayacağız.</listitem>
          <listitem>Nesneler için basit bir tanım dili oluşturacağız, bu nesnelerin oluşturulma işlemini kolaylaştıracaktır.</listitem>
          <listitem>ConfStorage içerisinde saklanacak bileşenleri belirleyeceğiz.</listitem>
          <listitem>Comard sunucusunu, bu sunucu ile konuşacak kullanıcı arabirimlerini (prototip) hazırlayacağız.</listitem>
        </orderedlist>
        adımlarını işletmeyi planlıyoruz.
      </para>
    </sect1>
    
 </chapter>

	   
</book>

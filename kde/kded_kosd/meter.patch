Index: osd.cpp
===================================================================
--- osd.cpp	(revision 29273)
+++ osd.cpp	(working copy)
@@ -32,9 +32,6 @@
 #include <Plasma/Svg>
 #include <Plasma/Theme>
 
-#include <iostream>
-using namespace std;
-
 #define OSD_BASE_WIDTH 900
 #define OSD_BASE_HEIGHT 400
 
@@ -56,24 +53,46 @@
 
 #define FONT_BASE_SIZE 65
 
-OSD::OSD()
-    : QWidget(0, Qt::Window | Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint | Qt::X11BypassWindowManagerHint),
-    m_backPanel(this), m_meter(this), m_timer(this),
-    m_hPos(50), m_vPos(70), m_scaleFactor(0.3f), m_opacity(0.9f),
-    m_lockPrimaryScreen(false), m_isVisible(false)
+OSD::OSD(QWidget *parent)
+: QGraphicsView(parent)
+, m_backPanel(new Plasma::FrameSvg(this))
+, m_scene(new QGraphicsScene(this))
+, m_container(new QGraphicsWidget)
+, m_meter(new Plasma::Meter)
+, m_timer(new QTimer(this))
+, m_hPos(50)
+, m_vPos(70)
+, m_scaleFactor(0.3f)
+, m_opacity(0.9f)
+, m_lockPrimaryScreen(false)
+, m_isVisible(false)
 {
+    // Set Window flags and attributes
+    setWindowFlags(Qt::Window | Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint | Qt::X11BypassWindowManagerHint);
+    setFrameStyle(QFrame::NoFrame);
+    setAttribute(Qt::WA_TranslucentBackground);
+    setWindowOpacity(1.0);
+
     // Load theme
-    this->slotReloadTheme();
+    slotReloadTheme();
     connect(Plasma::Theme::defaultTheme(), SIGNAL(themeChanged()), this, SLOT(slotReloadTheme()));
 
     // Set timer
     m_timer.setSingleShot(true);
     connect(&m_timer, SIGNAL(timeout()), this, SLOT(slotHide()));
 
-    this->setAttribute(Qt::WA_TranslucentBackground);
+    // Set layout
+    //m_layout = new QGraphicsLinearLayout(Qt::Vertical, m_container);
 
-    this->setWindowOpacity(1.0);
-    this->updateLayout();
+    // Set meter
+    m_meter.setMeterType(Plasma::Meter::BarMeterHorizontal);
+    m_meter.setMaximum(100);
+
+    // Set scene
+    setScene(m_scene);
+
+
+   //updateLayout();
 }
 
 
@@ -91,7 +110,7 @@
         percent = 10;
 
     m_scaleFactor = (float)percent / 100.0f;
-    this->updateLayout();
+    updateLayout();
 }
 
 
@@ -113,7 +132,7 @@
         percent = 100;
 
     m_opacity = (float)percent / 100.0f;
-    this->setWindowOpacity(m_opacity);
+    setWindowOpacity(m_opacity);
 }
 
 
@@ -142,7 +161,7 @@
 
     m_xPos = rect.x() + (unsigned int)((rect.width() - m_width) / 100.0f * m_hPos);
     m_yPos = rect.y() + (unsigned int)((rect.height() - m_height) / 100.0f * m_vPos);
-    this->setGeometry(m_xPos, m_yPos, m_width, m_height);
+    setGeometry(m_xPos, m_yPos, m_width, m_height);
 }
 
 
@@ -180,13 +199,20 @@
     m_meter.setFont(meterFont);
 
     m_backPanel.resizeFrame(QSize(m_width, m_height));
-    this->setMask(m_backPanel.mask());
+    setMask(m_backPanel.mask());
+
+    /*
+    QGraphicsLinearLayout *layout = new QGraphicsLinearLayout(Qt::Vertical, m_container);
+    layout->addItem(m_meter);
+    layout->addItem(m_labelFont);
+    m_scene->addItem(m_container);
+    */
 }
 
 
 void OSD::display(QString icon, QString text, unsigned int percent)
 {
-    this->updatePosition();
+    updatePosition();
 
     m_icon = KIconLoader::global()->loadIcon(icon, KIconLoader::NoGroup, m_iconRect.width());
     m_labelText = text;
@@ -199,8 +225,8 @@
     if (!Plasma::Theme::defaultTheme()->windowTranslucencyEnabled() && !m_isVisible)
         m_screenshot = QPixmap::grabWindow(QApplication::desktop()->winId(), m_xPos, m_yPos, m_width, m_height);
 
-    this->QWidget::show();
-    this->QWidget::update();
+    show();
+    update();
 
     m_isVisible = true;
     m_timer.start(m_timeout*1000);
@@ -209,7 +235,7 @@
 
 void OSD::slotHide()
 {
-    this->hide();
+    hide();
     m_isVisible = false;
 }
 
@@ -218,15 +244,17 @@
 {
     // Load back panel
     m_backPanel.setImagePath("dialogs/background");
+    /* FIXME:
     if (!m_backPanel.isValid())
         cerr << "Back panel SVG is not valid!" << endl;
+    */
 
     // Get the standard plasma font
     m_labelFont = Plasma::Theme::defaultTheme()->font(Plasma::Theme::DefaultFont);
     m_labelFont.setBold(true);
     m_labelColor = Plasma::Theme::defaultTheme()->color(Plasma::Theme::TextColor);
 
-    this->updateLayout();
+    updateLayout();
 }
 
 
Index: osd.h
===================================================================
--- osd.h	(revision 29273)
+++ osd.h	(working copy)
@@ -22,16 +22,20 @@
 #define OSD_H
 
 #include <QTimer>
+#include <QGraphicsView>
 #include <QDesktopWidget>
-#include <QProgressBar>
+#include <QGraphicsScene>
+#include <QGraphicsWidget>
+#include <QGraphicsLinearLayout>
 
 #include <KDE/Plasma/FrameSvg>
+#include <KDE/Plasma/Meter>
 
-class OSD : public QWidget
+class OSD : public QGraphicsView
 {
     Q_OBJECT
-    public:
-        OSD();
+public:
+        OSD(QWidget *parent = 0);
         ~OSD();
 
         void setSize(unsigned int percent);
@@ -47,11 +51,15 @@
             void slotHide();
         void slotReloadTheme();
 
-    private:
+private:
         void updatePosition();
         void updateLayout();
         void paintEvent(QPaintEvent*);
 
+        QGraphicsScene *m_scene;
+        QGraphicsWidget *m_container;
+        QGraphicsLinearLayout *m_layout;
+
         Plasma::FrameSvg m_backPanel;
         QRect m_rect;
 
@@ -63,7 +71,7 @@
         QFont m_labelFont;
         QColor m_labelColor;
 
-        QProgressBar m_meter;
+        Plasma::Meter m_meter;
 
         QTimer m_timer;
 

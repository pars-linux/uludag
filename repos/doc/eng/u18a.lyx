#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble
\tolerance 10000
\end_preamble
\language turkish
\inputencoding latin5
\fontscheme pslatex
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Uluslararasýlaþtýrma
\layout Standard
\pagebreak_bottom 

\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Yerel Sistemi
\layout Standard

Programlarýn deðiþik ülke ve kültürlerin iletiþim kurallarýna uydurulabilmesi
 için geliþtirilmiþtir.
 Bu kurallar, tarih ve saatin yazým þekli gibi basitlerden, kullanýlan dilin
 özellikleri gibi karmaþýklara kadar yayýlabilir.
 Programlar çalýþma ortamýndan kullanýcýnýn belirlediði kural kümelerini
 alýr ve kendilerini buna uydururlar.
 Bu kümelere yerel (locale) adý verilir.
\layout Subsection

Kategoriler
\layout Standard

ISO C standardý aþaðýdaki yerel kategorilerini tanýmlar:
\layout Description

LC_CTYPE Karakter kodlamalarý.
 Karakter sýnýflama (isalpha, isspace, \SpecialChar \ldots{}
), karakter dönüþtürme (tolower,
 mbstowcs, \SpecialChar \ldots{}
), sözcük karþýlaþtýrma (strcmp, strcasecmp, \SpecialChar \ldots{}
) gibi fonksiyonlarýn
 davranýþýný belirler.
\layout Description

LC_COLLATE Yerel kurallarýna göre sýralama (strcoll, strxfrm, \SpecialChar \ldots{}
) fonksiyonlarýnýn
 davranýþýný belirler.
\layout Description

LC_MESSAGES Program iletilerinin dilini belirler.
 'gettext' seçili olan dili burdan bulur.
\layout Description

LC_MONETARY Para deðerlerinin gösterimi için kullanýlan kuruþ ve binlik
 ayrým iþareti, para birimi gibi bilgileri verir.
\layout Description

LC_NUMERIC Sayýlarýn gösterim kurallarýný verir.
 Biçimli G/Ç fonksiyonlarý (printf, atof, \SpecialChar \ldots{}
) bu kurallarý kullanýr.
\layout Description

LC_TIME Tarih ve saat gösterim biçimi, ay ve günlerin adlarý gibi bilgileri
 verir.
 strftime ve benzeri fonksiyonlarýn davranýþlarýný belirler.
\layout Description

LC_ALL Tüm kategorileri kapsar.
\layout Standard

Sözcüklerin karþýlaþtýrýlmasý, büyük/küçük harf dönüþümü, biçimli G/Ç gibi
 standart C kitaplýðýnca saðlanan görevler, o anda geçerli yerel seçimine
 göre otomatik olarak doðru sonuçlarý döndürürler.
 Yerel kurallarýna göre sýralama, iletilerin çevrilebilmesi gibi özellikler
 için ise, programýn bu özelliði destekleyecek biçimde yazýlmasý gerekir.
\layout Subsection

Yerel Ýsimleri
\layout Standard

Öntanýmlý olarak her sistemde bulunan üç adet yerel adý vardýr:
\layout Description


\begin_inset Quotes eld
\end_inset 

C
\begin_inset Quotes erd
\end_inset 

 Fonksiyonlar ISO C tarafýndan standartlaþtýrýldýðý biçimde davranýrlar.
 Programlar çalýþmaya her zaman bu yerel ile baþlar.
\layout Description


\begin_inset Quotes eld
\end_inset 

POSIX
\begin_inset Quotes erd
\end_inset 

 Posix standardýný belirtir.
 C ile eþ özellikler taþýr.
\layout Description


\begin_inset Quotes eld
\end_inset 


\begin_inset Quotes erd
\end_inset 

 Boþ bir isim verildiðinde, ortam deðiþkenlerinden kullanýcýnýn ayarladýðý
 yerel seçilir.
\layout Standard

Diðer yerel isimleri sistemden sisteme deðiþmektedir.
 Kabuk ortamýnda
\layout Quote

locale --a
\layout Standard

komutunu vererek kurulu yerelleri görebilirsiniz.
 Yerel isimleri genellikle þu biçimdedir:
\layout Quote

dil [ _bölge ] [ .karakterseti ] [ @deðiþtirici ]
\layout Standard

Köþeli parantez içindeki kýsýmlar isteðe baðlýdýr.
 Dil için ISO 639 tarafýndan tanýmlanmýþ iki küçük harften oluþan dil kodlarý
 (en, tr, fr, \SpecialChar \ldots{}
) kullanýlýr.
 Bölge ise ISO 3166 ile tanýmlanan iki büyük harfle (US, GB, TR, \SpecialChar \ldots{}
) gösterilir.
\layout Subsection

Yerel Seçimi
\layout Standard

Program içinden yerel seçmek için
\layout LyX-Code

char *setlocale (int category, const char *locale);
\layout Standard

çaðrýsý kullanýlýr.
 Ýlk parametre deðiþtirilecek kategoriyi belirten ve yerel kategorileri
 ile ayný adý taþýyan makrolardan biridir.
 Ýkinci parametre ise seçilecek yerel adýdýr.
 Fonksiyon geçerli yerel adýný geriye döndürür.
 Dönen deðer C kitaplýðýna ait olduðu için üzerinde deðiþiklik yapmayýn,
 yapmanýz gerekiyorsa yada ilerde kullanacaksanýz bir kopyasýný alýn.
 Verdiðiniz yerele geçiþ yapýlamazsa geriye NULL deðeri döner.
 Ýkinci parametre olarak NULL deðerini vererek, o anki yerel adýný bir deðiþikli
ðe yol açmadan öðrenebilirsiniz.
\layout Standard

Program baþlangýcýnda kullanýcýnýn ayarlarýný geçerli kýlmak için:
\layout LyX-Code

setlocale (LC_ALL, "");
\layout Standard

komutunu vermelisiniz.
 Bir iþlem için standard yerele ihtiyacýnýz olduðunda yada geçici olarak
 yerel deðiþtirmek istiyorsanýz þöyle bir kod kullanabilirsiniz:
\layout LyX-Code

#include <locale.h>
\layout LyX-Code

char *old, *saved;
\layout LyX-Code

old = setlocale (LC_ALL, NULL);
\layout LyX-Code

if (old) {
\layout LyX-Code

    saved = strdup (old);
\layout LyX-Code

    set_locale (LC_ALL, "C");
\layout LyX-Code

    ...
\layout LyX-Code

    set_locale (LC_ALL, saved);
\layout LyX-Code

    free (saved);
\layout LyX-Code

}
\layout Section

UNICODE
\layout Standard

UNICODE, Unicode Consortium organizasyonu tarafýndan geliþtirilen ve her
 karaktere bir sayý deðeri karþýlýðý atayan bir standarttýr.
 Evrensel Karakter Seti (UCS) olarak bilinen ISO/IEC 10646 standardý ise,
 her iki organizasyonun iþbirliði ile ayný sayýsal karþýlýklarý taþýmaktadýr.
 Bu set,
\layout Itemize

Yeryüzündeki tüm karakterlere bir sayý deðeri atamayý amaçlamaktadýr.
\layout Itemize

Zaman içinde yeni karakterler eklenebilir ama eski karakterlerin sayý deðerleri
 ayný kalýr.
\layout Itemize

Sayý deðerleri UCS-4 adlý 31 bitlik set üzerinden verilir.
 Ýlk 7 bit 'Group', sonraki 8 bit 'Plane', sonraki 8 bit 'Row', en son 8
 bit 'Cell' olarak gruplanýr.
 Ýlk 'Plane' (group = 0, plane = 0) Basic Multilingual Plane (BMP) olarak
 adlandýrýlýr.
 BMP, UCS-2 adý verilen 16 bitlik sete karþýlýk gelmektedir.
\layout Itemize

UCS üzerindeki karakter kod noktalarý genellikle 
\series bold 
u
\series default 
+0a31 biçiminde onaltýlýk sistemde sayýlar olarak gösterilir.
\layout Itemize


\series bold 
u
\series default 
+0021 -- 
\series bold 
u
\series default 
+007e arasýndaki kodlar ASCII ile, 
\series bold 
u
\series default 
+00a0 -- 
\series bold 
u
\series default 
+00ff arasýndaki kodlar ISO 8859-9 ile ayný tutulmuþtur.
\layout Standard

Unicode kodlarýndan oluþan karakter dizilerini (metinleri) bilgisayarda
 verimli bir biçimde saklayabilmek amacýyla çeþitli karakter kodlamalarý
 (encoding) geliþtirilmiþtir.
\layout Subsection

UTF-8 
\series medium 
\size small 
(RFC 3629)
\layout Standard

UTF-8 (Unicode Transformation Format - 8bit) kodlamasý UNICODE karakterlerini
 1-6 byte uzunluðunda diziler olarak kodlar.
 ASCII kodlamasý içinde 0-127 arasýnda kalan karakterler aynen kendi kodlarý
 ile kullanýlýr, diðerleri ise byte dizileri haline gelir.
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
U+00000000 - U+0000007F
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
0xxxxxxx
\end_inset 
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
U+00000080 - U+000007FF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
110xxxxx 10xxxxxx
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
U+00000800 - U+0000FFFF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
1110xxxx 10xxxxxx 10xxxxxx
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
U+00010000 - U+001FFFFF 
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
U+00200000 - U+03FFFFFF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
U+04000000 - U+7FFFFFFF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

UTF-8 þu özellikleri taþýr:
\layout Itemize

Her saf (0-127 arasý karakterlerden oluþan) ASCII dizisi geçerli bir UTF-8
 dizisidir.
\layout Itemize

0 ile 127 arasý deðerler kendi karakter karþýlýklarý dýþýnda dizilerde geçmezler.
 Böylece örneðin '%', ':', '(', ')' gibi karakterleri parse edip, diðer
 karakterleri aynen geçiren parser ve programlar (ayrýca C printf benzeri
 fonksiyonlarý) diðer UNICODE karakterlerinden etkilenmezler.
\layout Itemize

Sýfýr deðerli byte dizi içinde geçmez.
 Böylece strlen gibi fonksiyonlar çalýþmaya devam eder.
 Ancak gerçek karakter uzunluðu yerine byte uzunluðu döndürmeye devam ettiklerin
e dikkat edilmelidir.
\layout Itemize

Bir UTF-8 byte'ý bir karakterin kod dizisinin ilk byte'ý ise, kendisinden
 sonra kaç byte geleceði hemen anlaþýlýr.
 Herhangi bir byte'ýn bir karakter kodunun dizisine ait olduðu tek bir bit
 kontrolü ile anlaþýlýr.
\layout Itemize

Boyer-Moore hýzlý metin arama algoritmasý UTF-8 ile kullanýlabilir.
\layout Itemize

UTF-8 <-> Unicode çevrimleri kolaydýr.
\layout Itemize

UTF-8 dizilerini baþka bir karakter kodlamasý bilgisi olmamasý durumunda
 istatistiksel olarak tesbit etmek kolaydýr.
\layout Itemize

MIME kodlamalarýnda ve baþka yerlerde 'UTF-8' biçiminde yazýlýr.
\layout Itemize

UTF-8 kullanan uygulamalar, güvenlik açýsýndan her karakter dizisinin geçerlilið
ini kontrol etmelidir.
 Her olasý byte dizisi geçerli bir UTF-8 dizisi deðildir.
 Örnek olarak geçersiz UTF-8 dizisi 0xC0 0x80, eðer normal UTF-8 çevrimi
 iþlemine sokulursa sýfýr karakter deðerini verir.
 Ayný þekilde 0x2F 0x2E 0x2E 0x2F (/../) yi yasaklayan bir program, geçersiz
 0x2F 0xC0 0xAE 0x2E 0x2F dizisi ile kandýrýlabilir.
 Bu sebepten dýþardan gelen her türlü UTF-8 dizisinin önce geçerliliði kontrol
 edilmelidir.
\layout Standard

UTF-8 geriye uyumluluk saðlamasý ve Türkçe için en az bellek israfýna yol
 açmasý nedeniyle Uludað projesinde öntanýmlý karakter kodlamasý olarak
 tercih edilmiþtir.
\layout Subsection

UTF-16 
\series medium 
\size small 
(RFC 2781)
\layout Standard

UTF-16 (Unicode Transformation Format - 16bit), Unicode BMP içinde kalan
 karakterleri 2 byte'lýk diziler olarak kodlar.
 BMP dýþýnda kalan karakterleri kodlayabilmek için surrogate pair (vekil
 çift?) denen 4 byte'lýk diziler kullanýlýr.
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
U+00000000 - U+0000FFFF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
xxxxxxxx xxxxxxxx
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
U+00010000 - U+0010FFFF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\family typewriter 
\size footnotesize 
110110xx xxxxxxxx 110111xx xxxxxxxx
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

Çiftin üst on bitini içeren kýsmý 0xD800 ile 0xDBFF arasýndayken, alt on
 biti taþýyan kýsým 0xDC00 ile 0xDFFF arasýndadýr.
 Bu deðerler arasýndaki 16 bitlik deðerler Unicode üzerinde özel olarak
 UTF-16'ya ayrýlmýþ ve hiç bir karaktere atanmamýþtýr.
\layout Standard

Ýþlemciler 16 bitlik deðerleri bellekte tutmak için farklý yöntemler kullanmakta
dýr.
 Örneðin 258 (0x0102) deðeri little-endian iþlemcilerde 0x02 0x01, big-endian
 iþlemcilerde ise 0x01 0x02 diziliminde tutulmaktadýr.
\layout Standard

UTF-16 dizileri için bir endian standardý belirlenmemiþtir.
 Metin UTF-16BE ya da UTF-16LE olarak iþaretlenmemiþse (MIME, vb ile) iþleyici
 metnin ilk iki byte'ýna bakar.
 Byte sýra iþareti (Byte Order Mark, BOM) adlý karakter (0xFEFF) metnin
 byte sýralanmasýný göstermek için ayrýlmýþtýr.
 Ýlk iki byte 0xFF 0xFE ise metin little-endian, 0xFE 0xFF ise big-endian
 olarak iþlenir.
 UTF-16 metinleri birbirine eklerken araya gelen BOM karakterini çýkartmaya
 dikkat edilmelidir.
 Ýþaretlenmemiþ ve BOM taþýmayan diziler için bir yol gösterilmemiþtir.
\layout Section

Çeviri
\layout Standard

Uygulamalarýn içerdiði iletilerin diðer dillere kolayca çevrilebilmesini
 saðlamak için 
\begin_inset Quotes eld
\end_inset 

gettext
\begin_inset Quotes erd
\end_inset 

 adýnda bir alt yapý geliþtirilmiþtir.
 Programlarýn nasýl yazýlmasý gerektiðine dair bir dizi kural, çeviri dosyalarý
 için bir biçim, çevrilmiþ iletilere eriþmek için bir kitaplýk ve çevirileri
 iþlemek için çeþitli araçlardan oluþmaktadýr.
 Uygulamalarýn en az deðiþiklikle çevrilebilir hale getirilebilmeleri için
 tasarlanmýþtýr ve çok yaygýn olarak kullanýlmaktadýr.
\layout Standard

Bir uygulamanýn çevrilebilmesi için, kod ve derleme sistemi üzerinde gerekli
 deðiþiklikler programcý tarafýndan yapýlmýþ olmalýdýr.
 Bundan sonra çevirmen uygulamaya ait 'po' dosyalarýný çevirerek uygulamayý
 yerelleþtirebilir.
\layout Subsection

Kod Deðiþiklikleri
\layout Subsubsection

Temel Kullaným
\layout Standard

'gettext' programlama arabirimi, Sun tarafýndan 1990 yýlýnda Uniforum'a
 gönderilen bir öneriden yola çýkmýþtýr.
 Bugün için OpenI18N standardý tarafýndan belirlenir.
 Temel özelliði programlarýn en az deðiþiklikle çevrilebilir hale getirilebilmes
idir.
\layout Standard

Burdaki çaðrýlarý kullanabilmek için öncelikle 'libintl.h' adlý baþlýk dosyasý
 include edilir.
 Bunu gettext çaðrýlarýnýn kullanýldýðý kod dosyalarýnda ve gettext ile
 çevrilen format string'lerini kullanan printf, sprintf, vb fonksiyonlarýnýn
 bulunduðu dosyalarda yapmalýsýnýz.
\layout Standard

Çeviri sistemin en temel iþlevleri; çevrilecek iletilerin bulunduðu alaný
 belirlemek, ve iletiye karþýlýk gelen çeviriyi almaktýr.
 Tüm programlarýn iletilerinin ayný alanda tutulmasý, bakým ve yönetim açýsýndan
 zor olacaðý için bu alan kavramý kullanýlýr.
 Çeviri alaný,
\layout LyX-Code

char *textdomain (const char *domain_name); 
\layout Standard

fonksiyonu ile belirlenir.
 domain_name seçilecek alan adýný içeren bir C string'idir.
 NULL deðerini taþýmasý durumunda seçimi deðiþtirmeden o an aktif olan alan
 adýný öðrenebilirsiniz.
 Alanýn dosya sisteminde hangi dizinden çevirilere bakacaðýný;
\layout LyX-Code

char *bindtextdomain (const char *domain_name,
\layout LyX-Code

        const char *dir_name); 
\layout Standard

ile belirleyebilirsiniz.
 Bu iþlemler genellikle programýn baþýnda yapýlýr.
 Bir örnek:
\layout LyX-Code

setlocale (LC_ALL, NULL);
\newline 
bindtextdomain (PACKAGE, LOCALEDIR);
\newline 
textdomain (PACKAGE);
\layout Standard

Burada ilk önce, setlocale çaðrýsý ile standart C kitaplýðýnýn tüm kategorilerde
 kullanýcýnýn seçtiði yerelleþtirmeyi kullanmasý saðlanmakta.
 Daha sonra ise alana ait dizin seçilmekte ve alan etkinleþtirilmektedir.
 PACKAGE ve LOCALEDIR makrolarý, autoconf sistemi tarafýndan "ornek" ve
 "/usr/share/locale" olarak ayarlanmýþtýr.
 Bu durumda bu satýrlar çalýþtýðýnda Türkçe için /usr/share/locale/tr/LC_MESSAGE
S/ornek.mo" adlý dosyadan çeviriler yüklenecek ve kullanýma hazýr hale gelecektir.
\layout Standard

Bu alandan bir ileti çevirisi almak için ise,
\layout LyX-Code

char *gettext (const char *msgid); 
\layout Standard

fonksiyonu kullanýlýr.
 Dönüþ deðeri, verilen iletinin, o an seçili alan içinde, kullanýcýnýn ayarladýð
ý dile çevrilmiþ halidir.
 Bu çaðrýyý alaný deðiþtirip tekrar yaparsanýz, ikinci sonuç yeni seçilen
 alandan gelir.
 Optimizasyon açýsýndan döngü içinde kullanmamakta yarar görülebilirse de,
 GNU gettext alan deðiþmediði sürece çeviri sonuçlarýný cache'lediðinden
 bu o kadar önemli deðildir.
 Kullanýcýnýn dilinde bir çeviri olmadýðý durumlarda gettext, msgid iletisini
 aynen geri verir.
\layout LyX-Code

printf (gettext ("Hello dear translator, 6 * 9 = %d"), 42); 
\layout Standard

Örnekte görüldüðü gibi kullanýlan yazý dizilerini gettext fonksiyonu içine
 almak gibi çok kolay bir iþlem ile program çevrilebilir hale gelmekte.
 Çevrilecek iletiler baþka bazý sistemlerdeki gibi özel ID ler ile belirtilmek
 yerine direk kendi metni ile aranmakta.
 Tabi bunu daha da kolaylaþtýrmak için C dilinin makro özelliðinden yararlanabil
iriz:
\layout LyX-Code

#define _(Dizi) gettext (Dizi)
\newline 
printf (_("Hello dear translator, 6 * 9 = %d"), 42);
\layout Standard

Böylece her ileti baþýna yalnýzca 3 karakter (altçizgi, parantez aç, parantez
 kapa) israf etmiþ oluyoruz.
 Program yazmaya baþlarken bir i18n.h baþlýk dosyasý yaratýp içine bu makroyu
\layout LyX-Code

#define _(Dizi) Dizi 
\layout Standard

biçiminde koyarsanýz ve iletilerinizi _(...) ile kuþatýrsanýz, ilerde programýn
 çevrilmesi gerektiðinde tek yapmanýz gereken bu i18n.h dosyasýný deðiþtirip,
 programýnýzý gettext kitaplýðý ile baðlamak olacaktýr.
 Yeni programlarýnýza baþlarken çeviri alt yapýsýný bütünüyle eklemeseniz
 bile, bu basit iþi yapýp, ilerde kolaylýk saðlamanýzý þiddetle öneriyoruz!
\layout Standard

Programýnýzda bu deðiþiklikleri yaptýktan sonra çaðýracaðýnýz xgettext adlý
 program, tüm kodu tarayýp gettext ve _ ile iþaretlenmiþ metinleri PROGRAMADI.pot
 adlý bir dosyada toplar.
 Daha sonra çevirmenler bu özel biçimli dosyadan birer kopya çýkarýp içindeki
 metinleri çevirerek programýnýzý kolayca baþka bir dile taþýyabilir.
\layout Subsubsection

Sorunlu Noktalar
\layout Standard

Tabi metinler program içinde her zaman böyle bir fonksiyon çaðrýsý ile kolayca
 çevrilebilecek biçimde kullanýlmýyor.
 Dillerin farklý yapýlarý da kimi sorunlar çýkarmakta.
 Örneðin isimlerin çoðul ve tekil hallerinin kullanýmý dilden dile deðiþmekte.
\layout LyX-Code

printf ("%d file%s deleted", n, n == 1 ? "" : "s"); 
\layout Standard

Burada son parametredeki ? deyimi n deðeri 1 olmadýðý koþullarda 'file'
 yerine 'files' þeklinde çýktý verilmesini saðlamakta.
 Ancak Türkçe ve benzeri dillerde Ýngilizce'deki bu kural yok.
 Bu durumlarda daha açýk yazmayý tercih etmelisiniz:
\layout LyX-Code

if (n == 1)
\newline 
    printf ("%d file deleted", n);
\newline 
else
\newline 
    printf ("%d files deleted", n); 
\layout Standard

Her zaman iletileri gettext ile kuþatmanýz mümkün olmayabilir.
 Örneðin:
\layout LyX-Code

static const char *messages[] = {
\layout LyX-Code

    "some very meaningful message",
\layout LyX-Code

    "and another one"
\layout LyX-Code

};
\newline 
fputs (gettext (messages[i]));
\layout Standard

Burdaki sorun, basýlacak olan ileti için gettext fonksiyonunun çaðrýlmasý,
 ancak çevrilecek iletileri içeren dosyayý oluþturacak xgettext programýnýn
 kod içerisinde bu iletileri görememesidir.
 Bunu çözümü için;
\layout LyX-Code

#define gettext_noop(x) x
\newline 
static const char *messages[] = {
\newline 
    gettext_noop ("some very meaningful message"),
\newline 
    gettext_noop ("and another one")
\newline 
};
\newline 
fputs (gettext (messages[i]));
\layout Standard

kullanýlabilir.
 gettext_noop için N_ makrosu da tanýmlanabilir, böylece fazla yazý yazmaktan
 kurtulunur.
\layout LyX-Code

#define N_ (x) gettext_noop (x) 
\layout Standard

Bu iki makro da herhangi bir kod çaðýrmaz, yalnýzca metinlerin çevrilecek
 metinler olduðunu xgettext'in anlamasýný saðlarlar.
\layout Standard

Çevirilerin rahatça yapýlabilmesi için, özgün iletilerinizin belirsizlik
 içermeyen, anlaþýlýr, tam tümceler olmasýna dikkat edin.
 Sözcükleri birleþtirmek yerine birden fazla tümce kullanmayý tercih edin,
 örneðin:
\layout LyX-Code

printf ("File %s is %s", filename,
\layout LyX-Code

        size < 16000 ? "small" : "big"); 
\layout Standard

yerine:
\layout LyX-Code

printf (size < 16000 ? _("File %s is small")
\layout LyX-Code

        : _("File %s is big"), filename); 
\layout Standard

Tek bir durumu anlatan çok satýrlý iletileri, satýr satýr basmak yerine,
 içinde 
\backslash 
n ile satýr dönüþü içeren tek bir ileti olarak kullanmaya çalýþýn.
 Böylece çevirmenler yarým satýrlarý çevirme ve bölünme yüzünden tutarsýz
 çevirmeler yapma durumunda kalmayacaklardýr.
\layout Subsubsection

Ýleri Kullaným
\layout Standard

Tek bir çeviri alaný birçok program için yeterli olsa da, bunun yetersiz
 kaldýðý bazý durumlar var.
 Örneðin bir dizi program ayný hata mesajlarýný kullanýyorlarsa bunlar tek
 bir alanda toplanabilir, böylece bir kere çevrilmeleri yeterli olur.
 Kitaplýklarda ise fonksiyonlarýn çaðýran programýn alanýndan baðýmsýz,
 kendi alanlarýndan çeviri almalarý gereklidir.
 Her ne kadar bu sorun textdomain () çaðrýlarý ile çözülebilirse de, yavaþ
 ve kullanýþsýz olur.
 Bu amaç için:
\layout LyX-Code

char *dgettext (const char *domain_name, const char *msgid); 
\layout Standard

fonksiyonu yardýmcý olur.
 Bununla farklý alanlardan ileti çevirileri alabilirsiniz.
\layout Standard

gettext sistemi yalnýzca ileti çevirilerini getirmekle kalmaz, ayný zamanda
 bunlarý saklandýklarý karakter setinden, o anki yerelleþtirmenin LC_CTYPE
 ile belirlenen etkin karakter setine de çevirir.
 Metinleri yerelleþtirmeye baðlý kalmadan kullanabilen programlar, çevirileri
 UTF-8 karakter setinde isteyebilir.
 Bunun için,
\layout LyX-Code

char *bind_textdomain_charset (const char *domain_name,
\layout LyX-Code

        const char *codeset); 
\layout Standard

kullanýlýr.
 Örneðin:
\layout LyX-Code

bind_textdomain_charset (PACKAGE, "UTF-8"); 
\layout Standard

gettext çeviri bulamadýðý durumda verilen iletiyi aynen döndürdüðü için,
 bunun kullanýldýðý durumlarda program kodundaki metinlerin UTF-8 olarak
 tutulmasý gerektiðine dikkat edin! 
\layout Subsection

Derleme Sistemi Deðiþiklikleri
\layout Standard

Kimi uygulamalar arþiv dosyasýndan açýldýklarýnda tek bir dizin içinde yayýlýr.
 Kimi uygulamalarýn ise kendi dizin hiyerarþisi mevcuttur.
 gettext kodu ve gereksindiði dosyalar çok sayýda ve karmaþýk olduðu için,
 en azýndan onlarý uygun bir biçimde ayrý dizinler olarak koymanýz tavsiye
 edilir.
 Uygulama GNU autoconf sistemini kullanýyorsa gettext entegrasyonu çok kolay
 olacaðý için öncelikle uygulamayý autoconf standardýna taþýmayý düþünün.
\layout Standard

Çerçeveyi otomatik olarak kurmak için 
\begin_inset Quotes eld
\end_inset 

gexttextize
\begin_inset Quotes erd
\end_inset 

 adlý uygulama kullanýlýr.
 Uygulamanýn en üst dizininde
\layout Quote

gettextize -\SpecialChar \textcompwordmark{}
-intl
\layout Standard

komutunu verdiðinizde aþaðýdaki iþlemleri yapar:
\layout Enumerate

Yerelleþtirmenin kullanýmý ile ilgili bilgiler veren bir ABOUT-NLS dosyasý
 en üst dizine kopyalanýr.
\layout Enumerate

Çevirileri tutacak bi 'po' dizini yaratýlýr.
\layout Enumerate

gettext kodlarýný tutacak bir 'intl' dizini yaratýlýr.
 Burdaki dosyalar kopyalanmak yerine sistemden sembolik link yapýlýr.
 Bu diskte az yer kullanarak tasarruf etmeyi ve dosyalarýn sistemde kurulu
 sürümleri ile güncel kalmasýný saðlar.
 Uygulamayý arþivlerken tar'ýn -h seçeneðini kullanarak dosyalarýn asýllarýnýn
 arþivlenmesini saðlamalýsýnýz.
 gettextize'nin -\SpecialChar \textcompwordmark{}
-copy seçeneðini kullanarak dosyalarýn link edilmek yerine
 kopyalanmasýný saðlayabilirsiniz.
 Bu yolu seçerseniz arada bir gettextize komutunu çaðýrarak dosyalarýn yeni
 sürümlerini uygulamanýza dahil etmeyi unutmayýn.
\layout Enumerate

Autoconf için config.rpath ve mkinstalldirs dosyalarý 'configure' destek
 dosyalarýnýn olduðu dizine kopyalanýr.
 Automake de kullanýyorsanýz, gereken makro dosyalarý 'm4' dizinine kopyalanýr.
\layout Standard

Bu iþlemden sonra bazý dosyalarda ufak deðiþikler yaparak entegrasyon tamamlanýr
:
\layout Subsubsection

'po' Dizini
\layout Standard

Burda öncelikle POTFILES.in adlý bir dosya açýp içine çevrilecek iletileri
 içeren kod dosyalarýnýn uygulamanýn en üst dizinine göre göreceli yolunu
 yazmalýsýnýz.
 Örnek bir dosya:
\layout LyX-Code

# List of source files containing translatable strings
\layout LyX-Code

lib/error.c
\layout LyX-Code

lib/getopt.c
\layout LyX-Code

src/main.c
\layout LyX-Code

src/ui.c
\layout Standard

Bir sonraki adým LINGUAS adlý bir dosyaya hangi çevirilerin mevcut olduðunu
 boþluklarla ayrýlmýþ biçimde yazmak.
 Kullanýcýlar hangi dilleri istediklerini burayý deðiþtirmek yerine LINGUAS
 adlý ortam deðiþkenini deðiþtirerek ayarlayabilir.
 Almanca, Fransýzca ve Türkçe çeviriler içeren bir uygulama için bir örnek:
\layout LyX-Code

# Available languages
\layout LyX-Code

de fr tr
\layout Standard

Tabiki çeviri dosyalarýný da de.po, fr.po, tr.po olarak buraya koymalýsýnýz.
\layout Subsubsection

'configure.in' Dosyasý
\layout Standard

Bu dosya autoconf tarafýndan iþlenip 'configure' scriptini yaratmakta kullanýlma
ktadýr.
 Yeni uygulamalarda 'configure.ac' adýný da taþýyabilir.
 gettext'in iþleyebilmesi için burada þu iþlemler yapýlmalýdýr:
\layout Enumerate

PACKAGE ve VERSION deðerlerini tanýmlamalýsýnýz.
 Eðer automake kullanýyorsanýz
\begin_deeper 
\layout LyX-Code

AM_INIT_AUTOMAKE(myapp,1.0.5)
\end_deeper 
\layout Enumerate

Uluslararasýlaþma desteðini kontrol etmelisiniz.
\begin_deeper 
\layout LyX-Code

AM_GNU_GETTEXT
\end_deeper 
\layout Enumerate

Deðiþiklerin yazýlacaðý dosyalarý belirtmelisiniz.
\begin_deeper 
\layout Enumerate

Eski autoconf modeli için:
\begin_deeper 
\layout LyX-Code

AC_OUTPUT([ ...sizin dosyalarýnýz...
\layout LyX-Code

        intl/Makefile po/Makefile.in])
\end_deeper 
\layout Enumerate

Yeni autoconf için:
\begin_deeper 
\layout LyX-Code

AC_CONFIG_FILES([
\newline 
        ...sizin dosyalarýnýz...
\newline 
        intl/Makefile
\newline 
        po/Makefile.in
\newline 
])
\end_deeper 
\end_deeper 
\layout Subsubsection

'Makefile.in' Dosyasý
\layout Standard

Derleme sýrasýnda intl ve po dizinlerinizin de iþlenmesini saðlamalýsýnýz.
 Eðer automake kullanýyorsanýz 'Makefile.am' dosyasýnda
\layout LyX-Code

SUBDIRS = intl ...sizin dizinleriniz...
 po
\layout Standard

þeklinde bir deðiþiklik yeterli olacaktýr.
\layout Subsubsection

Kod Dizinleri
\layout Standard

Program giriþinde çeviri alanýnýzý ayarlarken kullanacaðýnýz LOCALEDIR makrosunu
 kod dizininiz içinde 'Makefile.in' yada automake kullanýyorsanýz 'Makefile.am'
 dosyasýnda þöyle tanýmlayabilirsiniz:
\layout LyX-Code

datadir = @datadir@
\layout LyX-Code

localedir = $(datadir)/locale
\layout LyX-Code

DEFS = -DLOCALEDIR=
\backslash 

\begin_inset Quotes erd
\end_inset 

$(localedir)
\backslash 

\begin_inset Quotes erd
\end_inset 

 @DEFS@
\layout Standard

Programlar derlendikten sonra @LIBINTL@ (yada libtool kullanýyorsanýz @LTLIBINTL
@) ile baðlandýklarýndan emin olun.
 Bunu þöyle yapabilirsiniz:
\layout LyX-Code

LIBS = ...sizin kitaplýklarýnýz...
 @LIBINTL@
\layout Standard

Derleyicinizin 'intl' dizinindeki C baþlýk dosyalarýna eriþebilmesi için,
 derleme hedeflerinizde
\layout LyX-Code

-I$(top_srcdir)/intl
\layout Standard

parametresinin derleyiciye verilmesini saðlayýn.
\layout Subsection

Çeviri
\layout Standard

Çeviriye baþlarken ilk önce, paketadý.pot adlý þablon dosyasýndan DÝL.po (Türkçe
 için tr.po) adýnda bir kopya çýkartýlýr.
 Daha sonra bu dosyanýn açýklamalarý ve baþlýk bilgileri düzenlenir, ve
 iletiler teker teker çevrilir.
\layout Subsubsection

Açýklama
\layout Standard

Örnek bir .pot dosyasýnýn giriþ kýsmý:
\layout LyX-Code

# SOME DESCRIPTIVE TITLE.
\layout LyX-Code

# This file is distributed under the same license as the PACKAGE package.
\layout LyX-Code

# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
\layout Standard

Bu kýsýmda basitçe dosyanýn ne olduðunu, paketle ayný lisansa sahip olduðunu,
 ve çeviren kiþi yada kiþilerin isim ve elektronik mektup adreslerini bildiriyor
uz.
 Bir örnek:
\layout LyX-Code

# Turkish translation of Imposter
\layout LyX-Code

# This file is distributed under the same license as the Imposter package.
\layout LyX-Code

# Gurer Ozen <email@adres.com>, 2003.
\layout Subsubsection

Baþlýk
\layout Standard

Örnek bir .pot dosyasýnýn baþlýk kýsmý:
\layout LyX-Code

#, fuzzy
\layout LyX-Code

msgid ""
\layout LyX-Code

msgstr ""
\layout LyX-Code

"Project-Id-Version: PACKAGE VERSION
\backslash 
n"
\layout LyX-Code

"Report-Msgid-Bugs-To: imposter-devel@lists.sourceforge.net
\backslash 
n"
\layout LyX-Code

"POT-Creation-Date: 2004-05-30 23:50+0300
\backslash 
n"
\layout LyX-Code

"PO-Revision-Date: YEAR-MO-DA [HO]MI+ZONE
\backslash 
n"
\layout LyX-Code

"Last-Translator: FULL NAME <EMAIL@ADDRESS>
\backslash 
n"
\layout LyX-Code

"Language-Team: LANGUAGE <LL@li.org>
\backslash 
n"
\layout LyX-Code

"MIME-Version: 1.0
\backslash 
n"
\layout LyX-Code

"Content-Type: text/plain; charset=UTF-8
\backslash 
n"
\layout LyX-Code

"Content-Transfer-Encoding: 8bit
\backslash 
n"
\layout Standard

Görüldüðü gibi burda çeviri ile ilgili daha detaylý bilgiler var.
 Açýklamalar dosyayý okuyan kiþiye hitap ederken, bu kýsým çeviri sistemi
 tarafýndan kullanýlýyor.
 Örneðin kullanýlan karakter seti burda belirleniyor.
 Burada PACKAGE ve VERSION yerine paket adý ve versiyonunu, PO-Revision-Date
 kýsmýnda çeviriyi en son düzenlediðiniz tarihi (Yýl-Ay-Gün Saat:Dakika),
 Last-Translator'a adýnýz ve emailinizi, Language-Team'e ise çeviri grubunun
 bilgisini girmek yeterli.
 Ýstediðimiz karakter setini (mesela ISO-8859-9) kullanabilmekle birlikte
 (gettext programa bunlarý o anki geçerli karakter setine çevirip verecektir),
 sistemde genel olarak UTF-8 kullanacaðýmýz için UTF-8 kullanmakta yarar
 var.
 Daha sonra anlatacaðýmýz "fuzzy" bayraðýný kaldýrmalýsýnýz.
\layout Standard

Örnek bir tr.po dosyasý baþlýðý:
\layout LyX-Code

#
\layout LyX-Code

msgid ""
\layout LyX-Code

msgstr ""
\layout LyX-Code

"Project-Id-Version: imposter 0.1
\backslash 
n"
\layout LyX-Code

"Report-Msgid-Bugs-To: imposter-dev@lists.sourceforge.net
\backslash 
n"
\layout LyX-Code

"POT-Creation-Date: 2004-05-30 23:50+0300
\backslash 
n"
\layout LyX-Code

"PO-Revision-Date: 2003-07-03 18:50+0300
\backslash 
n"
\layout LyX-Code

"Last-Translator: Gurer Ozen <email@adres.com>
\backslash 
n"
\layout LyX-Code

"Language-Team: tr <tr@li.org>
\backslash 
n"
\layout LyX-Code

"MIME-Version: 1.0
\backslash 
n"
\layout LyX-Code

"Content-Type: text/plain; charset=UTF-8
\backslash 
n"
\layout LyX-Code

"Content-Transfer-Encoding: 8bit
\backslash 
n"
\layout Subsubsection

Ýletiler
\layout Standard

.pot dosyasýndan örnek bir ileti:
\layout LyX-Code

#: src/ui.c:84
\layout LyX-Code

msgid "Select a presentation file..."
\layout LyX-Code

msgstr ""
\layout Standard

Çit iþareti ile baþlayan açýklama satýrýnda çevrilecek iletinin kod içinde
 hangi dosyanýn hangi satýrýndan alýndýðý belirtilmekte.
 msgid çevrilecek iletiyi taþýmakta.
 msgstr yi ise þimdi biz dolduracaðýz.
 Ýletinin tr.po içindeki çevrilmiþ hali:
\layout LyX-Code

#: src/ui.c:84
\layout LyX-Code

msgid "Select a presentation file..."
\layout LyX-Code

msgstr "Bir sunum dosyasý seçin..."
\layout Standard

olacak.
 Bu þekilde bütün iletiler çevrildiðinde iþimiz tamamlanmakta.
\layout Subsubsection

Özel durumlar
\layout Standard

Programlarýn yeni sürümleriyle birlikte içerdikleri iletiler de deðiþmektedir.
 Bazý yeni iletiler eklenirken, bazýlarý deðiþmekte, bazýlarý ise çýkarýlmaktadý
r.
 gettext sistemi .po dosyalarýný güncellerken yeni eklenen iletilerin çevirilerin
i boþ býrakmaktadýr, bunlar çevirmen tarafýndan doldurulur.
\layout Standard

Çýkarýlan iletiler,
\layout LyX-Code

#~ msgid "/File/_Close"
\layout LyX-Code

#~ msgstr "/Dosya/Kapa_t"
\layout Standard

biçimine gelir.
 Bunlarý dosyadan çýkarabilirsiniz.
\layout Standard

Deðiþen iletiler ya da gettext sisteminin düzgün çevrildiðine karar veremediði
 iletiler ise fuzzy olarak iþaretlenir:
\layout LyX-Code

#: src/main.c:70
\layout LyX-Code

#, fuzzy
\layout LyX-Code

msgid "I don't have eny easter eggs...
 or do I?"
\layout LyX-Code

msgstr "Hiç sürprizim yok...
 yoksa var m??"
\layout Standard

Burda özgün iletideki 'any' kelimesi 'eny' olarak deðiþtirildiðinde, gettext
 .po dosyalarýnda sorun olabileceðini belirtmek için iletinin çevirisini
\layout LyX-Code

#, fuzzy
\layout Standard

satýrý ile iþaretlemiþ.
 Bu durumda çevirmen çeviriyi kontrol eder.
 Gerekirse düzeltip fuzzy bayraðýný kaldýrýr.
\layout Standard

C programlarýnda karþýlaþýlabilecek bir baþka özel çeviri durumu ise format
 stringleridir.
 Bunlar C tarafýndan basýlacak çýktýyý þekle sokmak için kullanýlýr.
 Bir örnek:
\layout LyX-Code

#: src/file.c:167
\layout LyX-Code

#, c-format
\layout LyX-Code

msgid "cannot open file %s"
\layout LyX-Code

msgstr "%s dosyasý açýlamadý"
\layout Standard

Burdaki c-format bayraðý, gettext sistemi tarafýndan otomatik olarak konur
 ve iletinin bir format stringi olduðunu söyler.
 Ýletinin format stringine benzemesi ama olmamasý durumunda no-c-format
 bayraðý ile de karþýlaþabilirsiniz.
 Format stringleri içindeki %s %d gibi % ile baþlayan deyimler iletinin
 içind o yere baþka bir deðerin konacaðýný gösterir.
 Örnekte programýn basacaðý ileti örneðin "cannot open file resim.jpg" ya
 da Türkçe etkin iken "resim.jpg dosyasý açýlamadý" olacaktýr.
\layout Standard

Bu iletilerde % ifadelerini (%s: metin, %d: tamsayý, %f: sayý, %c: karakter,
 vs) korumalýsýnýz.
 Aksi durumda program hatalý çalýþacak ya da çakýlacaktýr.
 Dil yapýsýndan dolayý yerlerini deðiþtirmeniz gereken durumlarda aþaðýdaki
 gibi kullanýn:
\layout LyX-Code

#: src/data.c:1203
\layout LyX-Code

#, c-format
\layout LyX-Code

msgid "%d of %d files processed"
\layout LyX-Code

msgstr "%2$d dosyadan %1$d adet dosya iþlendi"
\layout Standard

Burada özgün iletide ikinci sýrada olan toplam dosya adedini baþa almak
 için '%' ile 'd' (ya da hangi tür deðer basýlýyorsa onun harfi) arasýna
 SIRANO ve '$' koyarak iletiyi programý bozmadan deðiþtirmiþ olduk.
 
\layout Section

Yazýlýmlarýn Türkçe ile Sorunu Ne?
\layout Standard

Pek çok yazýlým Türkçe yerelleri (tr_TR ve tr_TR.UTF-8) ile kullanýldýðýnda
 istenilmeyen sonuçlar veriyor veya hiç çalýþmýyorlar.
 Gözlemlenen Türkçe sorunlarý büyük/küçük harf çevrimleri sýrasýnda ortaya
 çýkýyor.
 Sorunun asýl kaynaðý ise Ýngilizce'deki i,I karakterlerinin Türkçede farklý
 karþýlýklarýnýn olmasý.
\layout Standard

Ýngilizce'de i karakterinin büyük harf karþýlýðý I olarak ifade ediliyor.
 Noktalý (küçük) ve noktasýz (büyük) olmak üzere yalnýzca iki i,I karakteri
 bulunuyor.
\layout Standard

Türkçe'de ise i,Ý,ý ve I karakterleri noktalýlar ve noktasýzlar olmak üzere
 dört farklý karakter bulunuyor.
 Sorunun kaynaðý olarak, Ýngilizce'deki i<->I dönüþümü Türkçe'de i<->Ý ve
 ý<->I olmak üzere farklý dönüþümler ile ifade ediliyor.
\layout Standard

Herhangi bir yazýlým i karakterini büyük harfe veya I karakterini küçük
 harfe çevirmek istediði zaman üç farklý sorundan biri ortaya çýkýyor.
\layout Enumerate

Dönüþüm gerçekleþmiyor ve karakter eski hali ile yazdýrýlýyor.
 Yazýlým dönüþümü yalnýzca integer türü deðerlerle çalýþabilen toupper()
 fonksiyonu ile yapmaya çalýþýyor ve dönüþüm gerçekleþmiyor.
\layout Enumerate

Yazýlým tek bayt ile ifade edilen Ýngilizce i,I karakterlerini çok baytlý
 Ý,ý karakterlerine 
\series bold 
ayný bellek alanýnda 
\series default 
dönüþtürerek
\series bold 
 
\series default 
bellek alanýný (dolayýsý ile girdi metinini) bozuyor.
\layout Enumerate

Yazýlým anahtar kelimesini Türkçe yereli için doðru bir þekilde gerçekleþtiriyor
, fakat Ýngilizce dönüþümü göz önüne alýnmasý gereken anahtar kelime bozulmuþ
 oluyor.
\layout Standard

Yukarýdaki sorun tipleri için farklý çözüm yöntemleri izlenmesi gerekiyor.
\layout Subsection

Sorun: toupper() ile karakter dönüþümü gerçekleþmiyor
\layout Standard

Bu sorun tr_TR.UTF-8 yerelinde ortaya çýkýyor.
 Eðer toupper çaðýsý yapýlýyorsa dönüþ deðerinin mutlaka kontrol edilmesi
 ve eðer dönüþ deðeri 128bit'den büyük ise dönüþümün geniþ karakterler ile
 çalýþabilen towupper() ile yapýlmasý gerekiyor.
 towupper() fonksiyonunu çaðýrmak için karakteri öncelikle çok-baytlý karakter
 dizisinden geniþ karakter'e çevirmek gerekiyor.
 
\layout Standard

Aslen tüm büyük/küçük harf dönüþümlerinin geniþ karakterler üzerinden yapýlmasý
 en ideal çözümken, yazýlým geliþtiriciler performans kaygýlarý nedeni ile
 karakterin niteliðine göre dönüþüm fonksiyonunu seçmeyi uygun görüyorlar.
 Fakat bu yöntem çoðu zaman (hemen hemen her zaman) Türkçe yerelinde hatalý
 çalýþan uygulamalarý doðuruyor.
\layout Subsection

Sorun: Ayný bellek alanýnda dönüþüm bellek alanýný bozuyor
\layout Standard

Sorun i,I tek baytlý karakterlerinin Ý,ý çok baytlý karakterlerine dönüþümü
 sýrasýnda meydana çýkýyor.
 Dönüþümü tek bir bellek alaný (buffer) üzerinde gerçekleþtirmeye çalýþan
 yazýlým i,I karakterleri yerine yazýlan Ý,ý karakterlerinin son baytýlarýnýn
 bir sonraki karakterin üzerine yazýlmasýna neden oluyor.
\layout Standard

Bu sorunun çözümü için dönüþümün yeni bir bellek alaný üzerinde yapýlmasý
 ve boyut deðiþimlerinde gerçek bellek alanýnýn yeni boyuta (realloc) uydurulmas
ý gerekiyor.
\layout Subsection

Sorun: Anahtar kelimelerin hatalý dönüþümü
\layout Standard

Bu son sorun genellikle, Türkçe karakter dönüþümlerini doðru olarak yapabilen
 yeni/modern uygulamalarda ortaya çýkýyor.
 Uygulama imap, quit gibi anahtar kelimelerini (keyword) Türkçe yerelinde
 ÝMAP, QUÝT karþýlýklarýna çeviriyor fakat dönüþ deðeri olarak Ýngilizce
 çevrimleri IMAP ve QUIT'i bekliyor.
 Sonuç olarak anahtar kelimelerin karþýlaþtýrmalarý hatalý sonuç veriyor.
\layout Standard

Çözüm olarak yalnýzca anahtar kelimelerin dönüþümünde yerelin setlocale()
 çaðrýsý ile C yereline çevrilmesi iþe yarýyor.
\layout Standard

Özellikle bu son sorun için http://www.i18nguy.com/unicode/turkish-i18n.html
 adresindeki belge gerekli açýklamayý yapýyor.
\the_end

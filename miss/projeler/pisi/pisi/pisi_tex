%% LyX 1.3 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[turkish]{article}
\usepackage{pslatex}
\usepackage[T1]{fontenc}
\usepackage[latin5]{inputenc}
\setlength\parskip{\medskipamount}
\setlength\parindent{0pt}
\usepackage{graphicx}
\usepackage{url}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
 \newenvironment{lyxcode}
   {\begin{list}{}{
     \setlength{\rightmargin}{\leftmargin}
     \setlength{\listparindent}{0pt}% needed for AMS classes
     \raggedright
     \setlength{\itemsep}{0pt}
     \setlength{\parsep}{0pt}
     \normalfont\ttfamily}%
    \item[]}
   {\end{list}}

\usepackage{babel}
\makeatother
\begin{document}

\title{PISI\\
(Packages Installed Succesfully as Intented)}


\author{S. Çaðlar Onur, Onur Küçük, Barýþ Metin, A. Murat Eren, Eray Özkural,
Gürer Özen}


\date{(Pre-Alpha)}

\maketitle
\newpage
\tableofcontents{}
\newpage


\section{Giriþ}

Paket, bir uygulamayý ya da iþletim sisteminin bir parçasýný tüm bileþenleriyle
toplu olarak ifade eden bir kavramdýr. Uygulamalarýn bir yerden bir
yere taþýnmasý (örneðin bir CD yada að kaynaðýndan gelip, sisteme
kurulmasý) sýrasýnda bazý bileþenlerin geride unutulmamasýný saðlar.
Bir sistemdeki onbinlerce dosyayý, görevleri ve ait olduklarý uygulamalar
bazýnda birkaç yüz pakete ayýrarak yönetilebilir kýlar. Kullanýcýnýn
büyük bir sistemde neler bulunduðuna hakim olabilmesini kolaylaþtýrýr.

Bu paketleri kurup kaldýrmak, çeþitli kaynaklardan temin etmek, sorgulamak,
sistemdeki deðiþiklikleri takip etmek için, paket yöneticisi adýný
verdiðimiz bir uygulamaya ihtiyaç vardýr.


\section{Paket Yöneticisi Gereksinimleri}

Bu kýsýmda önceki bölümde tanýmlanan paket yöneticisi kavramýnýn,
sunmasý beklenen gereksinimler listelenmiþtir.


\subsection{Kullanýcý Gereksinimleri}

Kullanýcý gereksinimleri, biliþim okuryazarý olarak daha önce tanýmladýðýmýz%
\footnote{http://www.uludag.org.tr/belgeler/okuryazar/okuryazar.html \url{}%
} kullanýcý profiline baðlý kalýnarak çýkarýlmýþtýr.

\begin{itemize}
\item Biliþim okuryazarýnýn temel isteði, sisteme istediði uygulamalarý
kolayca kurabilmekten ibarettir.

\begin{itemize}
\item Kur emri, komut satýrýndan, grafik arayüzlerden, ya da sistemin otomatik
olarak bir pakete ihtiyaç olduðunu saptamasýyla kolayca verilebilmeli,
bu görev mümkün olduðunca soru sorulmadan ve kullanýcýyý rahatsýz
etmeden yerine getirilmelidir.
\item Kullanýcý, paketin sistemde doðru þekilde çalýþabilmesi için gerekli
olan yapýlandýrma gereksinimlerinin karþýlanmasýndan mümkün olduðunca
yalýtýlmalýdýr. Yapýlandýrma ile ilgili görevler paket yöneticisi
dýþýndaki bir araçla otomatik saðlanmalý, ya da kullanýcýnýn verdiði
emirlerle sonradan yapýlabilmelidir. 
\item Kurulum mümkün olduðunca hýzlý olmalýdýr.
\end{itemize}
\item Kurulu programlarýn yeni sürümleri çýktýkça, veya üzerinde düzeltmeler
ve güvenlik onarýmlarý yapýlmýþ yeni paket sürümleri yayýmlandýkça,
kullanýcý elindeki uygulamalarý güncellemek isteyecektir.

\begin{itemize}
\item Kullanýcý vakti yada að baðlantý hýzý yetersiz olduðunda acil önem
taþýyan ve yapýlmasý gerekli güncellemeleri, diðerlerinden kolayca
ayýrabilmelidir; bunun yapýlabilmesi için paketin her sürümündeki
güncellemelerin önem derecesi (yeni özellikler, hata düzeltmeleri,
güvenlik açýðý düzeltmesi) paketleme esnasýnda belirtilebilmelidir.
\item Bir paketin eski veya deneysel sürümlerini kurmak biliþim okuryazarýnýn
bir ihtiyacý deðildir. Dolayýsýyla eski sürümler ve geliþtirme sürümleri
alternatifleri ile kullanýcýnýn kafasýnýn karýþtýrýlmamasý için; kullanýcý
paketler deposunda her eriþtiðinde en son düzeltmeleri içeren son
ve tek bir sürüme ulaþabilmelidir. Bu hem basitlik saðlar, hem de
kullanýcýnýn istemeyerek yanlýþ bir paket kurmasýnýn önüne geçer.
\item Paket güncelleme ile ilgili paket bazýnda ayrý ayrý politikalar belirlenmesi
yukarda bahsedilen kullanýcý profilinden bakýldýðýnda gereksiz ve
kafa karýþtýrýcýdýr.
\end{itemize}
\item Nerdeyse her uygulama kendi sürüm numarasý verme politikasýna sahip
olduðundan, paketin asýl sürüm numarasý yanýnda, düzenli olarak artacak
bir numara daha vererek, kullanýcýnýn kolayca hangi sürümlerin yeni
olduðunu ayýrt edebilmesi saðlanabilmelidir (ayný uygulama sürümünün
çeþitli hata düzeltmeleri içeren farklý paket sürümleri olabileceði
de düþünülürse bunun önemi daha net bir þekilde ortaya çýkmaktadýr).
\item Kullanýcý, artýk ihtiyaç duymadýðý bir uygulamayý, yer ve takip tasarrufu
amacýyla kaldýrmak isteyebilir. Kullanýcýnýn bu seçimi kolayca yapabilmesi
için, hiç bir paket tarafýndan ihtiyaç duyulmayan paketler, kurulu
paketlerin kapladýðý alan gibi bilgiler paket yöneticisinden kolayca
alýnabilmelidir.
\item Kullanýcý sistemde nelerin kurulu olduðunu, hangi paketleri kurabileceðini,
kurulu paketlere ait bilgileri, sistemdeki bir bileþen veya dosyanýn
hangi uygulamaya ait olduðunu ve benzeri paket yöneticisinden kolayca
alabilmelidir.
\item Paketler farklý hedeflere kurulabilecek biçimde {}``\emph{relocatable}''
özellik taþýmalýdýr (bu, farklý hedeflere kurulum, ya da baþkasýna
ait sistemde ev dizinine kurulum gibi yeteneklerin saðlanmasý için
gereklidir).
\item Paket bileþenlerinin deðiþip deðiþmediði kontrol toplamlarý, özet
fonksiyonlarý yardýmýyla tespit edilebilmelidir. Paket yöneticisinin
böyle bir durumu kontrol edebilmesi, ve örneðin bir kullanýcý hatasý
sonucu silinen/deðiþen dosyalarý tekrar temin edip düzeltebilmesi
kullanýcýya kolaylýk saðlar.
\item Uygulamayý kod olarak çekip, sisteme özel deðiþik ayarlar ile derleyebilecek
Gentoo benzeri bir özellik gereklerimiz arasýnda deðildir. Bu tür
bir özellik ayný kodun farklý makinalarda farklý ikili paketler oluþturmasýna
ve teknik destek saðlamanýn zorlaþmasýna yol açacaktýr.
\end{itemize}

\subsection{Paketleyici/Geliþtirici Gereksinimleri}

\begin{itemize}
\item Paket hazýrlamak kolay olmalýdýr. Paket hazýrlanýrken ve inþa edilirken
gerekli dosyalar bir çok ayrý kaynaktan temin edilebilmelidir. 
\item Pakete ait bilgiler iyi tanýmlanmýþ bir formatta, kolayca eriþilebilir
olarak tutulmalýdýr. Böylece paketleri iþleyen araçlar yapmak kolaylaþacak,
ilerde veri baðýmlýlýðý sorunlarý olmayacaktýr.
\item Kolayca paket oluþturabilmek için, tercihen bir grafik arayüz ile
paket hazýrlanabilmelidir. Paket yöneticisi, üst geliþtirici kodunu
alýp, gerekli bilgileri hazýrlatacak, gerekli iþaretlemeleri kolayca
yapabilecek bir araç sunmalýdýr.
\item Paket yöneticisinin geliþtirme sistemi, paketleyici hatalarýnýn gözden
kaçmasýný zorlaþtýracak araçlar sunmalýdýr.
\end{itemize}

\subsection{Paket Kaynaðý Gereksinimleri}

\begin{itemize}
\item Paketler CD, Internet, uzak dosya sistemi gibi çeþitli kaynaklardan
kurulabilmelidir. Temel olarak iki tip kaynak sözkonusudur.
\item Ýlk tip, pakedi tek bir dosya olarak taþýyabilen ve programý depolama
aygýtlarý, e-posta ve benzeri yollarla daðýtmaya uygun bir arþiv dosyasýdýr.

\begin{itemize}
\item Bu arþiv içinden, arþiv hakkýnda bilgi alýnabilecek dosyalara, bütün
arþivi açmadan eriþilebilmelidir.
\item Mümkünse arþivin yaygýn olarak bilinen ve kullanýlan araçlarla açýlabilmesinde
yarar vardýr.
\end{itemize}
\item Ýkinci tip kaynak ise Internet yada yerel að üzerinden bir paket grubunun
indeks bilgilerini ve kendilerini sunabilecek bir {}``depo'' sunucusudur.

\begin{itemize}
\item Depodaki deðiþikliklerin listesi, yerel paket listesiyle mümkün olan
en az veri iletimi ile senkron edilebilmelidir. Bu að kaynaklarýnýn
verimli kullanýmý ve yeni sürümlerin hýzlýca takip edilebilmesi için
gereklidir.
\end{itemize}
\item Paketler birden fazla kaynaktan temin edilebilmelidir.
\end{itemize}

\subsection{Güvenlik Gereksinimleri}

\begin{itemize}
\item CD, Internet gibi deðiþik yollarla temin edilen paketlerin kim tarafýndan
paketlendiði bilgisi ve içeriðinin yolda deðiþmediði garantisi için
bir dijital imza sistemi desteklenmelidir.
\item Gerektiðinde pakedi oluþturan kiþinin imzasý dýþýnda, üçüncü parti
kurum veya kiþilerin de pakedi deneyip, güvendiðini belirtebilmesi
için, birden fazla kiþi tarafýndan pakedin imzalanabilmesi gereklidir.
\end{itemize}

\subsection{Kurumsal Gereksinimler}

\begin{itemize}
\item Paket yöneticisi birden fazla paket kaynaðý ile ayný anda sorunsuz
bir þekilde çalýþabilmelidir.
\item Kurumlar ya da bireyler tarafýndan \emph{ön tanýmlý depoda da bulunan}
kimi paketlerin deðiþtirilmiþ versiyonlarýnýn bulunduðu depolar \emph{overlay}
olarak tanýmlanabilmelidir.
\item Ön tanýmlý depoda \emph{bulunmayan} çeþitli paketlerin bulunduðu depolar
\emph{addon} olarak tanýmlanabilmelidir.
\end{itemize}

\section{Neden PÝSÝ?}

Hali hazýrda varolan ve geniþ bir kullaným oranýna sahip paket yöneticileri
(RPM, DPKG ve Portage) yukarda saydýðýmýz gereksinimlerin kimilerini
bizim olmasý gerektiðini düþündüðümüz basitlikte yerine getirememekte,
kimilerini de hiç vaad etmemektedirler. Bu paket yöneticilerinin geliþtirilmesi
ve istenen noktaya getirilmeye çalýþýlmasý yeni ve ayaklarý yere daha
saðlam basan bir paket yöneticisini yeniden yazmaktan daha kolay deðildir.

Daha önemlisi, varolan paket yöneticilerinin paket formatlarýnda \emph{görev}leri
ve \emph{bilgi}leri birbirinden düzgün bir biçimde ayrýlmadýklarý
görülmektedir. Bu araçlar basit olarak hazýrlanmýþ ve zaman içinde
ortaya çýkan ihtiyaçlarý karþýlamak için sürekli yeni özellikler eklenerek
bugünkü hallerine gelmiþlerdir. Bunun getirdiði karmaþýklýðý temizlemek
için aþaðýdaki iki ilkeyi temel alan yeni bir paket yöneticisinin
yazýlmasýna verilmiþtir:

\begin{itemize}
\item \textbf{Kurulum ve yapýlandýrma birbirinden ayrý iki görevdir}. Kurulum,
yalnýzca programlarýn kurulumu, güncellenmesi ve kaldýrýlmasý esnasýnda
iþ görürken, yapýlandýrma hem kurulumda hem de çalýþan sistemde söz
konusudur. Bu ayrý görevleri sorumluluk sýnýrlarý belirlenmiþ ayrý
araçlarýn yerine getirmesi uygundur. Uludað projesi için yapýlandýrma
iþlerini yürütecek araç \textbf{ÇOMAR}'dýr. \textbf{PÝSÝ} bu görevleri
\textbf{ÇOMAR}'a devredecektir.
\item \textbf{Paket meta bilgileri ile paketin derlenme ve kurulumunu yöneten
betikler iç içe geçmemelidir}. Varolan paket yöneticilerinde paket
tanýmlama dosyalarý kod ile bilginin birbirine karýþtýðý, araçlarla
iþlemesi, içinden bilgi çýkarýlmasý zor, net ve kesin tanýmlanmamýþ
biçimlerdedir.
\end{itemize}

\section{PÝSÝ Tasarýmý}


\subsection{Paket Oluþturma}

Bu kýsýmda bir \textbf{PÝSÝ} paketinin oluþturulmasý ve kullanýlmasý
esnasýnda gerek duyulacak meta dosyalar ve süreçler netleþtirilmeye
çalýþýlmýþtýr.


\subsubsection{PSPEC Dosyasý}

\textbf{PSPEC (PÝSÝ SPECification)} dosyasý paketin oluþturulmasý
için gerekli olan temel bilgiyi tanýmlar. Oluþturulacak paketin ne
olduðu, kaynaðý, kim tarafýndan paketlendiði, kaynaða uygulanan yamalar,
hangi baþka paketlere ne tür baðýmlýlýklar içerdiði gibi bilgileri
içerir.

Bir \textbf{PSPEC} dosyasýndan, dolayýsý ile bir kaynaktan birden
fazla paket oluþturulabilir. Örneðin kcontrol paketi kdebase-kaynaksürümü.paketsürümü.tar.gz
kaynaðýndan oluþturulabilecek yalnýzca bir pakettir.

Dosya biçimi XML'dir ve aþaðýdaki etiketleri içerir. Her \textbf{PSPEC}
dosyasýnda tüm etiketlerin bulunmasý zorunlu deðildir. Bulunmasý zorunlu
olan etiketler aþaðýda ({*}) ile belirtilmiþtir.

\textbf{PSPEC} dosyalarý \textbf{PSPEC} deposunda pakete ait dizinde
\textbf{pspec.xml} adý ile tutulurlar.

Her \textbf{PSPEC} dosyasý \textbf{PÝSÝ} etiketi (tag) altýnda bir
\emph{Source} ve en az bir \emph{Package} olmak üzere iki
ana bölüm içermek zorundadýrlar.


\paragraph{PISI}


\subparagraph{Source}

\begin{itemize}
\item \textbf{Name}: ({*}) Uygulamanýn adý.
\item \textbf{Homepage:} Uygulamanýn web sitesinin URL'sini belirtir.
\item \textbf{Summary:} ({*}) Tek satýrlýk açýklayýcý bilgi. Çoklu dil desteðine
sahiptir.
\item \textbf{Description:} ({*}) \textbf{}Uygulama hakkýnda özet açýklama.
Çoklu dil desteðine sahiptir.
\item \textbf{IsA:} Paketin bir kategori/sistem/kolleksiyon'a aitliðini
belirtir. \emph{Örn:} {}``k3b is a KDE program''
\item \textbf{PartOf:} Paketin hangi bütünün/grubun parçasý olduðunu belirtir.
Aitlik özellikleri için Freshmeat'in Trove kategorileri örnek verilebilir.
Örn: {}``LyX and TeTex are parts of Tex:Distrubiton''\\
\textbf{IsA} ve \textbf{ParfOf} bir \textbf{PÝSÝ} paketinin farklý
türdeki aitliklerini ifade eder. \textbf{PartOf} ile belirtilen bir
\textbf{Component}'in tümünü sisteme kurabilirsiniz. Fakat \textbf{IsA}
ile belirtilen aitlikleri yanlýzca sorgulayabilirsiniz.\\
\emph{Source ve Package} taglarý içerisinde yalnýzca birer tane \textbf{PartOf}
tanýmlanabiliyor olmasýna karþýn, birden fazla \textbf{IsA} tanýmlanabilir.
\item \textbf{Packager:} ({*}) \textbf{}Paketi oluþturan kiþilerin adý/soyadý
ve e-posta adresi belirtir.

\begin{itemize}
\item \textbf{Name:} ({*}) Paket oluþturan kiþinin adý ve soyadý.
\item \textbf{Email:} ({*}) Paket oluþturan kiþinin e-posta adresi.
\end{itemize}
\item \textbf{License}: ({*}) Uygulamanýn lisansýný belirtir (GPL, BSD,
vb).
\item \textbf{Archive:} ({*}) Uygulamanýn orjinal kaynak kodunun bulunduðu
URL'yi belirtir. \textbf{archType} arþiv tipini (tar.gz, tar.bz2,
zip, vb) belirtirken, \textbf{sha1sum}, sha1 ile alýnmýþ özet deðerini
belirtir. Her iki attribute (archType ve sha1sum) zorunludur.
\item \textbf{Patches}: Orjinal koda uygulanacak yamalarýn \textbf{sýralý}
bir listesini içerir. Yamalar bu bölümde tanýmlanan sýra ile kaynak
koda uygulanýr.

\begin{itemize}
\item \textbf{Patch}: Yamanýn dosya adýný içerir. \textbf{compressionType}
ile varsa sýkýþtýrma biçimi (gz, bz2, vb) verilebilir. \textbf{level}
ile yamanýn patch komutuna seviye verilebilir, level verilmez ise
seviye 0 olarak kabul edilir. Örnek: \\
<Patch compressionType=\char`\"{}gz\char`\"{} level=\char`\"{}1\char`\"{}>popt-1.7-uclibc.patch.gz</Patch>
\end{itemize}
\item \textbf{AdditionalFiles:} Kaynak ile gelmeyen ama paketin çalýþmasý,
ek özellik kazanmasý v.s. için gerekli dosyalarý belirtir. ( \emph{örn};
init betikleri )

\begin{itemize}
\item \textbf{AdditionalFile:} Files dizini altýndan alýnacak dosyayý belirtir.
\textbf{target} attribute dosyanýn nereye konulacaðýný belirtir, zorunludur.
\textbf{permission} attribute varsa dosyanýn hangi haklarla saklanacaðýný
belirtir. \textbf{owner} attribute varsa dosyanýn sahip/grup bilgilerini
belirtir. Örnek:\\
<AdditionalFile target=''/etc/bash/''>bashrc</AdditionalFile>
\end{itemize}
\item \textbf{BuildDependencies}: Pakedi oluþturmak için gereken baðýmlýlýklarý
listeler.

\begin{itemize}
\item \textbf{Dependency}: Bir baðýmlýlýðý tanýmlar. Burada bahsedilen baðýmlýlýk
paket baðýmlýlýðý olabilir. \textbf{versionFrom} ve \textbf{versionTo}
attribute bilgileri ile paketin hangi sürüm numarasýna baðýmlý olduðu
ifade edilebilir. Örnek:\\
<Dependency versionFrom=\char`\"{}1.8\char`\"{}>automake</Dependency>
\end{itemize}
\item \textbf{History}: ({*}) Pakete yapýlan güncellemelerin bir listesini
verir. \textbf{History} altýndaki güncellemeleri belirten \textbf{Update}
taglarýnýn mutlaka tarihe göre sýralý olmasý gerekmektedir. En son
güncelleme en üstte bulunmalýdýr. Çünkü en son güncellemeden alýnan
\textbf{Version} ve \textbf{Release} bilgisi pakete uygulanacaktýr.

\begin{itemize}
\item \textbf{Update}: ({*}) Bir güncellemeyi tarif eder.

\begin{itemize}
\item \textbf{Type:} Güncellemenin tipini belirtir (\textbf{\emph{Security,
Bug, Enhancement, Normal}} v.s). Eðer bu etiket tanýmlý deðilse tip
\textbf{\emph{Normal}} olarak kabul edilir.
\item \textbf{Date}: ({*}) Güncellemenin tarihi.
\item \textbf{Version:} ({*}) Uygulamanýn sürüm numarasý.
\item \textbf{Release:} ({*}) Pakedin sürüm numarasý.
\end{itemize}
\end{itemize}
\end{itemize}

\subparagraph{Package: \textmd{({*})} \textmd{Uygulamadan oluþturulacak bir pakedi
tanýmlar. Her} PSPEC \textmd{dosyasý en az bir} Package \textmd{etiketi
içermek zorundadýr.}}


\subparagraph{Package \textmd{içerisindeki bazý taglar} \textmd{\emph{Source}}
\textmd{içerisindekileri tekrarlayabilir. Bu tekrarlamalarýn bazýlarý
üzerine yazýlýrken (override) bazýlarý birleþtirilecektir (merge).}}

\begin{itemize}
\item \textbf{Name} (tanýmlý ise \emph{Source} bölümündekinin yerine kullanýlýr)
\item \textbf{Summary} (tanýmlý ise \emph{Source} bölümündekinin yerine
kullanýlýr)
\item \textbf{Description} (tanýmlý ise \emph{Source} bölümündekinin yerine
kullanýlýr)
\item \textbf{License} (tanýmlý ise \emph{Source} bölümündekinin yerine
kullanýlýr)
\item \textbf{IsA} (tanýmlý ise \emph{Source} bölümündeki ile birleþtirilir)
\item \textbf{PartOf} (tanýmlý ise \emph{Source} bölümündekinin yerine kullanýlýr)
\item \textbf{Conflicts:} Paketin çalýþmasý/iþlevini yerine getirmesi için,
sistemde olmamasý gereken paketleri belirtir, bu örneðin ayný dosyayý
iki paketin de taþýmasý durumunda olabilir. 

\begin{itemize}
\item \textbf{Package:} Olmamasý gereken paket adýný verir.
\end{itemize}
\item \textbf{Provides:} Paketin saðladýðý \textbf{ÇOMAR OM} bacaklarýnýn
bir listesini verir.
\item \textbf{RuntimeDependencies}: Pakedin çalýþabilmesi için gereken baðýmlýlýklarýn
bir listesini verir. 

\begin{itemize}
\item \textbf{Dependency}: Bir baðýmlýlýk tanýmlar. \textbf{BuildDependency}
ile ayný yapýdadýr
\end{itemize}
\item \textbf{InstallDependencies}: Pakedin çalýþabilmesi için gereken baðýmlýlýklarýn
bir listesini verir. 

\begin{itemize}
\item \textbf{Dependency}: Bir baðýmlýlýk tanýmlar. \textbf{BuildDependency}
ile ayný yapýdadýr
\end{itemize}
\item \textbf{Files}: ({*}) Pakedin kurulacak dosyalarýnýn tiplerini belirlemek
için kullanýlýr. Dosya tipleri ile ilgili bigi \ref{FType} kýsmýnda
verilmiþtir.

\begin{itemize}
\item \textbf{Path} ({*}): \textbf{}Bir dosya/dizin yolunu tarif eder. Verilebilecek
olan \textbf{fileType} attribute ise path'in tipini belirtir. Belge,
paylaþýmlý kütüphane, çalýþtýrýlabilir, vb... Eðer fileType verilmezse
path tipi {}``other'' olarak tanýmlanýr. Örnek:\\
<Path fileType=\char`\"{}sharedLib\char`\"{}>/usr/lib</Path>
\end{itemize}
\end{itemize}

\paragraph{Örnek bir PSPEC Dosyasý}

\begin{lyxcode}
{\scriptsize <?xml~version=\char`\"{}1.0\char`\"{}~encoding=\char`\"{}utf-8\char`\"{}~standalone=\char`\"{}no\char`\"{}?>}{\scriptsize \par}

{\scriptsize <!DOCTYPE~PSPEC~SYSTEM~~~~\char`\"{}http://www.uludag.org.tr/projeler/pisi/pisi-spec.dtd\char`\"{}>}{\scriptsize \par}

{\scriptsize <PISI>}{\scriptsize \par}

~{\scriptsize ~<Source>}{\scriptsize \par}

~{\scriptsize ~~~<Name>popt</Name>}{\scriptsize \par}

~{\scriptsize ~~~<Homepage>http://www.rpm.org/</Homepage>}{\scriptsize \par}

~{\scriptsize ~~~<Packager>}{\scriptsize \par}

~{\scriptsize ~~~~~<Name>Pardus~Man</Name>}{\scriptsize \par}

~{\scriptsize ~~~~~<Email>bilgi@uludag.org.tr</Email>}{\scriptsize \par}

~{\scriptsize ~~~</Packager>}{\scriptsize \par}

~{\scriptsize ~~~<License>As-Is</License>}{\scriptsize \par}

~{\scriptsize ~~~<IsA>library:util:optparser</IsA>}{\scriptsize \par}

~{\scriptsize ~~~<PartOf>rpm:archive</PartOf>}{\scriptsize \par}

~{\scriptsize ~~~<Summary~xml:lang=''en''>Popt~command~line~option~parser</Summary>}{\scriptsize \par}

~{\scriptsize ~~~<Description~xml:lang=''en''>Command~line~option~parsing~library.}{\scriptsize \par}

~{\scriptsize ~~~~~While~it~is~similiar~to~getopt(3),~it~contains~a~number~of~enhancements,~including:}{\scriptsize \par}

~{\scriptsize ~~~~~1)~popt~is~fully~reentrant}{\scriptsize \par}

~{\scriptsize ~~~~~2)~popt~can~parse~arbitrary~argv{[}{]}~style~arrays~while~getopt(2)~makes~this~quite~difficult}{\scriptsize \par}

~{\scriptsize ~~~~~3)~popt~allows~users~to~alias~command~line~arguments}{\scriptsize \par}

~{\scriptsize ~~~~~4)~popt~provides~convience~functions~for~parsing~strings~into~argv{[}{]}~style~arrays}{\scriptsize \par}

~{\scriptsize ~~~</Description>}{\scriptsize \par}

~{\scriptsize ~~~<Archive~type=\char`\"{}targz\char`\"{}~sha1sum=\char`\"{}66f3c77b87a160951b180447f4a6dce68ad2f71b\char`\"{}>ftp://ftp.rpm.org/pub/rpm/dist/rpm-4.1.x/popt-1.7.tar.gz</Archive>}{\scriptsize \par}

~{\scriptsize ~~~<Patches>}{\scriptsize \par}

~{\scriptsize ~~~~~<Patch~compressionType=\char`\"{}gz\char`\"{}~level=\char`\"{}1\char`\"{}>popt-1.7-uclibc.patch.gz</Patch>}{\scriptsize \par}

~{\scriptsize ~~~</Patches>}{\scriptsize \par}

~{\scriptsize ~~~<BuildDependencies>}{\scriptsize \par}

~{\scriptsize ~~~~~<Dependency~versionFrom=\char`\"{}1.8\char`\"{}>automake</Dependency>}{\scriptsize \par}

~{\scriptsize ~~~</BuildDependencies>}{\scriptsize \par}

~{\scriptsize ~~~<History>}{\scriptsize \par}

~{\scriptsize ~~~~~<Update>}{\scriptsize \par}

~{\scriptsize ~~~~~~~<Date>06/14/2005</Date>}{\scriptsize \par}

~{\scriptsize ~~~~~~~<Version>1.7</Version>}{\scriptsize \par}

~{\scriptsize ~~~~~~~<Release>3</Release>}{\scriptsize \par}

~{\scriptsize ~~~~~</Update>}{\scriptsize \par}

~{\scriptsize ~~~~~<Update>}{\scriptsize \par}

~{\scriptsize ~~~~~~~<Date>06/10/2005</Date>}{\scriptsize \par}

~{\scriptsize ~~~~~~~<Version>1.7</Version>}{\scriptsize \par}

~{\scriptsize ~~~~~~~<Release>2</Release>}{\scriptsize \par}

~{\scriptsize ~~~~~</Update>}{\scriptsize \par}

~{\scriptsize ~~</History>}{\scriptsize \par}

~{\scriptsize ~</Source>}{\scriptsize \par}



~{\scriptsize ~<Package>}{\scriptsize \par}

~{\scriptsize ~~~~<Name>popt</Name>}{\scriptsize \par}

~{\scriptsize ~~~~<RuntimeDependencies>}{\scriptsize \par}

~{\scriptsize ~~~~~~<Dependency>gettext</Dependency>}{\scriptsize \par}

~{\scriptsize ~~~~</RuntimeDependencies>}{\scriptsize \par}

~{\scriptsize ~~~~<Files>}{\scriptsize \par}

~{\scriptsize ~~~~~~<Path~fileType=\char`\"{}sharedLib\char`\"{}>/usr/lib</Path>}{\scriptsize \par}

~{\scriptsize ~~~~~~<Path~fileType=\char`\"{}doc\char`\"{}>/usr/share/doc</Path>}{\scriptsize \par}

~{\scriptsize ~~~~~~<Path~fileType=\char`\"{}doc\char`\"{}>/usr/share/man</Path>}{\scriptsize \par}

~{\scriptsize ~~~~~~<Path~fileType=\char`\"{}localedata\char`\"{}>/usr/share/locale</Path>}{\scriptsize \par}

~{\scriptsize ~~~~~~<Path~fileType=\char`\"{}header\char`\"{}>/usr/include/popt.h</Path>}{\scriptsize \par}

~{\scriptsize ~~~~</Files>}{\scriptsize \par}

~{\scriptsize ~</Package>}{\scriptsize \par}

{\scriptsize </PISI>}{\scriptsize \par}
\end{lyxcode}
Yukarýdaki örnek dosyada \emph{Package} içerisinde tanýmlanmayan taglar
\emph{Source} içerisinden alýnarak kullanýlacaktýr. Bir kaynak paketten
birden fazla ikili (binary) paket oluþturmak için \emph{Package} etiketleri
farklý isimler (Name) verilerek arttýrýlabilir. \emph{Paketler} \textbf{Files}
içerisinde bulunan \textbf{Path} taglarýna göre bölümlendirilecektir.


\subsubsection{actions.py Dosyasý}

Bu dosya bir Python betiði olup, kaynaðýn kurulmasý, derlenmesi, test
edilmesi, sisteme kurulmasý gibi iþlevleri yerine getiren fonksiyonlardan
oluþur. 

Paketin oluþturulmasý sýrasýnda derleme sistemi \textbf{actions.py}
içerisindeki 3 fonksiyon adýný arar ve çalýþtýrýr; \textbf{setup,
build, install}. Bu fonksiyonlardan install'ýn tanýmlanmasý zorunlu
olmakla birlikte setup ve build sadece tanýmlanmýþsa çalýþtýrýlýr. 

\textbf{actions.py}'ler tarafýndan kullanýlmak üzere \textbf{PÝSÝ}
tarafýndan hazýr bir \textbf{API} ActionsAPI adýnda sunulacaktýr.


\paragraph{Örnek bir actions.py dosyasý:}

\begin{lyxcode}
{\scriptsize from~pisi.actionsapi~import~gnuconfig}{\scriptsize \par}

{\scriptsize from~pisi.actionsapi~import~autotools}{\scriptsize \par}



{\scriptsize def~setup():}{\scriptsize \par}

~{\scriptsize ~~~gnuconfig.gnuconfig\_update()}{\scriptsize \par}

~{\scriptsize ~~~autotools.configure({}``-{}-with-nls'')}{\scriptsize \par}



{\scriptsize def~build():}{\scriptsize \par}

~{\scriptsize ~~~autotools.make()}{\scriptsize \par}



{\scriptsize def~install():}{\scriptsize \par}

~{\scriptsize ~~~autotools.install()~}{\scriptsize \par}
\end{lyxcode}

\subsubsection{ChangeLog Dosyasý}

Pakedin sürümlerindeki deðiþikliklerin açýklamalarýný içerir. Bu dosya
bilindik \textbf{ChangeLog} stilindedir ve \textbf{PSPEC} içindeki
\textbf{History} bilgisi ile ilgili deðildir.


\subsection{metadata.xml}

\textbf{Metadata} dosyasý bir uygulamanýn paket haline geldikten sonra
yanýnda taþýyacaðý ve paket ile ilgili bilgileri barýndýran dosyadýr. 

\textbf{Metadata} dosyasý sadece oluþturulan paket ile ilgili bilgileri
tutmaktan sorumludur. Paket hakkýnda temel bilgi bu dosyadan alýnacaktýr.

Bu bilgilerin büyük kýsmý \textbf{PSPEC} dosyasýnýn iþlenmesi sonucu
ile \textbf{Metadata} dosyasýna yazýlmaktadýr. \textbf{Metadata PSPEC}
dosyasýndan alýnan bilgilerin yanýnda kaynak derlendikten ve paket
oluþturulduktan sonra alýnabilecek diðer bilgileri de içerir (paketin
kurulduktan sonra sistemde kaplayacaðý alanýn boyutu gibi).

\textbf{Metadata} dosyasýnýn içeriði þöyle tanýmlanmýþtýr;

\textbf{PISI}


\subparagraph{Source: \textmd{Bu bölümdeki bilgiler} PSPEC \textmd{dosyasýnýn}
\textmd{\emph{Source}} \textmd{bölümünden alýnýr.}}

\begin{itemize}
\item \textbf{Name}
\item \textbf{Homepage}
\item \textbf{Summary}
\item \textbf{Description}
\item \textbf{Packager}

\begin{itemize}
\item \textbf{Name}
\item \textbf{Email}
\end{itemize}
\end{itemize}

\subparagraph{Package}

\begin{itemize}
\item \textbf{Name}
\item \textbf{Summary}
\item \textbf{Description}
\item \textbf{License}
\item \textbf{History}

\begin{itemize}
\item \textbf{Update}

\begin{itemize}
\item \textbf{Type}
\item \textbf{Date}
\item \textbf{Version}
\item \textbf{Release}
\end{itemize}
\end{itemize}
\item \textbf{Conflicts}
\item \textbf{Provides:} Paketin hangi OM bacaklarýný saðladýðýný belirtir.
\item \textbf{RuntimeDependencies}

\begin{itemize}
\item \textbf{Dependency}
\item \textbf{InstallDependencies}

\begin{itemize}
\item \textbf{Dependency}
\end{itemize}
\item \textbf{Files}

\begin{itemize}
\item \textbf{Path}
\end{itemize}
\item \textbf{Distribution:} Paketin ait olduðu daðýtýmý belirtir (Pardus).
\item \textbf{DistributionRelease:} Paketin ait olduðu daðýtýmýn hangi sürümü
için oluþturduðunu belirtir (1.0).
\item \textbf{Architecture:} Paketin hangi mimari için yapýldýðýný belirtir.
\item \textbf{InstallSize:} Paketin sisteme kurulduðunda kaplayacaðý alanýn
tahmini boyutunu belirtir.
\end{itemize}
\end{itemize}
Yukarýda tanýmlanan \textbf{Metadata} dosyasý, belirlenecek paket
formatýnýn içinde \textbf{\emph{XML}} dosyasý olarak tutulacaktýr.
\textbf{Metadata} XML dosyalarýnýn yapýsý \textbf{PSPEC} dosyasý ile
hemen hemen aynýdýr. Yalnýzca Metadata paket oluþumundan sonra elimizde
olan bazý ek bilgileri de içerir. 


\subsection{files.xml}

Kaynak derlendikten sonra oluþan dosyalarýn oluþturulan pakete göre
\textbf{(Package)} sýnýflandýrýlmasý gerekmektedir. Tek bir kaynaktan
birden fazla paket oluþturulmasý, kaynaðýn derlenmesinden sonra oluþan
dosyalarýn sýnýflandýrýlmasý ile olur.

files.xml dosyasý paket geliþtirme aracý/araçlarý ile oluþturularak
paket içerisine yerleþtirilir.

\begin{itemize}
\item \textbf{Files}

\begin{itemize}
\item \textbf{Package:} Dosya serisinin hangi \textbf{\emph{SubPackage}}'i
oluþturduðunu belirtir. (örn. mysql-devel, mysql-client, mysql-server
, mysql-doc)
\item \textbf{File:} Pakete dahil edilecek bir dosyayý tarif eder.

\begin{itemize}
\item \textbf{Path:} Dosyanýn, paket içerisindeki yerini belirtir. \textbf{PISI}
gereklerinden biri paketin belirtilen konuma kurulabilmesi olduðu
için konum bilgisi baðýmlý (rölatif) olarak verilir.
\item \textbf{Type\label{FType}:} Dosyanýn tipini belirtir. Paket sisteme
kurulduðunda, veritabanýna bu tip tanýmý ile iþaretlenerek yerleþtirilecektir.
Bu tip tanýmlarý þunlardan birisi olabileceði gibi boþ da býrakýlabilir:
executable, conf, doc, sharedLib, localeData, programData,
header.
\item \textbf{Size:} Dosyanýn byte cinsinden boyutunu saklar.
\item \textbf{SHA1Sum: Path} ile belirtilen dosyanýn SHA1 algoritmasý ile
elde edilmiþ \emph{cryptographic} özet deðerini saklar.
\end{itemize}
\end{itemize}
\end{itemize}
files.xml dosyalarýnýn doðrulanmasý için kullanýlabilecek bilgi \emph{pisi-files.dtd}
dosyasýnda tanýmlanmýþtýr.

TODO: Örnek 


\subsection{PSPEC Deposu}

Paketleri oluþturmak için gerekli \textbf{PSPEC} dosyalarý hiyerarþik
bir yapýda bir \emph{subversion} deposunda sunulacaktýr. Geliþtirme
iþlemleri bu depo üzerinde yapýlacaktýr. \textbf{PSPEC} deposunda
paketler \emph{{}``}\textbf{ilk harflerine göre}\emph{''} konumlandýrýlýrlar.
Her paket kendine ait bir dizinde \textbf{PSPEC} dosyasý, paket oluþturma
için gerekli olan ek dosyalar ve yamalarýn içinde bulunduðu files\textbf{/}
dizini ve paket oluþturmada kullanýlacak betiklerin bulunduðu actions\textbf{/}
dizinine sahiptir.

Bir geliþtiricinin \textbf{Pardus Linux}'a paket yapmasý için yalnýzca
\textbf{PSPEC} depo sýradüzeninde paket için gerekli olan dosyalarý
saðlamasý yeterlidir. \textbf{Pardus Linux}'un belirli zamanlarda
kullanýcýlara sunulacak sürümlerini oluþturmak için bu \textbf{PSPEC}
deposundaki bu bilgiler kullanýlarak \textbf{PÝSÝ} paketleri oluþturulacaktýr. 

Bir yazýlýmýn birden fazla sürümünün depoya eklenmesi gerekiyorsa,
farklý paket isimleri ile depoya yerleþtirilirler. (gtk1, gtk2 gibi...)


\subsubsection{Örnek PSPEC Deposu Sýradüzeni}

\begin{itemize}
\item \textbf{a}/

\begin{itemize}
\item \textbf{a}cpid/

\begin{itemize}
\item pspec.xml
\item actions.py
\item ChangeLog
\item \textbf{files/}

\begin{itemize}
\item acpid.init
\end{itemize}
\item \textbf{patches/}

\begin{itemize}
\item acpid-1.0.2-branch.patch
\end{itemize}
\item \textbf{comar/}

\begin{itemize}
\item acpid.csl
\end{itemize}
\end{itemize}
\end{itemize}
\end{itemize}

\subsection{Category ( IsA )}

FIXME: Daha anlamlý cümleler ve temiz anlatým

Bir uygulamanýn yaptýðý iþi, ait olduðu kategoriyi belirtir yani uygulamalarýn
sýfatlarýdýr. Bu bilgi kullanýlarak bir iþi ya da iþler grubunu yapan
uygulamalar sorgulanabilir. Örneðin PDF Gösteren uygulamalarý göster,
Ogg çalan ve konsoldan çalýþan uygulamalar hangileridir gibi.


\subsection{Component ( PartOf )}

FIXME: Daha anlamlý cümleler ve temiz anlatým

Bir paketler bütününden oluþan anlamlý ve kurulabilir birliði temsil
eder. Yani uygulamalarý kapsüller. Örneðin KDE Component'ý içinde
kdebase, kdepim, kdemultimedia v.s gibi kaynaklarý bulundurur, kdebase
ise kcontrol, konqueror v.s. gibi paketlerden oluþur. Bu bilgi kullanýlarak
örneðin KDE Component'ýný sisteme kur, kaldýr, güncelle gibi eylemler
gerçekleþtirilebilir.


\subsection{Ýkili Paket Deposu}

Oluþturulan ikili paketler \textbf{PSPEC} dosyalarýnýn tutulduðu hiyerarþik
yapýnýn aynýsýna sahip bir depoda sunulacaktýr. Paketlerin içerisinde
bulunan \emph{metadata.xml} dosyalarý depodaki paketlerden alýnarak
ve birleþtirilerek \textbf{pisi-index.xml} isminde bir içerik (depo
içeriði) dosyasý düzenli aralýklar ile oluþturulacaktýr

Ýçeriðinde mevcut sürümün bilgilerini içerecek bir dosya oluþturulacaktýr.
Bu dosya daðýtýmýn tüm paketleri için þu bilgileri içerecektir;

\begin{itemize}
\item \textbf{Name}
\item \textbf{Summary} 
\item \textbf{Description}
\item \textbf{Version }
\item \textbf{Release }
\item \textbf{License}
\item \textbf{RuntimeDependencies}
\item \textbf{InstallDependencies}
\item \textbf{Provides }
\item \textbf{History}
\item \textbf{Conflicts}
\item \textbf{PackageSize }
\item \textbf{InstalledSize}
\end{itemize}
\textbf{pisi-index.xml} dosyasýnýn biçimi XML'dir. Dosyanýn doðrulanmasý
için kullanýlabilecek bilgi \emph{pisi-index.dtd} dosyasýnda tanýmlanmýþtýr.

Bu dosya deðiþtirilmeyecek ve sadece Daðýtým Sürüm deðiþtirdiði zaman
yenisi oluþturulacaktýr. Aktif sürüm sýrasýnda tüm deðiþiklikler \textbf{ChangeSet}
olarak sunulacaktýr. Ýstemci bilgisayarlarca çekilecek ve baðýmlýlýk
çözme, paket veritabanýný arama, paket kurma/kaldýrma iþlemleri bu
dosyalarýn \textbf{pisi.index} ile birleþtirilmesi yardýmý ile yapýlacaktýr. 

\textbf{ChangeSet}'ler \textbf{pisi.index} dosyasýna yama olarak sunulacaklardýr.
Kolay oluþturulan, az bant geniþliði isteyen ve efektif olmalarý açýsýndan
içeriklerini \textbf{pisi.index}'in bir önceki revizyonlarýndan olan
farklarý arttýrýmsal (incremental) olarak oluþturacaktýr.

Kullanýcý bilgisayarýnda oluþturulacak depo veritabaný \textbf{pisi.index}
ve \textbf{Changeset}'ler yardýmý ile yaratýlacaktýr. Kullanýcýnýn
depodaki paketlerin en güncel bilgilerini alabilmesi için depo veritabanýný
düzenli olarak güncellemesi gerekmektedir. Bu iþlem bir arkaplan uygulamasý
ile otomatik olarak yaptýrýlabilir.

Depoya eklenecek ikili paketler geliþtiriciden alýnmayacak, \textbf{PÝSÝ}
derleme ortamý tarafýndan hazýrlanýp uygun görülen depoya yerleþtirilecektir.
Böylece geliþtiricinin sisteminden kaynaklanabilecek olasý problemlerin
(sürüm farklýlýklarý, sorunlu ya da güvensiz yazýlýmlar vs.) önüne
geçilecektir.

\textbf{PÝSÝ} istemcisi birden fazla depo ile çalýþabilecektir. Birden
fazla depo tanýmlanmasý durumunda öncelikli depo her zaman \textbf{Pardus
Resmi Deposu} olacaktýr. Diðer depolar eþit önceliðe sahip olacaklardýr
ve kullanýcý elle belirtmediði sürece tüm depolarda bulunan paketler
resmi depodan alýnacaktýr.


\subsection{PÝSÝ Paketinin Yapýsý}

\textbf{PÝSÝ} paketleri ikili bir biçimde sunulacaktýr. Bu bölüm paketlerin
biçemini (format) ve içerdiklerini tanýmlamaktadýr.

\textbf{PÝSÝ} paketi, içerisinde aþaðýdaki bölümler olan bir \emph{PK-ZIP}
paketidir. Bu sayede paketler standart araçlar ile açýlabilir/eriþilebilir
olacaklardýr.

\begin{itemize}
\item \textbf{metadata.xml:} \textbf{PSPEC} dosyasýndan alýnacak ve üzerine
eklenecek bilgiler ile oluþturulacak Meta bilgisi
\item \textbf{files.xml:} Paket içerisinde bulunan dosyalarýn bir listesi
\item \textbf{comar/ dizini:} Kurulum betikleri
\item \textbf{install/ dizini:} Paketin kurulu biçimi. Paketin sisteme kurulumu
bu dizinin belirtilen dizine açýlýr.
\end{itemize}

\subsection{Süreçlerin Tarifi}

Süreç tarifi paket sisteminin en temel görevlerini, tasarýmý özetlemek
amacý ile anlatýr.


\subsubsection{Paket Oluþturmak}

\includegraphics{images/pisi-gelistirici-small.png}

Bir geliþtiricinin paket oluþturmak için izleyeceði adýmlar þöyledir;

\begin{itemize}
\item \textbf{Geliþtirici Grafik Arayüzü} ya da konsol araçlarý yardýmý
ile \textbf{PSPEC} dosyasý yukarýda anlatýlan yapýya uygun olarak
oluþturulur. Gerekli olacak yamalar ve dosyalar yukarýda tarif edildiði
gibi files/ dizinine yerleþtirilir.
\item Oluþturulan \textbf{PSPEC} dosyasý, hazýrlanan paketin derlenebilmesi
için \textbf{PÝSÝ} tarafýndan iþlenir. Eðer gerekli paketler sistemde
mevcut deðil ise bu paketler \textbf{PÝSÝ} tarafýndan otomatik veya
kullanýcýya sorularak sisteme kurularak, sistem derleme iþlemine hazýr
hale getirilir. 
\item Oluþturulan \textbf{PSPEC} dosyasýnýn Source bölümündeki bilgiler
iþlenerek kaynak kod sisteme alýnýr ve doðruluðu kontrol edilir. Gerekli
dosya ve yamalar yukarýda anlatýlan biçime uygun bir þekilde \textbf{PÝSÝ}
tarafýndan açýlýr ve gerekli yamalar koda uygulanýr. 
\item \textbf{actions.py} betiði iþletilerek kaynak koddan ikili veri oluþturulur.
\item Geliþtirici (tercihen grafik arayüz yardýmý ile) derleme sonrasý oluþturulan
dosyalarý, \textbf{PSPEC} dosyasýnda tanýmlanan \textbf{\emph{Package}}
bölümlerine göre sýnýflandýrýr. Oluþturulacak her paket için \textbf{files.xml}
dosyasý yaratýlýr.
\item \textbf{PÝSÝ, PSPEC} ve \textbf{files.xml} dosyalarýný iþleyerek paketi
veya paketleri oluþturur.
\item Geliþtirici oluþturduðu paketleri sisteminde test eder.
\item Oluþturulan paket oluþturma dosyalarý (\textbf{PSPEC} dosyasý, actions.py
ve dizinler) \textbf{Merkezi Paket Derleme Çiftliði} tarafýndan derlenmek
üzere \textbf{PSPEC} \textbf{Dosyalar Deposu}'na iletilir.
\item Ýletilen \textbf{PSPEC} dosyasý \textbf{Merkezi Paket Derleme Çiftliði}
tarafýndan ikili paket veya paketler haline getirilir.
\item Oluþturulan paket veya paketler \textbf{Paket Deposu}'na yerleþtirilir.
\end{itemize}

\subsubsection{Paket Kurmak }

\includegraphics{images/pisi-istemci-small.png}

Bir istemcinin sisteme paket kurmak için izleyeceði yol þöyledir;

\begin{itemize}
\item Sistemdeki ilgili uygulamalardan biri \textbf{PÝSÝ}'ye paket kurmasý
için istekte bulunur.
\item \textbf{PÝSÝ}, kendi yapýlandýrma dosyasýný iþleyerek, kendi yapýlandýrma
dosyasýnýn içindeki bilgilerin ýþýðýnda \textbf{Paket Deposu}ndan
deponun durumu ile ilgili bilgileri (\textbf{ChangeSet}ler ve kullanýcý
yeni bir depo kullanmaya baþladýysa \textbf{pisi-index.xml}) alýr.
\item Gerekiyorsa \textbf{Depo}dan aldýðý bilgileri \textbf{Depo Veritaban}ýna
yerleþtirir.
\item \textbf{PÝSÝ} istenen paketin kurulmasý için gerekli olan bilgileri,
ihtiyaç duyulan paketleri belirler. Gerekli olan paketleri \textbf{Paket
Deposu}ndan çekerek sisteme kurar. Eðer çakýþan paketler var ise bunlarý
çözer.
\item \textbf{PÝSÝ} Kurulacak paketi \textbf{Paket Deposu}ndan çeker ve
çektiði paketin doðruluðunu kontrol ederek sisteme kurar. Kurduðu
paket ile ilgili bilgileri \textbf{Kurulu Paket Veritabaný}'na yerleþtirir.
\item Paketlerin yanýnda taþýdýðý \textbf{CSL} betiklerini \textbf{ÇOMAR}'a
verir.
\end{itemize}

\subsubsection{Paket Kaldýrmak}

Bir istemcinin sisteme paket kaldýrmak için izleyeceði yol þöyledir;

\begin{itemize}
\item Sistemdeki ilgili uygulamalardan biri \textbf{PÝSÝ}'ye paket kaldýrmak
için istekte bulunur.
\item \textbf{PÝSÝ}, kendi yapýlandýrma dosyasýný iþleyerek, \textbf{Kurulu
Paket Veritabaný}ndan paketin baþka bir paket tarafýndan gereksinim
duyulup duyulmadýðýný kontrol eder.
\item \textbf{PÝSÝ} paketi kaldýrýr. 
\item \textbf{ÇOMAR}'a ilgili \textbf{CSL} betiklerini kaldýrmasý için silinen
paket ile ilgili bilgi verir.
\end{itemize}

\subsubsection{Baðýmlýlýk çözmek}

TODO: Ayrýntýlý algoritmik anlatým gerekiyor

\textbf{PÝSÝ} içerisinde paket baðýmlýlýðý, doðrudan paket isim ve
sürüm numarasýna baðýmlýlýk olarak tanýmlanmýþtýr. Bu yüzden paket
baðýmlýlýðýnýn çözümü depo veritabanýndan baðýmlýlýðý oluþturan paketleri
iteratif olarak çýkarmak ile sýnýrlýdýr.

Paketler için tanýmlanan bir diðer baðýmlýlýk tipi ise \textbf{ÇOMAR
OM} (Object Model) bacaklarýna olan baðýmlýlýktýr. Bu baðýmlýlýðýn
çözümü için Kurulu Paketler ve Depo veritabanlarý sorgulanarak ilgili
\textbf{OM} bacaðýný saðlayan bir paketin sistemde kurulu durumda
olup olmadýðý bilgisi çýkartýlýr. Eðer yoksa ilgili \textbf{OM} bacaðýný
saðlayan paketlerin bir listesi sunulur.


\subsection{Veritabanlarý}

FIXME: Ayrýntýlý taným eklenecek

Ýstemci makinadaki paket veritabaný aþaðýdaki bölümlere sahip olacaktýr.
Veritabanlarý \textbf{\emph{BerkeleyDB}} veritabanlarýdýr.

Beta versiyonda tek bir depo desteklenecektir.

\begin{itemize}
\item \textbf{Kurulu Paketler Veritabaný:} \emph{Paket adý, sürüm numarasý,
hangi depodan kurulduðu ve dosyalar (files.xml)} bölümlerini içerecektir.
\item \textbf{Depo Veritabanlarý:} Birden fazla depo veritabaný olabilir.
Her depo için \textbf{pisi-index.xml} dosyasý içeriði depo veritabanýna
aktarýlacaktýr.
\item \textbf{Kaynak Veritabanlarý}
\end{itemize}

\subsubsection{Kurulum Veritabaný}

FIXME: Ayrýntýlý taným eklenecek


\subsubsection{Depo Veritabanlarý}

FIXME: Ayrýntýlý taným eklenecek


\subsubsection{Kaynak Veritabanlarý}

FIXME: Ayrýntýlý taným eklenecek


\subsection{libpisi}

Paket veritabanýnýn ana yüklenicisi libpisi kütüphanesi olacaktýr.
Kütüphanenin temel görevleri aþaðýdaki liste ile özetlenebilir.

\begin{itemize}
\item Bir paketi sisteme kurma
\item Sistemden bir paketi kaldýrma
\item Verilen bir \textbf{PÝSÝ} paketini açma
\item Verilen bir \textbf{PÝSÝ} paketi içerisinden yalnýzca bir dosyayý/dizini
çýkarma (metadata.xml dosyasý veya install/ dizini gibi)
\item Baðýmlýlýk çözümleme
\item Depo veritabanýný sorgulama
\item Kurulu paketler veritabanýný sorgulama
\item Verilen bir ikili paketi sorgulama
\item Ýkili paketler deposundan bir paketi çekme/alma (fetch).
\item \textbf{PSPEC} dosyalarýný okuma/iþleme/oluþturma.
\item \textbf{PSPEC} dosyasýnda belirtilen bir uygulama kaynaðýný çekme/alma
(fetch)
\item Farklý dosya tiplerini (zip, tar, tar.gz, tar.bz2) açma
\item Action betiklerini çalýþtýrma
\item Ýkili \textbf{PÝSÝ} paketi oluþturma
\item Kurulu paketler veritabanýný güncelleme (yeni girdi ekleme, girdi
silme veya bir girdiyi güncelleme)
\item Dosya sistemini paket iþlemleri için sorgulama (bir paketin kurulumu
için diskte yeteri kadar boþ yer bulunuyor mu?)
\item Dosya özetlerini (hash) oluþturma ve doðruluklarýný kontrol etme.
\item Paketi imzalama ve imzanýn doðruluðunu kontrol etme.
\item \textbf{ÇOMAR} sistemi ile iletiþim kurma (CSL betiklerinin \textbf{ÇOMAR}'a
bildirilmesi, betiklerin \textbf{ÇOMAR}'dan kaldýrýlmasý)
\end{itemize}
Bu gerekleri saðlamak için libpisi modülleri aþaðýdaki þekilde gruplanmýþlardýr.

\begin{itemize}
\item XML
\item DB
\item ZIP
\item Util

\begin{itemize}
\item unpack (tar, tar.gz, tar.bz2, zip)
\item sha1
\item patch
\item gpg
\item fileutils (stat, vb. þeyler için)
\end{itemize}
\item DepSolver (baðýmlýlýk çözümleyici)
\item Fetcher
\item ActionExec (Action betiklerinin çalýþtýrýlmasý)
\item COMAR
\item Package (xml, zip, gpg, util modüllerini kullanýyor...)
\end{itemize}

\subsection{PÝSÝ Package Builder (GUI)}

\begin{itemize}
\item \textbf{PSPEC} dosyasýný kullanýcýnýn tanýmlarý doðrultusunda oluþturacak
\item Action betiklerini kullanýcýya yazdýracak
\item files.xml dosyasýný/dosyalarýný oluþturacak.
\item libpisi kullanarak paket oluþturacak.
\end{itemize}

\end{document}

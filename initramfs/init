#!/bin/sh

PATH=/usr/sbin:/usr/bin:/sbin:/bin
ROOT_LINKS='bin sbin lib boot usr opt'
ROOT_TREES='etc root home var'
LOOP="pardus.img"
CDROOT=0
QUIET=1
ROOT_DEVICE=''


probe_devices() {
    echo "Probing devices"
    /bin/coolplug 1> /dev/null 2>&1
}

parse_cmdline() {
    for x in `cat /proc/cmdline`; do
        case "${x}" in
            [0123456Ss])
                LEVEL=${x}
            ;;
            mudur=*livecd*)
                CDROOT=1
            ;;
            root=*)
                ROOT_DEVICE=`echo ${x}|cut -f2 -d=`
            ;;
            init=*)
                INIT=`echo ${x}|cut -f2 -d=`
            ;;
        esac
    done
}

findcdmount() {
    echo "find cdmount"
    if [ "$#" -gt "0" ]
    then
        for x in $*
        do
            mount -r ${x} /newroot/mnt/cdrom > /dev/null 2>&1

            if [ "$?" = '0' ]
            then
                # Check for cdroot image
                if [ -e /newroot/mnt/cdrom/${LOOP} ]
                then
                    ROOT_DEVICE="${x}"
                    break
                else
                    umount /newroot/mnt/cdrom
                fi
            fi
        done
    fi
}

manage_tmpfs() {
    echo "Managing tempfs"
    mount -t tmpfs tmpfs /newroot
    mkdir /newroot/dev /newroot/mnt /newroot/mnt/cdrom /newroot/mnt/livecd /newroot/tmp /newroot/tmp/.initrd /newroot/sys

    mount -t sysfs sys /sys 2> /dev/null

    probe_devices
    mv /dev/* /newroot/dev/

    findcdmount /newroot/dev/hd?
}

mount_cdroot() {
    cd /newroot
    echo "Mounting squashfs"
    # Loop type squashfs
    mount -o bind /newroot/dev /dev
    mount -t squashfs -o loop,ro /newroot/mnt/cdrom/${LOOP} /newroot/mnt/livecd

    if [ "$?" != '0' ]
    then
        echo "Could not find filesystem, running shell"
        /bin/sh
    fi
    FS_LOCATION='mnt/livecd'
    umount /dev

    for x in ${ROOT_LINKS}
    do
        ln -s "${FS_LOCATION}/${x}" "${x}"
    done

    echo "Managing links and files"
    mkdir initrd proc tmp sys
    chmod 1777 tmp
    (cd /newroot/${FS_LOCATION}; cp -a ${ROOT_TREES} /newroot)
}


# -------------------------- main cd ---------------------------------------
mount -o remount,rw /
mount -t proc proc /proc
mkdir /newroot

CMDLINE=`cat /proc/cmdline`
[ -n "$QUIET" ] && echo '0' > /proc/sys/kernel/printk

manage_tmpfs
mount_cdroot

# just to make sure, may not be necessary
[ ! -e /newroot/dev/console ] && mknod /newroot/dev/console c 5 1

echo "About to pivotroot"
cd /newroot
mkdir /newroot/proc /newroot/sys 2>/dev/null
pivot_root . tmp/.initrd

umount -n /tmp/.initrd/proc > /dev/null 2>&1
umount -n /tmp/.initrd/sys > /dev/null 2>&1

# exec chroot . /sbin/init </dev/console >/dev/console 2>&1
echo "Final chroot"
exec <dev/console >dev/console 2>&1
# echo '.'
exec chroot . /bin/sh <<- EOF
     umount -n /tmp/.initrd > /dev/null 2>&1
    /sbin/blockdev --flushbufs /dev/ram0 >/dev/null 2>&1
     exec /sbin/init ${LEVEL}
EOF

echo 'A fatal error has occured. Running  shell...'
echo
exec /bin/sh


# --------------------------- main hdd ----------------------------------------
mount -n -t proc proc /proc
mount -n -t sysfs sys /sys

# Prepare for switch root
echo 0x0100 > /proc/sys/kernel/real-root-dev

parse_cmdline

[ "${INIT}" == "" ] && INIT="/sbin/init";

# mount real root
mount -t auto -n -o ro $ROOT_DEVICE /newroot

# umount pseudo fs
umount /sys
umount /proc

# switch_root and pass init arguments
exec /bin/switch_root -c /dev/console /newroot ${INIT} ${LEVEL}

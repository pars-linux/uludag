 Python ile Plasmoid Yapımı

Python ile Plasmoid Yapımı

1-Özet
2-Proje yapısı
3-metadata.desktop
4-Ana betik
5-Paketleme, kurma ve çalıştırma
6-Sonuç
7-Sorun giderme
8-Terimler ve Notlar

Özet

Bu belgede Python’da basit bir plasmoid yapmayı, yaptıktan sonra kurup ve çalıştırmayı işleyeceğiz. Yani düzenle, kur, çalıştır, hata ayıkla döngüsünü dahilinde işimizi yapacağız. Bu belgeyi takip edebilmek için KDE 4.2 veya daha güncel bir sürüme ve Plasma için Python desteğine ve ilgili bağımlılıklara sahip olmanız gerekir. Ayrıca Unix türevi Linux, veya *BSD gibi bir işletim sistemi kullandığınızı ve komut istemine aşina olduğunuzu varsayıyorum.

Proje yapısı

Herhangi bir yazılım projesinde ilk adım proje dizinini diskte yaratmaktır. Bu belgede biz çok basit bir merhaba-dünya küçük uygulaması yaratacağız. Uygun bir yerde hello-python adında bir dizin yaratın ve bu dizinin altına içinde code dizini olan bir contents dizini yaratın.Aşağıdaki komut tüm bu işlemleri yapar.

mkdir -p hello-python/contents/code

Bu komut plasmapkg komutunun beklediği paket yapısıyla eşleşen bir dizin yapısı yaratır. Daha sonra buna tekrar değineceğiz.

metadata.desktop

hello-python dizinin içinde metadata.desktop adında bir dosya yaratın ve bir metin editörüyle açın. Aşağıdaki kodu metadata.desktop içine kopyalayın.

[Desktop Entry]
Encoding=UTF-8
Name=Hello Python
Name[nl]=Hallo Python
Type=Service
ServiceTypes=Plasma/Applet
Icon=chronometer
X-Plasma-API=python
X-Plasma-MainScript=code/main.py
X-KDE-PluginInfo-Author=Simon Edwards
X-KDE-PluginInfo-Email=simon@simonzone.com
X-KDE-PluginInfo-Name=hello-python
X-KDE-PluginInfo-Version=1.0
X-KDE-PluginInfo-Website=http://plasma.kde.org/
X-KDE-PluginInfo-Category=Examples
X-KDE-PluginInfo-Depends=
X-KDE-PluginInfo-License=GPL
X-KDE-PluginInfo-EnabledByDefault=true

metadata.desktop dosyası Plasma’nın küçük uygulamayı yükleyebilmesi için gereken önemli bilgileri içerir ayrıca küçük uygulamayı kimin yaptığı ve ne hakkında olduğu gibi bilgiler de içerir. Name satırı küçük uygulamanın adını belirtir. Bu alan farklı çeviriler için birden fazla da olabilir. Burada ben ismin bir de Hollandaca çevirisini de ekledim. [nl] alanın hangi dile ait olduğunu belirtir.

Type ve Service satırları bu .desktop dosyasının ne tür bir şey tanımladığını anlatır. Biz burada bir Plasma küçük uygulaması yaptığımızı belirtiyoruz. Icon satırı bu küçük uygulamayla ilgili olan simgenin ismini belirtiyor. Bu simge Plasma çalışma alanında Add Widgets penceresi gibi yerlerde görünecektir.

X-Plasma-API ve ve X-Plasma-MainScript satırları Plasma tarafından küçük uygulamayı yükler ve çalıştırırken gereken doğru betik motorunu bulmak için kullanılır.

X-KDE-PluginInfo-* satırları ise küçük uygulamayı kimin yaptığı gibi fazladan bilgileri içerir. X-KDE-PluginInfo-Category bölümü bu küçük uygulamanın hangi kategoriye ait olduğunu belirtir. http://techbase.kde.org/Projects/Plasma/PIG adresinde kullanılabilen kategori isimlerinin bir listesi bulunmaktadır.

Ana betik

contents/code dizini altında main.py adında bir dosya yaratın metin editörünüzle açın ve aşağıdaki kodu kopyalayıp, kaydedin.

# -*- coding: utf-8 -*-
# <Copyright and license information goes here.>
from PyQt4.QtCore import Qt
from PyKDE4.plasma import Plasma
from PyKDE4 import plasmascript

class HelloPython(plasmascript.Applet):
    def __init__(self,parent,args=None):
        plasmascript.Applet.__init__(self,parent)

    def init(self):
        self.setHasConfigurationInterface(False)
        self.resize(125, 125)
        self.setAspectRatioMode(Plasma.Square)

    def paintInterface(self, painter, option, rect):
        painter.save()
        painter.setPen(Qt.white)
        painter.drawText(rect, Qt.AlignVCenter | Qt.AlignHCenter, "Hello Python!")
        painter.restore()

def CreateApplet(parent):
    return HelloPython(parent)

Bu, bir şeyler yapabilen basit bir küçük uygulamanın kodudur. Kod şimdilik yukarıya eklemediğimiz bazı lisans ve telif hakkı bilgileri ile başlıyor.

Kodun başında bazı import ifadeleri yer alıyor. Plasma’daki Python desteği PyQt ve PyKDE’nin bir uzantısıdır. Bu yüzden kodun başında bazı PyQt ve PyKDE modüllerini içeri aktardık. Plasma ile ilgili kullanacağımız iki modül var. İlki PyKDE4.plasma Plasma C++ Uygulama Programlama Arayüzü (API) bağlantılarıdır.. Bu bize ihtiyacımız olan pek çok API’ye ulaşma imkanı verir ama hepsine değil. KDE’s Get Hot New Stuff(GHNS) Framework’ünü kullanarak küçük uygulama yaratmak, paketlemek ve ağ üzerinden dağıtabilmek için PyKDE4.plasmascript içinde yer alan fazladan bazı Python sınıflarını kullanmalıyız.

Şimdi küçük uygulamamızın ana sınıfını tanımlıyoruz. Yaptığımız Hello Python uygulaması plasma.subclass’ın bir alt sınıfı olmalı. __init__ yönteminin içinde üst sınıfın constructor’ını çalıştırdğımızdan emin olmalıyız. Unutmayın, ilk değer atama kodlarının __init__ yerine init() yönteminde olması tavsiye edilir. Plasma, küçük uygulamayı kurup (construct edip), ilk değer atadıktan sonra, Plasma, init() yöntemini uygulamanın kendini kurabilmesi için çağıracak. Biz bu uygulamadaki init() yönteminde sadece Plasma’ya bir yapılandırma penceremizin olmadığını belirttik ve uygulamanın büyüklüğünün ilk değerlerini girdik.

paintInterface() yöntemi “Hello Python” iletimizi çizdiğimiz yerdir. Önce save() yöntemini çağırarak verilen Qpainter nesnesinin ayarlarını ve durumunu kaydettik. Daha sonra rengi beyaza ayarladık ve iletimizi çizmek için drawText() yöntemini kullandık. paintInterface()’in sonunda, QPainter ayarlarını paintInterface() çağrılmadan önce nasılsa o duruma geri döndüren restore() yöntemini çağırdık.

CreateApplet() fonksiyonuna küçük uygulamamızın bir örneğini çıkartmak için ihtyacımız var. Plasma, Python tabanlı bir küçük uygulamayı yüklüyorsa, çağırabileceği bir CreateApplet() fonksiyonun olmasını bekler. CreateApplet fonksiyonunun görevi küçük uygulamanın bir örneğini çıkarmak ve onu Plasma’ya geri döndürmektir.

Paketleme, Kurulum ve Çalıştırma

Plasma küçük uygulamaları zip dosyaları olarak paketlenebilir ve plasmapkg komut satırı aracı kullanılarak kurulabilir. Bizim bu projede kullandığımız dizin yapısı zip dosyasında beklenen dizin yapısıyla eşleşmektedir. Tek yapmamız gereken zip’leyip güncellemek. Aşağıdaki komutu hello-python dizininin içinden verin.

zip -r ../hello-python.zip .

Bu komut içinde bulunduğunuz hello-python dizinin bir üst dizininde hello-python.zip adında bir dizin yaratacak. Kabukta bu dizine gidin ve yaptığınız hello-python küçük uygulamasını kurmak için plasmapkg komutunu verin.

plasmapkg -i hello-python.zip

Bu komut küçük uygulamalarıi ev dizininizin içine kuracaktır. Şimdi çalıştırabiliriz. Küçük uygulama geliştirirken plasmoidviewer aracını kullanmak daha uygundur. Bu araç plasmoidi masaüstünü kullanarak görüntülemek yerine bir pencere içinde görüntüler. Aşağıdaki komut küçük uygulamamızı çalıştıracaktır.

plasmoidviewer hello-python

Şimdi çalışmalarınızın meyvesini görüyor olmalısınız.

Küçük uygulamayı silmek için tekrar plasmapkg komutunu ama bu kez -r seçeneği ile kullanırız.

plasmapkg -r hello-python

Sonuç

Bu belge Python kullanarak bir Plasma küçük uygulaması geliştirmenin temellerini kapsamaktadır. Burada tartışılan pek çok şey sıkıcı fakat her küçük uygulama projesinde yer almaktadır. İlerideki belgelerde tek satırlık durağan bir metin yerine daha heyecan verici şeylere geçebiliriz.

Bir sonraki belgede el ile paintInterface() yöntemini gerçeklemek yerine Plasma’nın özelleştirilmiş elemanlarını nasıl kullanacağınızı açıklayacağız. Nasıl yapılacağını öğrenmek için http://techbase.kde.org/Development/Tutorials/Plasma/Python/Using_widgets adresindeki belgeye bakın.

Sorun giderme

Hata: Installation of hello-python.zip failed.

Çözüm: plasmapkg’den daha ayrıntılı bir çıktı elde edin. Kdebugdialog’u çalıştırın.

kdebugdialog --fullmode ve 1209 libplasma için çıktıları açın.

Hata: plasmoidviewer(19580)/libplasma Plasma::Package::isValid: Could not find required file mainscript , look in “/home/user/.kde4/share/apps/plasma/plasmoids/kotnet-login/contents/code/main.py”

Çözüm: belirtilen dosyalara sahip olup olmadığınızı yeniden denetleyin (bir main.py dosyasına ihtiyacınız var) ve dosya isimlerinizi denetleyin.

Hata: Could not create a python scriptengine for “your package name”

Çözüm: Plasma kurulumunuzun gerekli dosyalara sahip olup olmadığını denetleyin. (plasma_importer.py, plasmascript.py) ve python-dev paketinin kurulu olup olmadığını denetleyin.

Hata: ImportError: /usr/lib/python2.5/lib-dynload/select.so: undefined symbol: PyExc_ValueError

Çözüm: Muhtemelen, kodu çalıştıracak python sürümü yerine başka bir pyqt sürümü derlenmiş.(python2.5 vs python2.6). Doğru paketleri bulmanız gerekiyor. PyQt’nizi 2.6 ya güncelleyin(önerilir) veya Python sürümünüzü 2.5′e indirin.

Hata: This object could not be created for the following reason: Could not open the hello-python package required for the Hello Python widget.

Çözüm: Belgeyi yakından takip edin. Aşağıdaki dosya yapısını oluşturmanız gerekiyor.

/hello-python/
/hello-python/metadata.desktop
/hello-python/contents/
/hello-python/contents/code/
/hello-python/contents/code/main.py

Terimler ve Notlar:

applet = küçük uygulama
application programming interface (API) = uygulama programlama arayüzü
method = yöntem
script = betik

http://techbase.kde.org/Development/Tutorials/Plasma/Python/GettingStarted adresindeki belgenin çevirisidir. Terimler için http://www.tdk.gov.tr/TR/Genel/BelgeGoster.aspx?F6E10F8892433CFFAAF6AA849816B2EF972ACAD7D1AFFDBF adresinde yer alan TDK Bilgisayar Terimleri Karşılıkları Kılavuzu temel alınmıştır.
#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Network configuration tool
# Copyright (C) 2006-2009, TUBITAK/UEKAE
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version. Please read the COPYING file.
#
import sys
import dbus
from networkmanager import *
from networkmanager.ipaddr import *
import uuid
import pdb

useColor = True

# Color characters
colors = {'red'       : '\x1b[31;01m',
         'blue'       : '\x1b[34;01m',
         'cyan'       : '\x1b[36;01m',
         'gray'       : '\x1b[30;01m',
         'green'      : '\x1b[32;01m',
         'light'      : '\x1b[37;01m',
         'yellow'     : '\x1b[33;01m',
         'magenta'    : '\x1b[35;01m',
         'reddark'    : '\x1b[31;0m',
         'bluedark'   : '\x1b[34;0m',
         'cyandark'   : '\x1b[36;0m',
         'graydark'   : '\x1b[30;0m',
         'greendark'  : '\x1b[32;0m',
         'magentadark': '\x1b[35;0m',
         'normal'     : '\x1b[0m'}


def colorize(msg, color):
    global useColor
    if not useColor:
        return msg
    else:
        return "%s%s%s" % (colors[color], msg, colors['normal'])

def printUsage():
    print "Usage: %s <command> <option>" % sys.argv[0]
    print
    print "Commands:"
    print "    connections     Show connections"
    print "    devices         Show devices"
    print "    create          Create profile"
    print "    delete          Delete profile"
    print "    up <profile>    Bring profile up"
    print "    down <profile>  Bring profile down"
    print
    print "Options:"
    print "    --no-color      Don't colorize output"
    print
    
def getInput(label):
    try:
        return raw_input(colorize(("%s > " % label), 'light'))
    except (KeyboardInterrupt, EOFError):
        print
        sys.exit(1)

def getNumber(label, min_, max_):
    index_ = min_ - 1
    while index_ < min_ or index_ > max_:
        try:
            index_ = int(raw_input(colorize(("%s > " % label), 'light')))
        except ValueError:
            pass
        except (KeyboardInterrupt, EOFError):
            print
            sys.exit(1)
    return index_

def printConnections(nm):
    for i in nm.connections:
        print i

def printDevices(nm):
    for i in nm.devices:
        print i

def deleteProfile(nm):

    ETHERNET=[]
    WIFI=[]
    CDMA=[]
    GSM=[]
    UNKNOWN=[]

    connections = {
                '802-3-ethernet' : ETHERNET,
                '802-11-wireless' : WIFI,
                'cdma' : CDMA,
                'gsm' : GSM,
                'unknown' : UNKNOWN
            }

    for connection in nm.connections:
        connections[connection.settings.type] += [connection]


    list = []
    index_ = 1
    #Aşağıda yazdırdıktan sonra hangi interface in seçildiğini bulmak için

    for connectionType in connections.keys() :

        if len(connections[connectionType]) > 0:
            connString = connectionType.split("-").pop().capitalize()
            print colorize("%s profiles" % connString, 'green')
            for connection in connections[connectionType] :
                print "  [%s] %s" % (index_, str(connection.settings.id).capitalize())
                list += [connection]
                index_ += 1
    connection = list[(getNumber("Delete", 1, index_ - 1) - 1)]
    connection.delete()



def createProfileETHERNET(nm,_device) :

    settings = None
    settings = WiredSettings()
    settings.uuid = str(uuid.uuid4())
    #pdb.set_trace()
    settings.device = _device
    settings.mac_address = _device.hwaddress

    print colorize("Select IP assignment method:", "yellow")
    print "  [1] Enter an IP address manually"
    print "  [2] Automatically obtain an IP address"
    if getNumber("Type", 1, 2) == 2 :
        settings.set_auto()
    else :
        settings.address = getInput("Address")
        settings.netmask = getInput("Mask")
        settings.gateway = getInput("Gateway")

    print colorize("Select Name server (DNS) assignment method:", "yellow")
    print "  [1] Use default name servers"
    print "  [2] Enter an name server address manually"
    print "  [3] Automatically obtain from DHCP"
    dns = getNumber("Type", 1, 3)
    dns_address = ""
    if dns == 1 :
        dns_mode = "default"
        dns_address = ""
    elif dns == 2 :
        dns_mode = "manual"
        dns_address = getInput("Address")
        settings.dns=dns_address
    elif dns == 3 :
        dns_mode = "auto"
        dns_address = ""

    profile = None
    profiles = []

    for i in nm.connections :
        profiles += [i.settings.id]

    print
    while not profile:
        profile = getInput("Profile name").strip()
        if profile in profiles:
            print "There is already a profile named '%s'" % profile
            print
            profile = None

    settings.id = profile
    nm.add_connection(settings)
    #possible_settings = ('dns','num','user','pass')
    #for s in possible_settings:
     #   if s in params:
      #      settings.s = params[s]









def createProfileWIFI(nm,_device):
    settings = None
    settings = WirelessSettings()
    settings.uuid = str(uuid.uuid4())
    #pdb.set_trace()
    settings.device = _device


    print colorize("Select IP assignment method:", "yellow")
    print "  [1] Enter an IP address manually"
    print "  [2] Automatically obtain an IP address"
    if getNumber("Type", 1, 2) == 2 :
        settings.set_auto()
    else :
        settings.address = getInput("Address")
        settings.netmask = getInput("Mask")
        settings.gateway = getInput("Gateway")

    print "  [1] Use default name servers"
    print "  [2] Enter an name server address manually"
    print "  [3] Automatically obtain from DHCP"
    dns = getNumber("Type", 1, 3)
    dns_address = ""
    if dns == 1 :
        dns_mode = "default"
        dns_address = ""
    elif dns == 2 :
        dns_mode = "manual"
        dns_address = getInput("Address")
        settings.dns = dns_address
    elif dns == 3 :
        dns_mode = "auto"
        ns_address = ""

    profile = None
    profiles = []

    for i in nm.connections :
        profiles += [i.settings.id]

    print
    while not profile:
        profile = getInput("Profile name").strip()
        if profile in profiles:
            print "There is already a profile named '%s'" % profile
            print
            profile = None

    settings.id = profile
    nm.add_connection(settings)



def createProfile(nm) :

    if len(nm.devices) == 0 :
        # No network devices
        return

    ETHERNET=[]
    WIFI=[]
    CDMA=[]
    GSM=[]
    UNKNOWN=[]

    devices = {
        DeviceType.UNKNOWN : UNKNOWN,
        DeviceType.WIFI : WIFI,
        DeviceType.GSM : GSM,
        DeviceType.CDMA : CDMA,
        DeviceType.ETHERNET : ETHERNET
    }

    functions = {
            DeviceType.ETHERNET : createProfileETHERNET,
            DeviceType.WIFI : createProfileWIFI
            }

    for device in nm.devices :
        devices[device.type] += [device]


    index_ = 1
    print colorize("Select interface:", "yellow")


    list = []
    #Aşağıda yazdırdıktan sonra hangi interface in seçildiğini bulmak için

    for interface in devices.keys() :
        if len(devices[interface]) > 0:
            print "  [%s] %s" % (index_, str(interface).capitalize())
            list += [interface]
            index_ += 1

    max=0
    for interface in devices.keys() :
        max += len(devices[interface])


    packageNo = getNumber("Interface", 1, max) - 1

    index_ = 1

    _devices = devices[list[packageNo]]

    if len(_devices) > 0:
        print
        print colorize("Select device:", "yellow")
        for device in _devices:
            print "  [%s] %s" % (index_, device)
        index_ += 1
        deviceNo = getNumber("Device", 1, max) - 1

        functions[_devices[deviceNo].type](nm , _devices[deviceNo])

def stateProfile(nm ,command) :
    try :
        profile = sys.argv[2]
    except :
        printUsage()
        return 1

    def stateProfileDown(nm ,profile) :
        for active_conn in nm.active_connections :
            if active_conn.connection.settings.id == profile :
                active_conn.devices[0].disconnect()

    def stateProfileUp(nm, profile) :
        for conn in nm.connections :
            if conn.settings.id == profile :
                for device in nm.devices :
                    if device.hwaddress == conn.settings.mac_address :
                        nm.activate_connection(conn,device)


    if command == "down" :
        stateProfileDown(nm ,profile)
    elif command == "up" :
        stateProfileUp(nm ,profile)




def main():

    try:
        command = sys.argv[1]
    except:
        printUsage()
        return 1

    if "--no-color" in sys.argv:
        global useColor
        useColor = False
        sys.argv.remove("--no-color")

    nm = NetworkManager()

    if command == "connections":
        return printConnections(nm)
    elif command == "devices":
        return printDevices(nm)
    elif command == "create":
        return createProfile(nm)
    elif command == "delete":
        return deleteProfile(nm)
    elif command in ("up", "down"):
        return stateProfile(nm,command)
    else:
        printUsage()
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())

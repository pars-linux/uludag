#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Network configuration tool for NetworkManager
# Copyright (C) 2010 TUBITAK/UEKAE
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version. Please read the COPYING file.
#

"""Interactive network configuration tool for NetworkManager"""

import sys
import uuid
from optparse import OptionParser

from networkmanager import NetworkManager, WiredSettings, DeviceType


# Color characters
COLORS = {
            'red'       : '\x1b[31;01m',
            'blue'       : '\x1b[34;01m',
            'cyan'       : '\x1b[36;01m',
            'gray'       : '\x1b[30;01m',
            'green'      : '\x1b[32;01m',
            'light'      : '\x1b[37;01m',
            'yellow'     : '\x1b[33;01m',
            'magenta'    : '\x1b[35;01m',
            'reddark'    : '\x1b[31;0m',
            'bluedark'   : '\x1b[34;0m',
            'cyandark'   : '\x1b[36;0m',
            'graydark'   : '\x1b[30;0m',
            'greendark'  : '\x1b[32;0m',
            'magentadark': '\x1b[35;0m',
            'normal'     : '\x1b[0m'
         }

USE_COLOR = True
GUDEV_HANDLE = None

def colorize(msg, color):
    """Colorize the given message if requested."""
    if not USE_COLOR:
        return msg
    else:
        return "%s%s%s" % (COLORS[color], msg, COLORS['normal'])

def get_input(label):
    """Get input from the terminal."""
    try:
        return raw_input(colorize(("%s > " % label), 'light'))
    except (KeyboardInterrupt, EOFError):
        print
        sys.exit(1)

def get_number(label, min_, max_):
    """Get a number from the terminal."""
    index_ = min_ - 1
    while index_ < min_ or index_ > max_:
        try:
            index_ = int(raw_input(colorize(("%s > " % label), 'light')))
        except ValueError:
            pass
        except (KeyboardInterrupt, EOFError):
            print
            sys.exit(1)
    return index_

def print_connection(state, nm_settings):
    """Print a specific connection."""
    print "[%s]  %s%s    %s" % (colorize(state, 'green'),
                                colorize(nm_settings.id, 'cyan'),
                                "",
                                "")

def print_connections(nm_handle):
    """Print connection list."""
    connections = {
                '802-11-wireless'   : [],
                '802-3-ethernet'    : [],
                'cdma'              : [],
                'gsm'               : [],
                'unknown'           : [],
            }

    for connection in nm_handle.connections:
        connections[connection.settings.type].append(connection)

    for connection_key in connections:
        if len(connections[connection_key]) > 0:
            conn_interface = connection_key.split("-").pop().capitalize()
            print colorize("%s connections" % conn_interface, 'green')

            for connection in connections[connection_key]:
                state_mark = " "
                for active in nm_handle.active_connections:
                    if active.connection.settings.id == connection.settings.id:
                        state_mark = "X"
                    print_connection(state_mark, connection.settings)

def print_device(nm_device):
    """Pretty print a specific device."""
    vendor = ""
    model = ""
    if GUDEV_HANDLE is not None:
        udev_device = \
                GUDEV_HANDLE.query_by_subsystem_and_name("net",
                                                         nm_device.interface)
        if udev_device:
            vendor = udev_device.get_property("ID_VENDOR_FROM_DATABASE")
            model = udev_device.get_property("ID_MODEL_FROM_DATABASE")

    print " %6s %s %s [driver: %s]" % (colorize(nm_device.interface, "light"),
                                       vendor, model,
                                       colorize(nm_device.driver, "yellow"))

def print_devices(nm_handle):
    """Print the device list."""
    devices = {
        DeviceType.UNKNOWN  : [],
        DeviceType.WIFI     : [],
        DeviceType.GSM      : [],
        DeviceType.CDMA     : [],
        DeviceType.ETHERNET : [],
    }

    for device in nm_handle.devices:
        devices[device.type].append(device)

    for device in devices:
        if len(devices[device]) > 0:
            print colorize("%s devices" % str(device).capitalize(), 'green')
            for dev in devices[device]:
                print_device(dev)


def remove_connection(nm_handle):
    """Delete a connection."""
    connections = {
                '802-11-wireless'   : [],
                '802-3-ethernet'    : [],
                'cdma'              : [],
                'gsm'               : [],
                'unknown'           : [],
            }

    for connection in nm_handle.connections:
        connections[connection.settings.type].append(connection)


    connection_list = []
    index_ = 1

    for connection_type in connections:
        if len(connections[connection_type]) > 0:
            conn_interface = connection_type.split("-").pop().capitalize()
            print colorize("%s connections" % conn_interface, 'green')
            for connection in connections[connection_type]:
                print "  [%s] %s" % (index_,
                                     str(connection.settings.id).capitalize())
                connection_list.append(connection)
                index_ += 1
    connection = connection_list[(get_number("Delete", 1, index_ - 1) - 1)]
    connection.delete()

def create_ethernet_connection(nm_handle, _device):
    """Create an ethernet connection."""

    settings = None
    settings = WiredSettings()
    settings.uuid = str(uuid.uuid4())
    settings.device = _device
    settings.mac_address = _device.hwaddress

    print colorize("Select IP assignment method:", "yellow")
    print "  [1] Enter an IP address manually"
    print "  [2] Automatically obtain an IP address"
    if get_number("Type", 1, 2) == 2:
        settings.set_auto()
    else:
        settings.address = get_input("Address")
        settings.netmask = get_input("Mask")
        settings.gateway = get_input("Gateway")

    print colorize("Select Name server (DNS) assignment method:", "yellow")
    #print "  [1] Use default name servers"
    print "  [1] Enter an name server address manually"
    print "  [2] Automatically obtain from DHCP"
    dns = get_number("Type", 1, 2)
    dns_address = ""
    if dns == 1:
        dns_mode = "manual"
        dns_address = get_input("Address")
        settings.dns = dns_address
    elif dns == 2:
        dns_mode = "auto"
        dns_address = ""

    connection_id = None
    connection_ids = []

    for conn in nm_handle.connections:
        connection_ids.append(conn.settings.id)

    print
    while not connection_id:
        connection_id = get_input("Profile name").strip()
        if connection_id in connection_ids:
            print "There is already a connection named '%s'" % connection_id
            print
            connection_id = None

    settings.id = connection_id
    nm_handle.add_connection(settings)
    #possible_settings = ('dns','num','user','pass')
    #for s in possible_settings:
     #   if s in params:
      #      settings.s = params[s]


def create_wireless_connection(nm_handle, _device):
    """Create a wireless connection."""
    pass

def create_connection(nm_handle):
    """Create a connection."""
    if len(nm_handle.devices) == 0:
        # No network devices
        return

    devices = {
        DeviceType.UNKNOWN  : [],
        DeviceType.WIFI     : [],
        DeviceType.GSM      : [],
        DeviceType.CDMA     : [],
        DeviceType.ETHERNET : [],
    }

    functions = {
            DeviceType.ETHERNET : create_ethernet_connection,
            DeviceType.WIFI : create_wireless_connection,
            }

    for device in nm_handle.devices:
        devices[device.type].append(device)


    index_ = 1
    print colorize("Select interface:", "yellow")


    device_list = []
    for interface in devices:
        if len(devices[interface]) > 0:
            print "  [%s] %s" % (index_, str(interface).capitalize())
            device_list.append(interface)
            index_ += 1

    _max = 0
    for interface in devices:
        _max += len(devices[interface])

    connection_no = get_number("Interface", 1, _max) - 1

    index_ = 1

    _devices = devices[device_list[connection_no]]

    if len(_devices) > 0:
        print
        print colorize("Select device:", "yellow")
        for device in _devices:
            print "  [%s] %s" % (index_, device)
            index_ += 1
        dev_no = get_number("Device", 1, _max) - 1

        functions[_devices[dev_no].type](nm_handle, _devices[dev_no])


def set_connection_state_down(nm_handle, connection_id):
    """Set the state of a given connection to Down."""
    for active_conn in nm_handle.active_connections:
        if active_conn.connection.settings.id == connection_id:
            active_conn.devices[0].disconnect()

def set_connection_state_up(nm_handle, connection_id, interface):
    """Set the state of a given connection to Up."""
    conn = nm_handle.get_connections_by_id(connection_id)
    if(conn is not None):
        conn = conn[0]
        # FIXME: if conn.settings.mac_address is empty
        # don't search for devices
        #if conn.settings.mac_address = ""
        #else:
        for device in nm_handle.devices:
            if conn.settings.mac_address and \
               device.hwaddress == conn.settings.mac_address:
                nm_handle.activate_connection(conn, device)
                print "a"
            else:
                # The connection doesn't have a fixed MAC so
                # we have to ask for the interface
                # or use a possibly given interface through CLI
                if interface:
                    # The interface is given
                    for device in nm_handle.devices:
                        if device.interface == interface:
                            nm_handle.activate_connection(conn, device)
                else:
                    device_list_type = []
                    for device in nm_handle.devices:
                        if str(device.type) == \
                           conn.settings.type.split("-").pop().upper():
                            device_list_type.append(device)
                    if len(device_list_type) > 0:
                        print colorize("Select device:", "yellow")
                        index_ = 1
                        for device in device_list_type:
                            print "  [%s] %s" % (index_, device)
                            index_ += 1
                        dev_no = get_number("Device", 1, index_-1) - 1
                        device = device_list_type[dev_no]
                        nm_handle.activate_connection(conn, device)
    else:
        print "There is no connection named: %s" %connection_id


#####################
### Main function ###
#####################
def main():
    """Main entry point to the interactive NetworkManager utility."""

    if "--no-color" in sys.argv:
        global USE_COLOR
        USE_COLOR = False
        sys.argv.remove("--no-color")

    # Create NetworkManager handle
    nm_handle = NetworkManager()

    # If available create a gudev client for vendor/device informations
    try:
        import gudev
    except ImportError:
        pass
    else:
        global GUDEV_HANDLE
        GUDEV_HANDLE = gudev.Client("net")

    usage = """\
usage: %prog [options] <interface>

When activating a connection, you should either provide an interface like
'eth0', 'wlan0', etc. or select an interface from the list."""

    parser = OptionParser(usage)

    parser.add_option("-C", "--connections",
                      action="store_const",
                      dest="action",
                      const="connections",
                      help='List connections')

    parser.add_option("-D", "--devices",
                      action="store_const",
                      dest="action",
                      const="devices",
                      help='List devices')

    parser.add_option("-c", "--create",
                      action="store_const",
                      dest="action",
                      const="create",
                      help='Create a connection')

    parser.add_option("-e", "--edit",
                      action="store_const",
                      dest="action",
                      const="edit",
                      help='Edit a connection')

    parser.add_option("-r", "--remove",
                      action="store_const",
                      dest="action",
                      const="remove",
                      help='Remove a connection')

    parser.add_option("-a", "--activate",
                      action="store",
                      dest="a_connection",
                      metavar="CONNECTION",
                      help='Activates the given connection')

    parser.add_option("-d", "--deactivate",
                      action="store",
                      dest="d_connection",
                      metavar="CONNECTION",
                      help='Deactivates the given connection')


    (options, args) = parser.parse_args()

    if options.action == "connections":
        print_connections(nm_handle)
    elif options.action == "devices":
        print_devices(nm_handle)
    elif options.action == "create":
        create_connection(nm_handle)
    elif options.action == "remove":
        remove_connection(nm_handle)
    elif options.a_connection is not None:
        interface = None
        if len(args) > 0:
            interface = args[0]
        set_connection_state_up(nm_handle, options.a_connection, interface)
    elif options.d_connection is not None:
        set_connection_state_down(nm_handle, options.d_connection)
    else:
        parser.print_help()
        return 1

    # FIXME: Do better error handling
    return 0

if __name__ == "__main__":
    sys.exit(main())

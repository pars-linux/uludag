#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys

componentIndexFile = "/tmp/sil/component"
svnSrc = "devel"
svnTarget = "2009/devel"

componentXMLTemplate = """
<PISI>
  <Name>%s</Name>
  <LocalName xml:lang="en">FIXME</LocalName>
  <Summary xml:lang="en">FIXME</Summary>
  <Description xml:lang="en">FIXME</Description>
  <Icon>FIXME</Icon>
  <Packager>
    <Name>Pardus</Name>
    <Email>admins@pardus.org.tr</Email>
  </Packager>
  <VisibleTo>user</VisibleTo>
</PISI>
"""

def loadFile(_file):
    try:
        f = file(_file)
        d = [a.rstrip("\n").rstrip(" ") for a in f]
        d = filter(lambda x: not (x.startswith("#") or x.strip() == ""), d)
        f.close()
        return d
    except IOError:
        print "can not load file %s" % _file
        sys.exit(1)

def parseComponentIndex(_list):
    # the all knowing tree
    level = 0
    current = []
    pkg = {}

    for line in _list:
        if "pspec.xml" in line:
            # print "found a package"
            pkg[line.strip()] = current

        elif not line.startswith(" "):
            # we have a main component
            current = [line.strip()]

        else:
            # 4 spaces define a sub component
            level = (len(line) - len(line.split()[0])) / 4

            tmp = current[0:level]
            tmp.append(line.strip())

            current = tmp

    return pkg

def writeComponentData(data, _path):
    target = os.path.join(_path, "component.xml")

    try:
        f = open(target, "w")
        f.write(componentXMLTemplate % data)
        f.close()
    except IOError:
        print "cannot write %s" % _path
        sys.exit(1)

def getComponentDirs(_index):
    targetdirs = []

    for i in _index.values():
        d = ""

        for k in i:
            d += "/%s" % k

        if d not in targetdirs:
            targetdirs.append(d)

    targetdirs.sort()
    return targetdirs

def createDirs(_index, _path):
    dirs = getComponentDirs(_index)

    for i in dirs:
        target = os.path.join(_path, i)

        if not os.path.exists(target):
            os.makedirs(target)

        writeComponentData(i.lstrip("/").replace("/", "."), target)


if __name__ == "__main__":
    componentIndex = loadFile(componentIndexFile)
    packageDict = parseComponentIndex(componentIndex)

    # createDirs(packageDict, "/")

#    for i in getComponentDirs(packageDict):
#        print i

#    for i in packageDict.keys():
#        print "%s -> %s" % (i, packageDict[i])


